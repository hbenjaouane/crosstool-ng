From 6007761e4e87204b3ab9e9994047114a2ee1d0ee Mon Sep 17 00:00:00 2001
From: michaedw in build chroot <build@ctbu-bld4.cisco.com>
Date: Sun, 24 Jul 2011 19:43:56 +0000
Subject: [PATCH] version 0.7 to CVS 2008-06-03

---
 .cvsignore                       |    2 +-
 Makefile                         |   33 ++-
 XmlRpc.sln                       |  203 ++++++++-----
 XmlRpc.vcproj                    |  598 ++++++++++++++++++++++++++-----------
 debian/.cvsignore                |    2 +
 debian/changelog                 |    5 +
 debian/control                   |   30 ++
 debian/copyright                 |    5 +
 debian/dirs                      |    3 +
 debian/files                     |    2 +
 debian/libxmlrpc++-dev.files     |    2 +
 debian/libxmlrpc++1.files        |    1 +
 debian/libxmlrpc++1.substvars    |    1 +
 debian/rules                     |   86 ++++++
 src/XmlRpc.h                     |    9 +-
 src/XmlRpcClient.cpp             |  215 +++++++++++----
 src/XmlRpcClient.h               |   50 ++--
 src/XmlRpcDispatch.cpp           |  193 ++++++++-----
 src/XmlRpcDispatch.h             |   22 +-
 src/XmlRpcException.h            |    2 +-
 src/XmlRpcMutex.cpp              |   60 ++++
 src/XmlRpcMutex.h                |   46 +++
 src/XmlRpcServer.cpp             |  243 +++++++++++++++-
 src/XmlRpcServer.h               |   77 ++++-
 src/XmlRpcServerConnection.cpp   |  228 +++------------
 src/XmlRpcServerConnection.h     |   62 ++---
 src/XmlRpcServerMethod.cpp       |    3 +
 src/XmlRpcServerMethod.h         |    6 +-
 src/XmlRpcSocket.cpp             |  166 ++++-------
 src/XmlRpcSocket.h               |   52 ++--
 src/XmlRpcSource.cpp             |  181 +++++++++++-
 src/XmlRpcSource.h               |   41 +++-
 src/XmlRpcThread.cpp             |   74 +++++
 src/XmlRpcThread.h               |   60 ++++
 src/XmlRpcThreadedServer.cpp     |   27 ++
 src/XmlRpcThreadedServer.h       |   67 +++++
 src/XmlRpcUtil.cpp               |  175 ++++++++----
 src/XmlRpcUtil.h                 |   32 ++-
 src/XmlRpcValue.cpp              |  321 ++++++++++++---------
 src/XmlRpcValue.h                |  120 +++++++--
 src/base64.h                     |    4 +-
 test/.cvsignore                  |    3 +
 test/FileClient.cpp              |  110 ++++++--
 test/FileClient.vcproj           |  601 ++++++++++++++++++++++++++++----------
 test/HelloClient.cpp             |    2 +-
 test/HelloClient.vcproj          |  597 ++++++++++++++++++++++++++++----------
 test/HelloServer.vcproj          |  597 ++++++++++++++++++++++++++++----------
 test/Makefile                    |    4 +-
 test/TestBase64Client.cpp        |   24 +-
 test/TestBase64Client.vcproj     |  597 ++++++++++++++++++++++++++++----------
 test/TestBase64Server.cpp        |   41 ++-
 test/TestBase64Server.vcproj     |  597 ++++++++++++++++++++++++++++----------
 test/TestEGroupwareSSLClient.cpp |   65 ++++
 test/TestValues.vcproj           |  591 +++++++++++++++++++++++++++----------
 test/TestValuesWin32.cpp         |   21 ++-
 test/TestXml.cpp                 |   11 +
 test/TestXml.vcproj              |  597 ++++++++++++++++++++++++++++----------
 test/Validator.cpp               |    3 +-
 test/Validator.vcproj            |  598 ++++++++++++++++++++++++++++----------
 test/response.xml                |   17 +
 60 files changed, 6254 insertions(+), 2331 deletions(-)
 create mode 100644 debian/.cvsignore
 create mode 100644 debian/changelog
 create mode 100644 debian/control
 create mode 100644 debian/copyright
 create mode 100644 debian/dirs
 create mode 100644 debian/files
 create mode 100644 debian/libxmlrpc++-dev.files
 create mode 100644 debian/libxmlrpc++1.files
 create mode 100644 debian/libxmlrpc++1.substvars
 create mode 100755 debian/rules
 create mode 100644 src/XmlRpcMutex.cpp
 create mode 100644 src/XmlRpcMutex.h
 create mode 100644 src/XmlRpcThread.cpp
 create mode 100644 src/XmlRpcThread.h
 create mode 100644 src/XmlRpcThreadedServer.cpp
 create mode 100644 src/XmlRpcThreadedServer.h
 create mode 100644 test/TestEGroupwareSSLClient.cpp
 create mode 100755 test/response.xml

diff --git a/.cvsignore b/.cvsignore
index 994ca7a..fe0e609 100644
--- a/.cvsignore
+++ b/.cvsignore
@@ -1 +1 @@
-DebugReleasedoc*.ncb*.opt*.plg*.suo
\ No newline at end of file
+DebugReleasedocx64*.ncb*.opt*.plg*.suo*.vcproj.*
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 1dcd466..9141f81 100644
--- a/Makefile
+++ b/Makefile
@@ -1,13 +1,23 @@
 # makefile written for gnu make
 CXX		= g++
 SRC		= ./src
+SHARED		= -shared
 CPPFLAGS	= -I$(SRC)
 DEBUG		= -g
 OPTIMIZE	= -O2
 GCCWARN		= -Wall -Wstrict-prototypes
 CXXFLAGS	= $(DEBUG) $(GCCWARN) $(OPTIMIZE) $(INCLUDES)
+VERSION		= 0.8
+
+DESTDIR		=
+prefix		= /usr
+MKDIR		= mkdir -p
+CP		= cp
+LN		= ln -s
 
 LIB		= ./libXmlRpc.a
+LIBALT		= ./libxmlrpc++.a
+SO		= ./libxmlrpc++.so.$(VERSION)
 
 # Add your system-dependent network libs here. These are
 # only used to build the tests (your application will need them too).
@@ -22,10 +32,14 @@ OBJ		= $(SRC)/XmlRpcClient.o $(SRC)/XmlRpcDispatch.o \
 		$(SRC)/XmlRpcServerMethod.o $(SRC)/XmlRpcSocket.o $(SRC)/XmlRpcSource.o \
 		$(SRC)/XmlRpcUtil.o $(SRC)/XmlRpcValue.o
 
-all:		$(LIB) tests
+all:		$(LIB) $(SO) tests
 
 $(LIB):		$(OBJ)
 		$(AR) $(ARFLAGS) $(LIB) $(OBJ)
+		cp $(LIB) $(LIBALT)
+
+$(SO):		$(OBJ)
+		$(CXX) -o $(SO) $(SHARED) $(OBJ)
 
 
 tests:		$(LIB)
@@ -34,9 +48,24 @@ tests:		$(LIB)
 doc doxygen:
 		cd src && doxygen Doxyfile
 
+distclean: clean
+
 clean:
 		rm -f $(SRC)/*.o
 		rm -f $(SRC)/*~
-		rm -f $(LIB)
+		rm -f $(LIB) $(LIBALT) $(SO)
+		rm -f build
 		cd test && $(MAKE) clean
 
+install:
+		$(MKDIR) $(DESTDIR)$(prefix)/lib
+		$(CP) $(SO) $(LIB) $(DESTDIR)$(prefix)/lib
+		$(MKDIR) $(DESTDIR)$(prefix)/include
+		$(CP) src/*.h $(DESTDIR)$(prefix)/include
+		( cd $(DESTDIR)$(prefix)/lib; rm -f libxmlrpc++.so; $(LN) $(SO) libxmlrpc++.so )
+		# Does not install tests right now	
+
+# Debian package make target, in case you want to manually build a package
+# from the distribution.
+deb:
+		dpkg-buildpackage -rfakeroot
diff --git a/XmlRpc.sln b/XmlRpc.sln
index 674cd07..22b3238 100644
--- a/XmlRpc.sln
+++ b/XmlRpc.sln
@@ -1,73 +1,130 @@
-Microsoft Visual Studio Solution File, Format Version 7.00
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "XmlRpc", "XmlRpc.vcproj", "{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestXml", "Test\TestXml.vcproj", "{6F0C2ADA-0341-4183-8FAA-576668F1788A}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestValues", "Test\TestValues.vcproj", "{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "HelloClient", "Test\HelloClient.vcproj", "{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "Validator", "Test\Validator.vcproj", "{E68AB694-4805-43EA-A96E-21B8FE285DE4}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "HelloServer", "Test\HelloServer.vcproj", "{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "FileClient", "test\FileClient.vcproj", "{C3B49855-CD45-448E-991E-3E4C9B02F465}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestBase64Client", "test\TestBase64Client.vcproj", "{1E8B725B-E898-494C-84C6-DB77EF38E6CB}"
-EndProject
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestBase64Server", "test\TestBase64Server.vcproj", "{D3107CC6-6300-47DE-B183-255B75CFE85A}"
-EndProject
-Global
-	GlobalSection(SolutionConfiguration) = preSolution
-		ConfigName.0 = Debug
-		ConfigName.1 = Release
-	EndGlobalSection
-	GlobalSection(ProjectDependencies) = postSolution
-		{6F0C2ADA-0341-4183-8FAA-576668F1788A}.0 = {C9C8B7B0-2509-4B8A-9224-9FF04297C33B}
-		{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}.0 = {C9C8B7B0-2509-4B8A-9224-9FF04297C33B}
-		{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}.0 = {C9C8B7B0-2509-4B8A-9224-9FF04297C33B}
-		{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}.0 = {C9C8B7B0-2509-4B8A-9224-9FF04297C33B}
-	EndGlobalSection
-	GlobalSection(ProjectConfiguration) = postSolution
-		{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}.Debug.ActiveCfg = Debug|Win32
-		{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}.Debug.Build.0 = Debug|Win32
-		{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}.Release.ActiveCfg = Release|Win32
-		{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}.Release.Build.0 = Release|Win32
-		{6F0C2ADA-0341-4183-8FAA-576668F1788A}.Debug.ActiveCfg = Debug|Win32
-		{6F0C2ADA-0341-4183-8FAA-576668F1788A}.Debug.Build.0 = Debug|Win32
-		{6F0C2ADA-0341-4183-8FAA-576668F1788A}.Release.ActiveCfg = Release|Win32
-		{6F0C2ADA-0341-4183-8FAA-576668F1788A}.Release.Build.0 = Release|Win32
-		{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}.Debug.ActiveCfg = Debug|Win32
-		{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}.Debug.Build.0 = Debug|Win32
-		{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}.Release.ActiveCfg = Release|Win32
-		{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}.Release.Build.0 = Release|Win32
-		{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}.Debug.ActiveCfg = Debug|Win32
-		{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}.Debug.Build.0 = Debug|Win32
-		{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}.Release.ActiveCfg = Release|Win32
-		{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}.Release.Build.0 = Release|Win32
-		{E68AB694-4805-43EA-A96E-21B8FE285DE4}.Debug.ActiveCfg = Debug|Win32
-		{E68AB694-4805-43EA-A96E-21B8FE285DE4}.Debug.Build.0 = Debug|Win32
-		{E68AB694-4805-43EA-A96E-21B8FE285DE4}.Release.ActiveCfg = Release|Win32
-		{E68AB694-4805-43EA-A96E-21B8FE285DE4}.Release.Build.0 = Release|Win32
-		{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}.Debug.ActiveCfg = Debug|Win32
-		{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}.Debug.Build.0 = Debug|Win32
-		{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}.Release.ActiveCfg = Release|Win32
-		{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}.Release.Build.0 = Release|Win32
-		{C3B49855-CD45-448E-991E-3E4C9B02F465}.Debug.ActiveCfg = Debug|Win32
-		{C3B49855-CD45-448E-991E-3E4C9B02F465}.Debug.Build.0 = Debug|Win32
-		{C3B49855-CD45-448E-991E-3E4C9B02F465}.Release.ActiveCfg = Release|Win32
-		{C3B49855-CD45-448E-991E-3E4C9B02F465}.Release.Build.0 = Release|Win32
-		{1E8B725B-E898-494C-84C6-DB77EF38E6CB}.Debug.ActiveCfg = Debug|Win32
-		{1E8B725B-E898-494C-84C6-DB77EF38E6CB}.Debug.Build.0 = Debug|Win32
-		{1E8B725B-E898-494C-84C6-DB77EF38E6CB}.Release.ActiveCfg = Release|Win32
-		{1E8B725B-E898-494C-84C6-DB77EF38E6CB}.Release.Build.0 = Release|Win32
-		{D3107CC6-6300-47DE-B183-255B75CFE85A}.Debug.ActiveCfg = Debug|Win32
-		{D3107CC6-6300-47DE-B183-255B75CFE85A}.Debug.Build.0 = Debug|Win32
-		{D3107CC6-6300-47DE-B183-255B75CFE85A}.Release.ActiveCfg = Release|Win32
-		{D3107CC6-6300-47DE-B183-255B75CFE85A}.Release.Build.0 = Release|Win32
-	EndGlobalSection
-	GlobalSection(ExtensibilityGlobals) = postSolution
-	EndGlobalSection
-	GlobalSection(ExtensibilityAddIns) = postSolution
-	EndGlobalSection
-EndGlobal
+﻿
+Microsoft Visual Studio Solution File, Format Version 9.00
+# Visual Studio 2005
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "FileClient", "Test\FileClient.vcproj", "{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "HelloClient", "Test\HelloClient.vcproj", "{4C54D408-AA45-4674-B207-06B0847C7C6B}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "HelloServer", "Test\HelloServer.vcproj", "{A85172E1-A2FA-4A45-8242-15CD57FFAC39}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestBase64Client", "Test\TestBase64Client.vcproj", "{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestBase64Server", "Test\TestBase64Server.vcproj", "{6D30BA7A-634B-4A2E-8076-015B1EE325A3}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestValues", "Test\TestValues.vcproj", "{BD4A7058-C9E4-4965-93C5-DED4E4737631}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TestXml", "Test\TestXml.vcproj", "{08AE820C-2405-438A-B401-553F08D0C393}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "Validator", "Test\Validator.vcproj", "{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}"
+	ProjectSection(ProjectDependencies) = postProject
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA} = {7DD6E448-C258-46CC-A806-7DC09AF474EA}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xmlrpc", "xmlrpc.vcproj", "{7DD6E448-C258-46CC-A806-7DC09AF474EA}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Win32 = Debug|Win32
+		Debug|x64 = Debug|x64
+		Release|Win32 = Release|Win32
+		Release|x64 = Release|x64
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Debug|Win32.ActiveCfg = Debug|Win32
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Debug|Win32.Build.0 = Debug|Win32
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Debug|x64.ActiveCfg = Debug|x64
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Debug|x64.Build.0 = Debug|x64
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Release|Win32.ActiveCfg = Release|Win32
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Release|Win32.Build.0 = Release|Win32
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Release|x64.ActiveCfg = Release|x64
+		{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}.Release|x64.Build.0 = Release|x64
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Debug|Win32.ActiveCfg = Debug|Win32
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Debug|Win32.Build.0 = Debug|Win32
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Debug|x64.ActiveCfg = Debug|x64
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Debug|x64.Build.0 = Debug|x64
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Release|Win32.ActiveCfg = Release|Win32
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Release|Win32.Build.0 = Release|Win32
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Release|x64.ActiveCfg = Release|x64
+		{4C54D408-AA45-4674-B207-06B0847C7C6B}.Release|x64.Build.0 = Release|x64
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Debug|Win32.ActiveCfg = Debug|Win32
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Debug|Win32.Build.0 = Debug|Win32
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Debug|x64.ActiveCfg = Debug|x64
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Debug|x64.Build.0 = Debug|x64
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Release|Win32.ActiveCfg = Release|Win32
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Release|Win32.Build.0 = Release|Win32
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Release|x64.ActiveCfg = Release|x64
+		{A85172E1-A2FA-4A45-8242-15CD57FFAC39}.Release|x64.Build.0 = Release|x64
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Debug|Win32.ActiveCfg = Debug|Win32
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Debug|Win32.Build.0 = Debug|Win32
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Debug|x64.ActiveCfg = Debug|x64
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Debug|x64.Build.0 = Debug|x64
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Release|Win32.ActiveCfg = Release|Win32
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Release|Win32.Build.0 = Release|Win32
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Release|x64.ActiveCfg = Release|x64
+		{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}.Release|x64.Build.0 = Release|x64
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Debug|Win32.ActiveCfg = Debug|Win32
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Debug|Win32.Build.0 = Debug|Win32
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Debug|x64.ActiveCfg = Debug|x64
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Debug|x64.Build.0 = Debug|x64
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Release|Win32.ActiveCfg = Release|Win32
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Release|Win32.Build.0 = Release|Win32
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Release|x64.ActiveCfg = Release|x64
+		{6D30BA7A-634B-4A2E-8076-015B1EE325A3}.Release|x64.Build.0 = Release|x64
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Debug|Win32.ActiveCfg = Debug|Win32
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Debug|Win32.Build.0 = Debug|Win32
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Debug|x64.ActiveCfg = Debug|x64
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Debug|x64.Build.0 = Debug|x64
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Release|Win32.ActiveCfg = Release|Win32
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Release|Win32.Build.0 = Release|Win32
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Release|x64.ActiveCfg = Release|x64
+		{BD4A7058-C9E4-4965-93C5-DED4E4737631}.Release|x64.Build.0 = Release|x64
+		{08AE820C-2405-438A-B401-553F08D0C393}.Debug|Win32.ActiveCfg = Debug|Win32
+		{08AE820C-2405-438A-B401-553F08D0C393}.Debug|Win32.Build.0 = Debug|Win32
+		{08AE820C-2405-438A-B401-553F08D0C393}.Debug|x64.ActiveCfg = Debug|x64
+		{08AE820C-2405-438A-B401-553F08D0C393}.Debug|x64.Build.0 = Debug|x64
+		{08AE820C-2405-438A-B401-553F08D0C393}.Release|Win32.ActiveCfg = Release|Win32
+		{08AE820C-2405-438A-B401-553F08D0C393}.Release|Win32.Build.0 = Release|Win32
+		{08AE820C-2405-438A-B401-553F08D0C393}.Release|x64.ActiveCfg = Release|x64
+		{08AE820C-2405-438A-B401-553F08D0C393}.Release|x64.Build.0 = Release|x64
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Debug|Win32.ActiveCfg = Debug|Win32
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Debug|Win32.Build.0 = Debug|Win32
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Debug|x64.ActiveCfg = Debug|x64
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Debug|x64.Build.0 = Debug|x64
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Release|Win32.ActiveCfg = Release|Win32
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Release|Win32.Build.0 = Release|Win32
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Release|x64.ActiveCfg = Release|x64
+		{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}.Release|x64.Build.0 = Release|x64
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Debug|Win32.ActiveCfg = Debug|Win32
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Debug|Win32.Build.0 = Debug|Win32
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Debug|x64.ActiveCfg = Debug|x64
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Debug|x64.Build.0 = Debug|x64
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Release|Win32.ActiveCfg = Release|Win32
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Release|Win32.Build.0 = Release|Win32
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Release|x64.ActiveCfg = Release|x64
+		{7DD6E448-C258-46CC-A806-7DC09AF474EA}.Release|x64.Build.0 = Release|x64
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff --git a/XmlRpc.vcproj b/XmlRpc.vcproj
index 82eecb7..380819b 100644
--- a/XmlRpc.vcproj
+++ b/XmlRpc.vcproj
@@ -1,176 +1,422 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="XmlRpc"
-	ProjectGUID="{C9C8B7B0-2509-4B8A-9224-9FF04297C33B}"
-	Keyword="Win32Proj">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory="Debug"
-			IntermediateDirectory="Debug"
-			ConfigurationType="4"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				PreprocessorDefinitions="WIN32;_DEBUG;_WINDOWS;_USRDLL;TCXMLRPC_EXPORTS"
-				MinimalRebuild="FALSE"
-				ExceptionHandling="TRUE"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				BufferSecurityCheck="FALSE"
-				DisableLanguageExtensions="FALSE"
-				ForceConformanceInForLoopScope="TRUE"
-				UsePrecompiledHeader="0"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="FALSE"
-				DebugInformationFormat="3">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="0"
-					ExceptionHandling="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					BufferSecurityCheck="0"
-					DisableLanguageExtensions="0"
-					AllOptions="/c  /Zi /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_WINDOWS&quot; /D &quot;_USRDLL&quot; /D &quot;TCXMLRPC_EXPORTS&quot; /D &quot;_MBCS&quot; /FD /EHsc /RTC1 /MDd /Fo&quot;Debug/&quot; /Fd&quot;Debug/vc70.pdb&quot; /Gd /TP"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLibrarianTool"
-				OutputFile="$(OutDir)/XmlRpc.lib">
-				<IntelOptions
-					AllOptions="/OUT:&quot;Debug/XmlRpc.lib&quot; /NOLOGO"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory="Release"
-			IntermediateDirectory="Release"
-			ConfigurationType="4"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="2"
-				InlineFunctionExpansion="1"
-				OmitFramePointers="TRUE"
-				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;TCXMLRPC_EXPORTS"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				ForceConformanceInForLoopScope="TRUE"
-				UsePrecompiledHeader="0"
-				WarningLevel="3"
-				Detect64BitPortabilityProblems="TRUE"
-				DebugInformationFormat="3">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /Zi /nologo /W3 /Wp64 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_WINDOWS&quot; /D &quot;_USRDLL&quot; /D &quot;TCXMLRPC_EXPORTS&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fo&quot;Release/&quot; /Fd&quot;Release/vc70.pdb&quot; /Gd /TP"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLibrarianTool"
-				OutputFile="$(OutDir)/XmlRpc.lib">
-				<IntelOptions
-					AllOptions="/OUT:&quot;Release/XmlRpc.lib&quot; /NOLOGO"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;def;odl;idl;hpj;bat;asm">
-			<File
-				RelativePath="src\XmlRpcClient.cpp"/>
-			<File
-				RelativePath="src\XmlRpcDispatch.cpp"/>
-			<File
-				RelativePath="src\XmlRpcServer.cpp"/>
-			<File
-				RelativePath="src\XmlRpcServerConnection.cpp"/>
-			<File
-				RelativePath="src\XmlRpcServerMethod.cpp"/>
-			<File
-				RelativePath="src\XmlRpcSocket.cpp"/>
-			<File
-				RelativePath="src\XmlRpcSource.cpp"/>
-			<File
-				RelativePath="src\XmlRpcUtil.cpp"/>
-			<File
-				RelativePath="src\XmlRpcValue.cpp"/>
-		</Filter>
-		<Filter
-			Name="Header Files"
-			Filter="h;hpp;hxx;hm;inl;inc">
-			<File
-				RelativePath="src\XmlRpc.h"/>
-			<File
-				RelativePath="src\XmlRpcClient.h"/>
-			<File
-				RelativePath="src\XmlRpcDispatch.h"/>
-			<File
-				RelativePath="src\XmlRpcServer.h"/>
-			<File
-				RelativePath="src\XmlRpcServerConnection.h"/>
-			<File
-				RelativePath="src\XmlRpcServerMethod.h"/>
-			<File
-				RelativePath="src\XmlRpcSocket.h"/>
-			<File
-				RelativePath="src\XmlRpcSource.h"/>
-			<File
-				RelativePath="src\XmlRpcUtil.h"/>
-			<File
-				RelativePath="src\XmlRpcValue.h"/>
-			<File
-				RelativePath="src\base64.h"/>
-		</Filter>
-		<File
-			RelativePath="COPYING"/>
-		<File
-			RelativePath="README.html"/>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="xmlrpc"
+	ProjectGUID="{7DD6E448-C258-46CC-A806-7DC09AF474EA}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug"
+			ConfigurationType="4"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_WINDOWS;_LIB;_CRT_SECURE_NO_DEPRECATE"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile=".\Debug/xmlrpc.pch"
+				AssemblerListingLocation=".\Debug/"
+				ObjectFile=".\Debug/"
+				ProgramDataBaseFileName=".\Debug/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile=".\Debug\xmlrpc.lib"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\Debug/xmlrpc.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="4"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_WINDOWS;_LIB;_CRT_SECURE_NO_DEPRECATE"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile=".\Debug/xmlrpc.pch"
+				AssemblerListingLocation=".\Debug/"
+				ObjectFile=".\Debug/"
+				ProgramDataBaseFileName=".\Debug/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile=".\Debug\xmlrpc.lib"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\Debug/xmlrpc.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release"
+			ConfigurationType="4"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_LIB;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile=".\Release/xmlrpc.pch"
+				AssemblerListingLocation=".\Release/"
+				ObjectFile=".\Release/"
+				ProgramDataBaseFileName=".\Release/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="1"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile=".\Release\xmlrpc.lib"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\Release/xmlrpc.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="4"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_LIB;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile=".\Release/xmlrpc.pch"
+				AssemblerListingLocation=".\Release/"
+				ObjectFile=".\Release/"
+				ProgramDataBaseFileName=".\Release/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="1"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile=".\Release\xmlrpc.lib"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\Release/xmlrpc.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="src\XmlRpcClient.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcDispatch.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServerConnection.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServerMethod.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcSource.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcUtil.cpp"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcValue.cpp"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl"
+			>
+			<File
+				RelativePath="src\base64.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpc.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcClient.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcDispatch.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\XmlRpcException.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServer.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServerConnection.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcServerMethod.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcSource.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcUtil.h"
+				>
+			</File>
+			<File
+				RelativePath="src\XmlRpcValue.h"
+				>
+			</File>
+		</Filter>
+		<File
+			RelativePath="README.html"
+			>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/debian/.cvsignore b/debian/.cvsignore
new file mode 100644
index 0000000..ba4466d
--- /dev/null
+++ b/debian/.cvsignore
@@ -0,0 +1,2 @@
+libxmlrpc++1
+tmp
diff --git a/debian/changelog b/debian/changelog
new file mode 100644
index 0000000..f2f9b59
--- /dev/null
+++ b/debian/changelog
@@ -0,0 +1,5 @@
+xmlrpc++ (0.8) unstable; urgency=low
+
+  * Initial release.
+
+ -- jeff <jeff@freemedsoftware.com>  Tue, 13 Apr 2004 11:36:50 -0400
diff --git a/debian/control b/debian/control
new file mode 100644
index 0000000..406abcc
--- /dev/null
+++ b/debian/control
@@ -0,0 +1,30 @@
+Source: xmlrpc++
+Section: devel
+Priority: optional
+Maintainer: jeff <jeff@freemedsoftware.com>
+Standards-Version: 3.5.8
+Build-Depends: debmake make gcc libssl-dev
+
+Package: libxmlrpc++1-dev
+Architecture: any
+Depends: libxmlrpc++1, libc6-dev, libssl-dev
+Provides: libxmlrpc++-dev
+Conflicts: libxmlrpc++-dev
+Description: C++ library for XML-RPC development files
+  XmlRpc++ is a C++ implementation of the XML-RPC protocol. It is based upon
+  Shilad Sen's excellent py-xmlrpc. The XmlRpc protocol was designed to make
+  remote procedure calls easy: it encodes data in a simple XML format and
+  uses HTTP for communication. XmlRpc++ is designed to make it easy to
+  incorporate XML-RPC client and server support into C++ applications.
+  This package is needed to develop applications with this library.
+
+Package: libxmlrpc++1
+Architecture: any
+Depends: ${shlibs:Depends}
+Description: C++ library for XML-RPC
+  XmlRpc++ is a C++ implementation of the XML-RPC protocol. It is based upon
+  Shilad Sen's excellent py-xmlrpc. The XmlRpc protocol was designed to make
+  remote procedure calls easy: it encodes data in a simple XML format and
+  uses HTTP for communication. XmlRpc++ is designed to make it easy to
+  incorporate XML-RPC client and server support into C++ applications.
+
diff --git a/debian/copyright b/debian/copyright
new file mode 100644
index 0000000..4b0b34a
--- /dev/null
+++ b/debian/copyright
@@ -0,0 +1,5 @@
+This packaging was written by jeff (jeff@freemedsoftware.com)
+  on Tue, 13 Apr 2004 11:36:50 -0400.
+
+Copyright: GPL (see /usr/share/common-licenses/GPL)
+
diff --git a/debian/dirs b/debian/dirs
new file mode 100644
index 0000000..6554f70
--- /dev/null
+++ b/debian/dirs
@@ -0,0 +1,3 @@
+usr/lib
+usr/include
+usr/share/man/man3
diff --git a/debian/files b/debian/files
new file mode 100644
index 0000000..671a165
--- /dev/null
+++ b/debian/files
@@ -0,0 +1,2 @@
+libxmlrpc++1_0.8_i386.deb devel optional
+libxmlrpc++1-dev_0.8_i386.deb devel optional
diff --git a/debian/libxmlrpc++-dev.files b/debian/libxmlrpc++-dev.files
new file mode 100644
index 0000000..b86931f
--- /dev/null
+++ b/debian/libxmlrpc++-dev.files
@@ -0,0 +1,2 @@
+usr/lib/*.a
+usr/include/*.h
diff --git a/debian/libxmlrpc++1.files b/debian/libxmlrpc++1.files
new file mode 100644
index 0000000..d34bd90
--- /dev/null
+++ b/debian/libxmlrpc++1.files
@@ -0,0 +1 @@
+usr/lib/*.so*
diff --git a/debian/libxmlrpc++1.substvars b/debian/libxmlrpc++1.substvars
new file mode 100644
index 0000000..2c37e13
--- /dev/null
+++ b/debian/libxmlrpc++1.substvars
@@ -0,0 +1 @@
+shlibs:Depends=libc6 (>= 2.3.2.ds1-4), libgcc1 (>= 1:3.3.3-1), libstdc++5 (>= 1:3.3.3-1)
diff --git a/debian/rules b/debian/rules
new file mode 100755
index 0000000..9741e36
--- /dev/null
+++ b/debian/rules
@@ -0,0 +1,86 @@
+#!/usr/bin/make -f
+# Made with the aid of debmake, by Christoph Lameter,
+# based on the sample debian/rules file for GNU hello by Ian Jackson.
+
+package=libxmlrpc++
+
+version=$(shell expr `pwd` : '.*-\([0-9.]*\)')
+version_major=$(shell expr `pwd` : '.*-\([0-9]*\).[0-9.]*')
+
+build:
+	$(checkdir)
+	
+	#--- All this would be nice, but I really don't want to debug it:
+	#-mkdir shared static
+	#
+	# First build the shared library
+	#
+	#cd shared ; \
+	#    ln -s ../src . ; \
+	#    $(MAKE) -f ../Makefile VPATH=".." srcdir=".." \
+	#        CFLAGS="-O2 -fPIC -pipe" ; \
+	#    gcc -shared -Wl,-soname,$(package).so.$(version_major) -o $(package).so.$(version) `ls *.o`
+	#
+	# Build the static library (it does not need Position Independent Code,
+	# which reserves one register; thus, without -fPIC we get more efficient
+	# code).
+	#
+	#cd static ; \
+	#    ln -s ../src . ; \
+	#     $(MAKE) -f ../Makefile VPATH=".." srcdir=".." \
+	#          CFLAGS="-O2 -pipe" LDFLAGS="-s" libXmlRpc.a; \
+        #     mv libXmlRpc.a libxmlrpc++.a
+
+	# So we go with this instead:
+	make CFLAGS="-O2" all
+	touch build
+
+clean:
+	$(checkdir)
+#	rm -rf static shared
+	rm -f build
+	-$(MAKE) clean
+	rm -f `find . -name "*~"`
+	rm -rf debian/tmp `find debian/* -type d ! -name CVS` debian/files* core
+	rm -f debian/*substvars
+
+binary-indep: checkroot build
+	$(checkdir)
+# There are no architecture-independent files to be uploaded
+# generated by this package.  If there were any they would be
+# made here.
+
+binary-arch: checkroot build
+	$(checkdir)
+	rm -rf debian/tmp `find debian/* -type d ! -name CVS`
+	install -d debian/tmp
+	cd debian/tmp && install -d `cat ../dirs`
+	install -m644 $(package).a debian/tmp/usr/lib/
+	install -m644 src/*.h debian/tmp/usr/include/
+
+	install -m644 $(package).so.$(version) debian/tmp/usr/lib
+
+	# Should do this in the makefile, but we'll do it here - Jeff
+	#$(MAKE) install DESTDIR=`pwd`/debian/tmp
+	#mkdir -p debian/tmp/usr/{include,lib}
+	#install -m755 *.so* *.a debian/tmp/usr/lib	
+	#install -m644 src/*.h *.a debian/tmp/usr/include
+
+	debstd -m README.html 
+	dpkg-gencontrol -isp -plibxmlrpc++1
+	dpkg-gencontrol -isp -plibxmlrpc++1-dev
+	chown -R root:root debian/tmp
+	chmod -R go=rX debian/tmp
+	dpkg --build debian/tmp ..
+
+define checkdir
+	test -f debian/rules
+endef
+
+binary: binary-indep binary-arch
+
+checkroot:
+	$(checkdir)
+	test root = "`whoami`"
+
+.PHONY: binary binary-arch binary-indep clean checkroot
diff --git a/src/XmlRpc.h b/src/XmlRpc.h
index 9611af7..8ffcba7 100644
--- a/src/XmlRpc.h
+++ b/src/XmlRpc.h
@@ -1,7 +1,7 @@
 #ifndef _XMLRPC_H_
 #define _XMLRPC_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 // This library is free software; you can redistribute it and/or
 // modify it under the terms of the GNU Lesser General Public
 // License as published by the Free Software Foundation; either
@@ -15,15 +15,16 @@
 // You should have received a copy of the GNU Lesser General Public
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
+//
+// The XmlRpc++ home page is http://xmlrpcpp.sourceforge.net/
 // 
 
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+
+#include <string>
 
 #include "XmlRpcClient.h"
 #include "XmlRpcException.h"
diff --git a/src/XmlRpcClient.cpp b/src/XmlRpcClient.cpp
index e706d0a..442ac5f 100644
--- a/src/XmlRpcClient.cpp
+++ b/src/XmlRpcClient.cpp
@@ -1,27 +1,32 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcClient.h"
 
 #include "XmlRpcSocket.h"
 #include "XmlRpc.h"
 
+#include "base64.h"   // For HTTP authentication encoding
+
 #include <stdio.h>
 #include <stdlib.h>
-
+#include <string>
 
 using namespace XmlRpc;
+using namespace std;
 
 // Static data
-const char XmlRpcClient::REQUEST_BEGIN[] = 
+const char REQUEST_BEGIN[] = 
   "<?xml version=\"1.0\"?>\r\n"
   "<methodCall><methodName>";
-const char XmlRpcClient::REQUEST_END_METHODNAME[] = "</methodName>\r\n";
-const char XmlRpcClient::PARAMS_TAG[] = "<params>";
-const char XmlRpcClient::PARAMS_ETAG[] = "</params>";
-const char XmlRpcClient::PARAM_TAG[] = "<param>";
-const char XmlRpcClient::PARAM_ETAG[] =  "</param>";
-const char XmlRpcClient::REQUEST_END[] = "</methodCall>\r\n";
-const char XmlRpcClient::METHODRESPONSE_TAG[] = "<methodResponse>";
-const char XmlRpcClient::FAULT_TAG[] = "<fault>";
+const char REQUEST_END_METHODNAME[] = "</methodName>\r\n";
+const char PARAMS_TAG[] = "<params>";
+const char PARAMS_ETAG[] = "</params>";
+const char PARAM_TAG[] = "<param>";
+const char PARAM_ETAG[] =  "</param>";
+const char REQUEST_END[] = "</methodCall>\r\n";
+
 
 
 
@@ -31,7 +36,7 @@ XmlRpcClient::XmlRpcClient(const char* host, int port, const char* uri/*=0*/)
 
   _host = host;
   _port = port;
-  if (uri)
+  if (uri && *uri)
     _uri = uri;
   else
     _uri = "/RPC2";
@@ -44,10 +49,36 @@ XmlRpcClient::XmlRpcClient(const char* host, int port, const char* uri/*=0*/)
 }
 
 
+XmlRpcClient::XmlRpcClient(const char* host, int port, 
+                           const char* login, const char* password, const char* uri/*=0*/)
+{
+  XmlRpcUtil::log(1, "XmlRpcClient new client: host %s, port %d, login %s.", host, port, login);
+
+  _host = host;
+  _port = port;
+
+  _login = login ? login : "";
+  _password = password ? password : "";
+
+  _uri = uri ? uri : "/RPC2";
+
+  _connectionState = NO_CONNECTION;
+  _executing = false;
+  _eof = false;
+
+  // Default to keeping the connection open until an explicit close is done
+  setKeepOpen();
+}
+
+
+
 XmlRpcClient::~XmlRpcClient()
 {
+  XmlRpcUtil::log(1, "XmlRpcClient dtor client: host %s, port %d.", _host.c_str(), _port);
+  if (_connectionState != NO_CONNECTION) close();
 }
 
+
 // Close the owned fd
 void 
 XmlRpcClient::close()
@@ -56,6 +87,7 @@ XmlRpcClient::close()
   _connectionState = NO_CONNECTION;
   _disp.exit();
   _disp.removeSource(this);
+
   XmlRpcSource::close();
 }
 
@@ -72,7 +104,7 @@ struct ClearFlagOnExit {
 // Returns true if the request was sent and a result received (although the result
 // might be a fault).
 bool 
-XmlRpcClient::execute(const char* method, XmlRpcValue const& params, XmlRpcValue& result)
+XmlRpcClient::execute(const char* method, XmlRpcValue const& params, XmlRpcValue& result, double timeoutSeconds)
 {
   XmlRpcUtil::log(1, "XmlRpcClient::execute: method %s (_connectionState %d).", method, _connectionState);
 
@@ -95,14 +127,15 @@ XmlRpcClient::execute(const char* method, XmlRpcValue const& params, XmlRpcValue
     return false;
 
   result.clear();
-  double msTime = -1.0;   // Process until exit is called
-  _disp.work(msTime);
+
+  // Process until either a response is received or the timeout period passes
+  _disp.work(timeoutSeconds);
 
   if (_connectionState != IDLE || ! parseResponse(result))
     return false;
 
   XmlRpcUtil::log(1, "XmlRpcClient::execute: method %s completed.", method);
-  _response = "";
+  _response.clear();
   return true;
 }
 
@@ -113,6 +146,10 @@ XmlRpcClient::handleEvent(unsigned eventType)
 {
   if (eventType == XmlRpcDispatch::Exception)
   {
+    //if (XmlRpcSocket::nonFatalError())
+    //  return (_connectionState == WRITE_REQUEST) 
+    //        ? XmlRpcDispatch::WritableEvent : XmlRpcDispatch::ReadableEvent;
+
     if (_connectionState == WRITE_REQUEST && _bytesWritten == 0)
       XmlRpcUtil::error("Error in XmlRpcClient::handleEvent: could not connect to server (%s).", 
                        XmlRpcSocket::getErrorMsg().c_str());
@@ -166,8 +203,8 @@ XmlRpcClient::setupConnection()
 bool 
 XmlRpcClient::doConnect()
 {
-  int fd = XmlRpcSocket::socket();
-  if (fd < 0)
+  XmlRpcSocket::Socket fd = XmlRpcSocket::socket();
+  if (fd == XmlRpcSocket::Invalid)
   {
     XmlRpcUtil::error("Error in XmlRpcClient::doConnect: Could not create socket (%s).", XmlRpcSocket::getErrorMsg().c_str());
     return false;
@@ -191,7 +228,7 @@ XmlRpcClient::doConnect()
     return false;
   }
 
-  return true;
+  return XmlRpcSource::doConnect();
 }
 
 // Encode the request to call the specified method with the specified parameters into xml
@@ -247,6 +284,35 @@ XmlRpcClient::generateHeader(std::string const& body)
   sprintf(buff,":%d\r\n", _port);
 
   header += buff;
+
+  if (_login.length() != 0)
+  {
+    // convert to base64
+    std::vector<char> base64data;
+    int iostatus = 0;
+    base64<char> encoder;
+    std::back_insert_iterator<std::vector<char> > ins =
+      std::back_inserter(base64data);
+
+    std::string authBuf = _login + ":" + _password;
+
+    encoder.put(authBuf.begin(), authBuf.end(), ins, iostatus,
+                base64<>::crlf());
+
+    header += "Authorization: Basic ";
+    std::string authEnc(base64data.begin(), base64data.end());
+    // handle pesky linefeed characters
+    string::size_type lf;
+    while ( (lf = authEnc.find("\r")) != string::npos ) {
+      authEnc.erase(lf, 1);
+    }
+    while ( (lf = authEnc.find("\n")) != string::npos ) {
+      authEnc.erase(lf, 1);
+    }
+    header += authEnc;
+    header += "\r\n";
+  }
+
   header += "Content-Type: text/xml\r\nContent-length: ";
 
   sprintf(buff,"%d\r\n\r\n", body.size());
@@ -261,7 +327,8 @@ XmlRpcClient::writeRequest()
     XmlRpcUtil::log(5, "XmlRpcClient::writeRequest (attempt %d):\n%s\n", _sendAttempts+1, _request.c_str());
 
   // Try to write the request
-  if ( ! XmlRpcSocket::nbWrite(this->getfd(), _request, &_bytesWritten)) {
+  if ( ! nbWrite(_request, &_bytesWritten))
+  {
     XmlRpcUtil::error("Error in XmlRpcClient::writeRequest: write error (%s).",XmlRpcSocket::getErrorMsg().c_str());
     return false;
   }
@@ -269,7 +336,8 @@ XmlRpcClient::writeRequest()
   XmlRpcUtil::log(3, "XmlRpcClient::writeRequest: wrote %d of %d bytes.", _bytesWritten, _request.length());
 
   // Wait for the result
-  if (_bytesWritten == int(_request.length())) {
+  if (_bytesWritten == int(_request.length()))
+  {
     _header = "";
     _response = "";
     _connectionState = READ_HEADER;
@@ -283,14 +351,15 @@ bool
 XmlRpcClient::readHeader()
 {
   // Read available data
-  if ( ! XmlRpcSocket::nbRead(this->getfd(), _header, &_eof) ||
-       (_eof && _header.length() == 0)) {
-
+  if ( ! nbRead(_header, &_eof) || (_eof && _header.length() == 0))
+  {
     // If we haven't read any data yet and this is a keep-alive connection, the server may
     // have timed out, so we try one more time.
-    if (getKeepOpen() && _header.length() == 0 && _sendAttempts++ == 0) {
+    if (getKeepOpen() && _header.length() == 0 && _sendAttempts++ == 0)
+    {
       XmlRpcUtil::log(4, "XmlRpcClient::readHeader: re-trying connection");
       XmlRpcSource::close();
+
       _connectionState = NO_CONNECTION;
       _eof = false;
       return setupConnection();
@@ -303,22 +372,44 @@ XmlRpcClient::readHeader()
 
   XmlRpcUtil::log(4, "XmlRpcClient::readHeader: client has read %d bytes", _header.length());
 
-  char *hp = (char*)_header.c_str();  // Start of header
-  char *ep = hp + _header.length();   // End of string
-  char *bp = 0;                       // Start of body
-  char *lp = 0;                       // Start of content-length value
+  return parseHeader();
+}
 
-  for (char *cp = hp; (bp == 0) && (cp < ep); ++cp) {
+bool 
+XmlRpcClient::parseHeader()
+{
+  char const *hp = _header.c_str();         // Start of header
+  char const *ep = hp + _header.length();   // End of string
+  char const *bp = 0;                       // Start of body
+  char const *lp = 0;                       // Start of content-length value
+
+  std::string const CONTINUE100("100 Continue");
+  int nc100 = int(CONTINUE100.length());
+  for (char const *cp = hp; (bp == 0) && (cp < ep); ++cp)
+  {
     if ((ep - cp > 16) && (strncasecmp(cp, "Content-length: ", 16) == 0))
+    {
       lp = cp + 16;
+    }
     else if ((ep - cp > 4) && (strncmp(cp, "\r\n\r\n", 4) == 0))
-      bp = cp + 4;
+    {
+      if (cp - hp > nc100 && strncmp(cp-CONTINUE100.length(), CONTINUE100.c_str(), CONTINUE100.length()) == 0)
+        cp += 3;
+      else
+        bp = cp + 4;
+    }
     else if ((ep - cp > 2) && (strncmp(cp, "\n\n", 2) == 0))
-      bp = cp + 2;
+    {
+      if (cp - hp > nc100 && strncmp(cp-CONTINUE100.length(), CONTINUE100.c_str(), CONTINUE100.length()) == 0)
+        ++ cp;
+      else
+        bp = cp + 2;
+    }
   }
 
   // If we haven't gotten the entire header yet, return (keep reading)
-  if (bp == 0) {
+  if (bp == 0)
+  {
     if (_eof)          // EOF in the middle of a response is an error
     {
       XmlRpcUtil::error("Error in XmlRpcClient::readHeader: EOF while reading header");
@@ -329,13 +420,15 @@ XmlRpcClient::readHeader()
   }
 
   // Decode content length
-  if (lp == 0) {
+  if (lp == 0)
+  {
     XmlRpcUtil::error("Error XmlRpcClient::readHeader: No Content-length specified");
     return false;   // We could try to figure it out by parsing as we read, but for now...
   }
 
   _contentLength = atoi(lp);
-  if (_contentLength <= 0) {
+  if (_contentLength <= 0)
+  {
     XmlRpcUtil::error("Error in XmlRpcClient::readHeader: Invalid Content-length specified (%d).", _contentLength);
     return false;
   }
@@ -354,15 +447,19 @@ bool
 XmlRpcClient::readResponse()
 {
   // If we dont have the entire response yet, read available data
-  if (int(_response.length()) < _contentLength) {
-    if ( ! XmlRpcSocket::nbRead(this->getfd(), _response, &_eof)) {
+  if (int(_response.length()) < _contentLength)
+  {
+    if ( ! nbRead(_response, &_eof))
+    {
       XmlRpcUtil::error("Error in XmlRpcClient::readResponse: read error (%s).",XmlRpcSocket::getErrorMsg().c_str());
       return false;
     }
 
     // If we haven't gotten the entire _response yet, return (keep reading)
-    if (int(_response.length()) < _contentLength) {
-      if (_eof) {
+    if (int(_response.length()) < _contentLength)
+    {
+      if (_eof)
+      {
         XmlRpcUtil::error("Error in XmlRpcClient::readResponse: EOF while reading response");
         return false;
       }
@@ -384,30 +481,48 @@ XmlRpcClient::readResponse()
 bool 
 XmlRpcClient::parseResponse(XmlRpcValue& result)
 {
+  std::string r;
+  _response.swap(r);
+
   // Parse response xml into result
+  bool emptyParam;
   int offset = 0;
-  if ( ! XmlRpcUtil::findTag(METHODRESPONSE_TAG,_response,&offset)) {
-    XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response - no methodResponse. Response:\n%s", _response.c_str());
+  if ( ! XmlRpcUtil::findTag("methodResponse",r,&offset,&emptyParam) || emptyParam)
+  {
+    XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response - no methodResponse. Response:\n%s", r.c_str());
     return false;
   }
 
   // Expect either <params><param>... or <fault>...
-  if ((XmlRpcUtil::nextTagIs(PARAMS_TAG,_response,&offset) &&
-       XmlRpcUtil::nextTagIs(PARAM_TAG,_response,&offset)) ||
-      XmlRpcUtil::nextTagIs(FAULT_TAG,_response,&offset) && (_isFault = true))
+  if (XmlRpcUtil::nextTagIs("params",r,&offset,&emptyParam) &&
+      XmlRpcUtil::nextTagIs("param",r,&offset,&emptyParam))
   {
-    if ( ! result.fromXml(_response, &offset)) {
-      XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response value. Response:\n%s", _response.c_str());
-      _response = "";
+    if (emptyParam)
+    {
+      result = 0; // No result?
+    }
+    else if (  ! result.fromXml(r, &offset))
+    {
+      XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response value. Response:\n%s", r.c_str());
       return false;
     }
-  } else {
-    XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response - no param or fault tag. Response:\n%s", _response.c_str());
-    _response = "";
+  }
+  else if (XmlRpcUtil::nextTagIs("fault",r,&offset,&emptyParam))
+  {
+    _isFault = true;
+
+    if (emptyParam || ! result.fromXml(r, &offset))
+    {
+      result = 0; // No result?
+      return false;
+    }
+  }
+  else
+  {
+    XmlRpcUtil::error("Error in XmlRpcClient::parseResponse: Invalid response - no param or fault tag. Response:\n%s", r.c_str());
     return false;
   }
       
-  _response = "";
   return result.valid();
 }
 
diff --git a/src/XmlRpcClient.h b/src/XmlRpcClient.h
index ecf5811..5954003 100644
--- a/src/XmlRpcClient.h
+++ b/src/XmlRpcClient.h
@@ -2,16 +2,14 @@
 #ifndef _XMLRPCCLIENT_H_
 #define _XMLRPCCLIENT_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+#include <string>
 
 #include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
@@ -24,24 +22,22 @@ namespace XmlRpc {
   //! A class to send XML RPC requests to a server and return the results.
   class XmlRpcClient : public XmlRpcSource {
   public:
-    // Static data
-    static const char REQUEST_BEGIN[];
-    static const char REQUEST_END_METHODNAME[];
-    static const char PARAMS_TAG[];
-    static const char PARAMS_ETAG[];
-    static const char PARAM_TAG[];
-    static const char PARAM_ETAG[];
-    static const char REQUEST_END[];
-    // Result tags
-    static const char METHODRESPONSE_TAG[];
-    static const char FAULT_TAG[];
 
     //! Construct a client to connect to the server at the specified host:port address
-    //!  @param host The name of the remote machine hosting the server
+    //!  @param host The name of the remote machine hosting the server, eg "myserver.mycompany.com"
     //!  @param port The port on the remote machine where the server is listening
     //!  @param uri  An optional string to be sent as the URI in the HTTP GET header
+    //! Note that the host is not a URL, do not prepend "http://" or other protocol specifiers.
     XmlRpcClient(const char* host, int port, const char* uri=0);
 
+    //! Construct a client to connect to the server at the specified host:port address including HTTP authentication
+    //!  @param host  The name of the remote machine hosting the server
+    //!  @param port  The port on the remote machine where the server is listening
+    //!  @param login The username passed to the server
+    //!  @param pass  The password passed to the server
+    //!  @param uri   An optional string to be sent as the URI in the HTTP GET header
+    XmlRpcClient(const char* host, int port, const char* login, const char* password, const char* uri=0);
+
     //! Destructor
     virtual ~XmlRpcClient();
 
@@ -49,17 +45,26 @@ namespace XmlRpc {
     //!  @param method The name of the remote procedure to execute
     //!  @param params An array of the arguments for the method
     //!  @param result The result value to be returned to the client
+    //!  @param timeoutSeconds Seconds to wait for a response (defaults to forever)
     //!  @return true if the request was sent and a result received 
     //!   (although the result might be a fault).
     //!
     //! Currently this is a synchronous (blocking) implementation (execute
     //! does not return until it receives a response or an error). Use isFault()
     //! to determine whether the result is a fault response.
-    bool execute(const char* method, XmlRpcValue const& params, XmlRpcValue& result);
+    bool execute(const char* method, XmlRpcValue const& params, XmlRpcValue& result, double timeoutSeconds = -1);
 
     //! Returns true if the result of the last execute() was a fault response.
     bool isFault() const { return _isFault; }
 
+    //! Return the host name of the server
+    const char* const host() const { return _host.c_str(); }
+
+    //! Return the port
+    int port() const { return _port; }
+
+    //! Return the URI
+    const char* const uri() const { return _uri.c_str(); }
 
     // XmlRpcSource interface implementation
     //! Close the connection
@@ -79,6 +84,7 @@ namespace XmlRpc {
     virtual std::string generateHeader(std::string const& body);
     virtual bool writeRequest();
     virtual bool readHeader();
+    virtual bool parseHeader();
     virtual bool readResponse();
     virtual bool parseResponse(XmlRpcValue& result);
 
@@ -91,6 +97,10 @@ namespace XmlRpc {
     std::string _uri;
     int _port;
 
+    // Login information for HTTP authentication
+    std::string _login;
+    std::string _password;
+
     // The xml-encoded request, http header of response, and response xml
     std::string _request;
     std::string _header;
@@ -108,9 +118,9 @@ namespace XmlRpc {
 
     // True if the server closed the connection
     bool _eof;
-
-    // True if a fault response was returned by the server
-    bool _isFault;
+
+    // True if a fault response was returned by the server
+    bool _isFault;
 
     // Number of bytes expected in the response body (parsed from response header)
     int _contentLength;
diff --git a/src/XmlRpcDispatch.cpp b/src/XmlRpcDispatch.cpp
index 3bbca40..95321c7 100644
--- a/src/XmlRpcDispatch.cpp
+++ b/src/XmlRpcDispatch.cpp
@@ -1,8 +1,12 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
 #include "XmlRpcUtil.h"
 
+#include <errno.h>
 #include <math.h>
 #include <sys/timeb.h>
 
@@ -71,99 +75,63 @@ XmlRpcDispatch::setSourceEvents(XmlRpcSource* source, unsigned eventMask)
 
 // Watch current set of sources and process events
 void
-XmlRpcDispatch::work(double timeout)
+XmlRpcDispatch::work(double timeoutSeconds)
 {
   // Compute end time
-  _endTime = (timeout < 0.0) ? -1.0 : (getTime() + timeout);
+  double timeNow = getTime();
+  _endTime = (timeoutSeconds < 0.0) ? -1.0 : (timeNow + timeoutSeconds);
   _doClear = false;
   _inWork = true;
 
   // Only work while there is something to monitor
   while (_sources.size() > 0) {
 
-    // Construct the sets of descriptors we are interested in
-    fd_set inFd, outFd, excFd;
-	  FD_ZERO(&inFd);
-	  FD_ZERO(&outFd);
-	  FD_ZERO(&excFd);
-
-    int maxFd = -1;     // Not used on windows
-    SourceList::iterator it;
-    for (it=_sources.begin(); it!=_sources.end(); ++it) {
-      int fd = it->getSource()->getfd();
-      if (it->getMask() & ReadableEvent) FD_SET(fd, &inFd);
-      if (it->getMask() & WritableEvent) FD_SET(fd, &outFd);
-      if (it->getMask() & Exception)     FD_SET(fd, &excFd);
-      if (it->getMask() && fd > maxFd)   maxFd = fd;
-    }
-
-    // Check for events
-    int nEvents;
-    if (timeout < 0.0)
-      nEvents = select(maxFd+1, &inFd, &outFd, &excFd, NULL);
-    else 
+    // Wait for and dispatch events
+    if ( ! waitForAndProcessEvents(timeoutSeconds))
     {
-      struct timeval tv;
-      tv.tv_sec = (int)floor(timeout);
-      tv.tv_usec = ((int)floor(1000000.0 * (timeout-floor(timeout)))) % 1000000;
-      nEvents = select(maxFd+1, &inFd, &outFd, &excFd, &tv);
-    }
-
-    if (nEvents < 0)
-    {
-      XmlRpcUtil::error("Error in XmlRpcDispatch::work: error in select (%d).", nEvents);
       _inWork = false;
       return;
     }
 
-    // Process events
-    for (it=_sources.begin(); it != _sources.end(); )
-    {
-      SourceList::iterator thisIt = it++;
-      XmlRpcSource* src = thisIt->getSource();
-      int fd = src->getfd();
-      unsigned newMask = (unsigned) -1;
-      if (fd <= maxFd) {
-        // If you select on multiple event types this could be ambiguous
-        if (FD_ISSET(fd, &inFd))
-          newMask &= src->handleEvent(ReadableEvent);
-        if (FD_ISSET(fd, &outFd))
-          newMask &= src->handleEvent(WritableEvent);
-        if (FD_ISSET(fd, &excFd))
-          newMask &= src->handleEvent(Exception);
-
-        if ( ! newMask) {
-          _sources.erase(thisIt);  // Stop monitoring this one
-          if ( ! src->getKeepOpen())
-            src->close();
-        } else if (newMask != (unsigned) -1) {
-          thisIt->getMask() = newMask;
-        }
-      }
-    }
 
     // Check whether to clear all sources
     if (_doClear)
     {
-      SourceList closeList = _sources;
-      _sources.clear();
-      for (SourceList::iterator it=closeList.begin(); it!=closeList.end(); ++it) {
-	XmlRpcSource *src = it->getSource();
+      SourceList sourcesToClose;
+      _sources.swap(sourcesToClose);
+      for (SourceList::iterator it=sourcesToClose.begin(); it!=sourcesToClose.end(); ++it)
+      {
+        XmlRpcSource *src = it->getSource();
         src->close();
       }
 
       _doClear = false;
     }
 
-    // Check whether end time has passed
-    if (0 <= _endTime && getTime() > _endTime)
+    // Check whether end time has passed or exit has been called
+    if (_endTime == 0.0)        // Exit
+    {
       break;
+    }
+    else if (_endTime > 0.0)    // Check for timeout
+    {
+      double t = getTime();
+      if (t > _endTime)
+        break;
+
+      // Decrement timeout by elapsed time
+      timeoutSeconds -= (t - timeNow);
+      if (timeoutSeconds < 0.0) 
+        timeoutSeconds = 0.0;    // Shouldn't happen but its fp math...
+      timeNow = t;
+    }
   }
 
   _inWork = false;
 }
 
 
+
 // Exit from work routine. Presumably this will be called from
 // one of the source event handlers.
 void
@@ -172,22 +140,26 @@ XmlRpcDispatch::exit()
   _endTime = 0.0;   // Return from work asap
 }
 
+
 // Clear all sources from the monitored sources list
 void
 XmlRpcDispatch::clear()
 {
   if (_inWork)
+  {
     _doClear = true;  // Finish reporting current events before clearing
+  }
   else
   {
-    SourceList closeList = _sources;
-    _sources.clear();
-    for (SourceList::iterator it=closeList.begin(); it!=closeList.end(); ++it)
+    SourceList sourcesToClose;
+    _sources.swap(sourcesToClose);
+    for (SourceList::iterator it=sourcesToClose.begin(); it!=sourcesToClose.end(); ++it)
       it->getSource()->close();
   }
 }
 
 
+// Time utility- return time in seconds
 double
 XmlRpcDispatch::getTime()
 {
@@ -207,3 +179,92 @@ XmlRpcDispatch::getTime()
 }
 
 
+// Wait for I/O on any source, timeout, or interrupt signal.
+bool
+XmlRpcDispatch::waitForAndProcessEvents(double timeoutSeconds)
+{
+  // Construct the sets of descriptors we are interested in
+  fd_set inFd, outFd, excFd;
+  FD_ZERO(&inFd);
+  FD_ZERO(&outFd);
+  FD_ZERO(&excFd);
+
+  XmlRpcSocket::Socket maxFd = 0;
+  for (SourceList::iterator it=_sources.begin(); it!=_sources.end(); ++it)
+  {
+    XmlRpcSocket::Socket fd = it->getSource()->getfd();
+    if (it->getMask() & ReadableEvent) FD_SET(fd, &inFd);
+    if (it->getMask() & WritableEvent) FD_SET(fd, &outFd);
+    if (it->getMask() & Exception)     FD_SET(fd, &excFd);
+    if (it->getMask() && fd > maxFd)   maxFd = fd;
+  }
+
+  // Check for events
+  int nEvents;
+  if (_endTime < 0.0)
+  {
+    nEvents = select(int(maxFd+1), &inFd, &outFd, &excFd, NULL);
+  }
+  else 
+  {
+    struct timeval tv;
+    tv.tv_sec = (int)floor(timeoutSeconds);
+    tv.tv_usec = ((int)floor(1000000.0 * (timeoutSeconds-floor(timeoutSeconds)))) % 1000000;
+    nEvents = select(int(maxFd+1), &inFd, &outFd, &excFd, &tv);
+  }
+
+  if (nEvents < 0 && errno != EINTR)
+  {
+    XmlRpcUtil::error("Error in XmlRpcDispatch::work: error in select (%d).", nEvents);
+    return false;
+  }
+
+  // Process events. Copy source list to avoid invalidating iterator by removing sources.
+  SourceList s(_sources);
+  for (SourceList::iterator it=s.begin(); it != s.end(); ++it)
+  {
+    XmlRpcSource* src = it->getSource();
+    XmlRpcSocket::Socket fd = src->getfd();
+
+    if (fd <= maxFd)
+    {
+      // handleEvent is called once per event type signalled
+      unsigned newMask = 0;
+      int nset = 0;
+      if (FD_ISSET(fd, &inFd))
+      {
+        newMask |= src->handleEvent(ReadableEvent);
+        ++nset;
+      }
+      if (FD_ISSET(fd, &outFd))
+      {
+        newMask |= src->handleEvent(WritableEvent);
+        ++nset;
+      }
+      if (FD_ISSET(fd, &excFd))
+      {
+        newMask |= src->handleEvent(Exception);
+        ++nset;
+      }
+
+      // Some event occurred
+      if (nset)
+      {
+        // This bit is not terribly efficient if many connections are active...
+        if (newMask)
+        {
+          setSourceEvents(src, newMask);
+        }
+        else       // Stop monitoring this one
+        {
+          removeSource(src);
+
+          if ( ! src->getKeepOpen())
+            src->close();
+        }
+      }
+    }
+  }
+
+  return true;
+}
diff --git a/src/XmlRpcDispatch.h b/src/XmlRpcDispatch.h
index b3c4ec0..1c25096 100644
--- a/src/XmlRpcDispatch.h
+++ b/src/XmlRpcDispatch.h
@@ -2,15 +2,13 @@
 #ifndef _XMLRPCDISPATCH_H_
 #define _XMLRPCDISPATCH_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <list>
-#endif
+#include <vector>
 
 namespace XmlRpc {
 
@@ -40,6 +38,7 @@ namespace XmlRpc {
 
     //! Stop monitoring this source.
     //!  @param source The source to stop monitoring
+    //! The source socket is not closed.
     void removeSource(XmlRpcSource* source);
 
     //! Modify the types of events to watch for on this source
@@ -47,8 +46,8 @@ namespace XmlRpc {
 
 
     //! Watch current set of sources and process events for the specified
-    //! duration (in ms, -1 implies wait forever, or until exit is called)
-    void work(double msTime);
+    //! duration (in seconds, -1 implies wait forever, or until exit is called)
+    void work(double timeSeconds);
 
     //! Exit from work routine
     void exit();
@@ -58,11 +57,16 @@ namespace XmlRpc {
 
   protected:
 
-    // helper
+    //! Wait for I/O on any source, timeout, or interrupt signal.
+    bool waitForAndProcessEvents(double timeoutSeconds);
+
+
+    //! Returns current time in seconds since something
     double getTime();
 
     // A source to monitor and what to monitor it for
-    struct MonitoredSource {
+    struct MonitoredSource
+    {
       MonitoredSource(XmlRpcSource* src, unsigned mask) : _src(src), _mask(mask) {}
       XmlRpcSource* getSource() const { return _src; }
       unsigned& getMask() { return _mask; }
@@ -71,7 +75,7 @@ namespace XmlRpc {
     };
 
     // A list of sources to monitor
-    typedef std::list< MonitoredSource > SourceList; 
+    typedef std::vector< MonitoredSource > SourceList; 
 
     // Sources being monitored
     SourceList _sources;
diff --git a/src/XmlRpcException.h b/src/XmlRpcException.h
index 6090450..7024311 100644
--- a/src/XmlRpcException.h
+++ b/src/XmlRpcException.h
@@ -2,7 +2,7 @@
 #ifndef _XMLRPCEXCEPTION_H_
 #define _XMLRPCEXCEPTION_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
diff --git a/src/XmlRpcMutex.cpp b/src/XmlRpcMutex.cpp
new file mode 100644
index 0000000..b29455d
--- /dev/null
+++ b/src/XmlRpcMutex.cpp
@@ -0,0 +1,60 @@
+#if defined(XMLRPC_THREADS)
+
+#include "XmlRpcMutex.h"
+
+#if defined(_WINDOWS)
+# define WIN32_LEAN_AND_MEAN
+# include <windows.h>
+#else
+# include <pthread.h>
+#endif
+
+using namespace XmlRpc;
+
+
+//! Destructor.
+XmlRpcMutex::~XmlRpcMutex()
+{
+  if (_pMutex)
+  {
+#if defined(_WINDOWS)
+    ::CloseHandle((HANDLE)_pMutex);
+#else
+    ::pthread_mutex_destroy((pthread_mutex_t*)_pMutex);
+    delete _pMutex;
+#endif
+    _pMutex = 0;
+  }
+}
+
+//! Wait for the mutex to be available and then acquire the lock.
+void XmlRpcMutex::acquire()
+{
+#if defined(_WINDOWS)
+  if ( ! _pMutex)
+    _pMutex = ::CreateMutex(0, TRUE, 0);
+  else
+    ::WaitForSingleObject(_pMutex, INFINITE);
+#else
+  if ( ! _pMutex)
+  {
+    _pMutex = new pthread_mutex_t;
+    ::pthread_mutex_init((pthread_mutex_t*)_pMutex, 0);
+  }
+  ::pthread_mutex_lock((pthread_mutex_t*)_pMutex);
+#endif
+}
+
+//! Release the mutex.
+void XmlRpcMutex::release()
+{
+  if (_pMutex)
+#if defined(_WINDOWS)
+    ::ReleaseMutex(_pMutex);
+#else
+    ::pthread_mutex_unlock((pthread_mutex_t*)_pMutex);
+#endif
+}
+
+#endif // XMLRPC_THREADS
+
diff --git a/src/XmlRpcMutex.h b/src/XmlRpcMutex.h
new file mode 100644
index 0000000..f46373d
--- /dev/null
+++ b/src/XmlRpcMutex.h
@@ -0,0 +1,46 @@
+#ifndef _XMLRPCMUTEX_H_
+#define _XMLRPCMUTEX_H_
+//
+// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+//
+#if defined(_MSC_VER)
+# pragma warning(disable:4786)    // identifier was truncated in debug info
+#endif
+
+namespace XmlRpc {
+
+  //! A simple platform-independent mutex API implemented for posix and windows.
+  class XmlRpcMutex {
+  public:
+    //! Construct a Mutex object.
+    XmlRpcMutex() : _pMutex(0) {}
+
+    //! Destroy a Mutex object.
+    ~XmlRpcMutex();
+
+    //! Wait for the mutex to be available and then acquire the lock.
+    void acquire();
+
+    //! Release the mutex.
+    void release();
+
+    //! Utility class to acquire a mutex at construction and release it when destroyed.
+    struct AutoLock {
+      //! Acquire the mutex at construction
+      AutoLock(XmlRpcMutex& m) : _m(m) { _m.acquire(); }
+      //! Release at destruction
+      ~AutoLock() { _m.release(); }
+      //! The mutex being held
+      XmlRpcMutex& _m;
+    };
+
+  private:
+
+    //! Native Mutex object
+    void* _pMutex;
+
+  };  // class XmlRpcMutex
+
+}  // namespace XmlRpc
+
+#endif	//  _XMLRPCMUTEX_H_
diff --git a/src/XmlRpcServer.cpp b/src/XmlRpcServer.cpp
index f6b4aa5..0982069 100644
--- a/src/XmlRpcServer.cpp
+++ b/src/XmlRpcServer.cpp
@@ -1,3 +1,7 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
+
 
 #include "XmlRpcServer.h"
 #include "XmlRpcServerConnection.h"
@@ -5,11 +9,25 @@
 #include "XmlRpcSocket.h"
 #include "XmlRpcUtil.h"
 #include "XmlRpcException.h"
+#include "XmlRpc.h"
 
 
 using namespace XmlRpc;
 
 
+// Static data
+const char XmlRpcServer::METHODNAME_TAG[] = "methodName";
+const char XmlRpcServer::PARAMS_TAG[] = "params";
+const char XmlRpcServer::PARAM_TAG[] = "param";
+
+const std::string XmlRpcServer::METHODNAME = "methodName";
+const std::string XmlRpcServer::PARAMS = "params";
+
+const std::string XmlRpcServer::FAULTCODE = "faultCode";
+const std::string XmlRpcServer::FAULTSTRING = "faultString";
+
+
+
 XmlRpcServer::XmlRpcServer()
 {
   _introspectionEnabled = false;
@@ -69,8 +87,8 @@ XmlRpcServer::findMethod(const std::string& name) const
 bool 
 XmlRpcServer::bindAndListen(int port, int backlog /*= 5*/)
 {
-  int fd = XmlRpcSocket::socket();
-  if (fd < 0)
+  XmlRpcSocket::Socket fd = XmlRpcSocket::socket();
+  if (XmlRpcSocket::Invalid == fd)
   {
     XmlRpcUtil::error("XmlRpcServer::bindAndListen: Could not create socket (%s).", XmlRpcSocket::getErrorMsg().c_str());
     return false;
@@ -119,12 +137,21 @@ XmlRpcServer::bindAndListen(int port, int backlog /*= 5*/)
 }
 
 
-// Process client requests for the specified time
+// Get port number that this server is listening on
+int
+XmlRpcServer::getPort(void) const
+{
+  return XmlRpcSocket::getPort(getfd());
+}
+
+
+
+// Process client requests for the specified time (in seconds)
 void 
-XmlRpcServer::work(double msTime)
+XmlRpcServer::work(double timeSeconds)
 {
   XmlRpcUtil::log(2, "XmlRpcServer::work: waiting for a connection");
-  _disp.work(msTime);
+  _disp.work(timeSeconds);
 }
 
 
@@ -144,9 +171,9 @@ XmlRpcServer::handleEvent(unsigned mask)
 void
 XmlRpcServer::acceptConnection()
 {
-  int s = XmlRpcSocket::accept(this->getfd());
+  XmlRpcSocket::Socket s = XmlRpcSocket::accept(this->getfd());
   XmlRpcUtil::log(2, "XmlRpcServer::acceptConnection: socket %d", s);
-  if (s < 0)
+  if (XmlRpcSocket::Invalid == s)
   {
     //this->close();
     XmlRpcUtil::error("XmlRpcServer::acceptConnection: Could not accept connection (%s).", XmlRpcSocket::getErrorMsg().c_str());
@@ -159,20 +186,30 @@ XmlRpcServer::acceptConnection()
   else  // Notify the dispatcher to listen for input on this source when we are in work()
   {
     XmlRpcUtil::log(2, "XmlRpcServer::acceptConnection: creating a connection");
-    _disp.addSource(this->createConnection(s), XmlRpcDispatch::ReadableEvent);
+    XmlRpcServerConnection* c = this->createConnection(s);
+    if (c) this->dispatchConnection(c);
   }
 }
 
 
 // Create a new connection object for processing requests from a specific client.
 XmlRpcServerConnection*
-XmlRpcServer::createConnection(int s)
+XmlRpcServer::createConnection(XmlRpcSocket::Socket s)
 {
   // Specify that the connection object be deleted when it is closed
   return new XmlRpcServerConnection(s, this, true);
 }
 
 
+// Hand off a new connection to a dispatcher
+void
+XmlRpcServer::dispatchConnection(XmlRpcServerConnection* sc)
+{
+  _disp.addSource(sc, XmlRpcDispatch::ReadableEvent);
+}
+
+
+// Remove a connection. Called by the connection when it closes down.
 void 
 XmlRpcServer::removeConnection(XmlRpcServerConnection* sc)
 {
@@ -272,13 +309,197 @@ void
 XmlRpcServer::listMethods(XmlRpcValue& result)
 {
   int i = 0;
-  result.setSize(_methods.size()+1);
+  result.setSize(int(_methods.size())+1);
   for (MethodMap::iterator it=_methods.begin(); it != _methods.end(); ++it)
     result[i++] = it->first;
 
-  // Multicall support is built into XmlRpcServerConnection
+  // Multicall support is built into XmlRpcServer::executeRequest
   result[i] = MULTICALL;
 }
 
 
 
+// Parse the request, run the method, generate a response string.
+std::string
+XmlRpcServer::executeRequest(std::string const& request)
+{
+  XmlRpcValue params, resultValue;
+  std::string methodName = parseRequest(request, params);
+  XmlRpcUtil::log(2, "XmlRpcServer::executeRequest: server calling method '%s'", 
+                    methodName.c_str());
+
+  std::string response;
+  try {
+
+    if ( ! executeMethod(methodName, params, resultValue) &&
+         ! executeMulticall(methodName, params, resultValue))
+      response = generateFaultResponse(methodName + ": unknown method name");
+    else
+      response = generateResponse(resultValue.toXml());
+
+  } catch (const XmlRpcException& fault) {
+    XmlRpcUtil::log(2, "XmlRpcServer::executeRequest: fault %s.",
+                    fault.getMessage().c_str()); 
+    response = generateFaultResponse(fault.getMessage(), fault.getCode());
+  }
+
+  return response;
+}
+
+// Parse the method name and the argument values from the request.
+std::string
+XmlRpcServer::parseRequest(std::string const& request, XmlRpcValue& params)
+{
+  std::string methodName;
+  int offset = 0;   // Number of chars parsed from the request
+  bool emptyTag;
+
+  if (XmlRpcUtil::parseTag(METHODNAME_TAG, request, &offset, methodName) &&
+      XmlRpcUtil::findTag(PARAMS_TAG, request, &offset, &emptyTag) &&
+      ! emptyTag)
+  {
+    int nArgs = 0;
+    while (XmlRpcUtil::nextTagIs(PARAM_TAG, request, &offset, &emptyTag))
+    {
+      if (emptyTag)
+      {
+        params[nArgs++] = XmlRpcValue("");
+      }
+      else
+      {
+        params[nArgs++] = XmlRpcValue(request, &offset);
+        (void) XmlRpcUtil::nextTagIsEnd(PARAM_TAG, request, &offset);
+      }
+    }
+
+    (void) XmlRpcUtil::nextTagIsEnd(PARAMS_TAG, request, &offset);
+  }
+
+  return methodName;
+}
+
+// Execute a named method with the specified params.
+bool
+XmlRpcServer::executeMethod(const std::string& methodName, 
+                            XmlRpcValue& params, 
+                            XmlRpcValue& result)
+{
+  XmlRpcServerMethod* method = findMethod(methodName);
+
+  if ( ! method) return false;
+
+  method->execute(params, result);
+
+  // Ensure a valid result value
+  if ( ! result.valid())
+      result = std::string();
+
+  return true;
+}
+
+// Execute multiple calls and return the results in an array.
+bool
+XmlRpcServer::executeMulticall(const std::string& methodName, 
+                               XmlRpcValue& params, 
+                               XmlRpcValue& result)
+{
+  if (methodName != MULTICALL) return false;
+
+  // There ought to be 1 parameter, an array of structs
+  if (params.size() != 1 || params[0].getType() != XmlRpcValue::TypeArray)
+    throw XmlRpcException(MULTICALL + ": Invalid argument (expected an array)");
+
+  int nc = params[0].size();
+  result.setSize(nc);
+
+  for (int i=0; i<nc; ++i) {
+
+    if ( ! params[0][i].hasMember(METHODNAME) ||
+         ! params[0][i].hasMember(PARAMS)) {
+      result[i][FAULTCODE] = -1;
+      result[i][FAULTSTRING] = MULTICALL +
+              ": Invalid argument (expected a struct with members methodName and params)";
+      continue;
+    }
+
+    const std::string& methodName = params[0][i][METHODNAME];
+    XmlRpcValue& methodParams = params[0][i][PARAMS];
+
+    XmlRpcValue resultValue;
+    resultValue.setSize(1);
+    try {
+      if ( ! executeMethod(methodName, methodParams, resultValue[0]) &&
+           ! executeMulticall(methodName, params, resultValue[0]))
+      {
+        result[i][FAULTCODE] = -1;
+        result[i][FAULTSTRING] = methodName + ": unknown method name";
+      }
+      else
+        result[i] = resultValue;
+
+    } catch (const XmlRpcException& fault) {
+        result[i][FAULTCODE] = fault.getCode();
+        result[i][FAULTSTRING] = fault.getMessage();
+    }
+  }
+
+  return true;
+}
+
+
+// Create a response from results xml
+std::string
+XmlRpcServer::generateResponse(std::string const& resultXml)
+{
+  const char RESPONSE_1[] = 
+    "<?xml version=\"1.0\"?>\r\n"
+    "<methodResponse><params><param>\r\n\t";
+  const char RESPONSE_2[] =
+    "\r\n</param></params></methodResponse>\r\n";
+
+  std::string body = RESPONSE_1 + resultXml + RESPONSE_2;
+  std::string header = generateHeader(body);
+  std::string response = header + body;
+
+  XmlRpcUtil::log(5, "XmlRpcServer::generateResponse:\n%s\n", response.c_str());
+  return response;
+}
+
+
+// Prepend http headers
+std::string
+XmlRpcServer::generateHeader(std::string const& body)
+{
+  std::string header = 
+    "HTTP/1.1 200 OK\r\n"
+    "Server: ";
+  header += XMLRPC_VERSION;
+  header += "\r\n"
+    "Content-Type: text/xml\r\n"
+    "Content-length: ";
+
+  char buffLen[40];
+  sprintf(buffLen,"%d\r\n\r\n", body.size());
+
+  return header + buffLen;
+}
+
+
+std::string
+XmlRpcServer::generateFaultResponse(std::string const& errorMsg, int errorCode)
+{
+  const char RESPONSE_1[] = 
+    "<?xml version=\"1.0\"?>\r\n"
+    "<methodResponse><fault>\r\n\t";
+  const char RESPONSE_2[] =
+    "\r\n</fault></methodResponse>\r\n";
+
+  XmlRpcValue faultStruct;
+  faultStruct[FAULTCODE] = errorCode;
+  faultStruct[FAULTSTRING] = errorMsg;
+  std::string body = RESPONSE_1 + faultStruct.toXml() + RESPONSE_2;
+  std::string header = generateHeader(body);
+
+  return header + body;
+}
+
diff --git a/src/XmlRpcServer.h b/src/XmlRpcServer.h
index 8172733..7da5d62 100644
--- a/src/XmlRpcServer.h
+++ b/src/XmlRpcServer.h
@@ -2,16 +2,15 @@
 #ifndef _XMLRPCSERVER_H_
 #define _XMLRPCSERVER_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <map>
-# include <string>
-#endif
+#include <map>
+#include <string>
+
 
 #include "XmlRpcDispatch.h"
 #include "XmlRpcSource.h"
@@ -54,10 +53,14 @@ namespace XmlRpc {
 
     //! Create a socket, bind to the specified port, and
     //! set it in listen mode to make it available for clients.
+    //! @param port The port to bind and listen on (zero to choose an arbitrary port)
     bool bindAndListen(int port, int backlog = 5);
 
-    //! Process client requests for the specified time
-    void work(double msTime);
+    //! Get the port number this server is listening on.
+    int getPort(void) const;
+
+    //! Process client requests for the specified time (in seconds)
+    void work(double timeSeconds);
 
     //! Temporarily stop processing client requests and exit the work() method.
     void exit();
@@ -68,6 +71,12 @@ namespace XmlRpc {
     //! Introspection support
     void listMethods(XmlRpcValue& result);
 
+
+    //! Parses the request xml, runs the method, generates the response (header+xml).
+    //! Returns a fault response if an error occurs during method execution.
+    virtual std::string executeRequest(std::string const& request);
+
+
     // XmlRpcSource interface implementation
 
     //! Handle client connection requests
@@ -78,24 +87,68 @@ namespace XmlRpc {
 
   protected:
 
+    // Static data
+    static const char METHODNAME_TAG[];
+    static const char PARAMS_TAG[];
+    static const char PARAM_TAG[];
+
+    static const std::string SYSTEM_MULTICALL;
+    static const std::string METHODNAME;
+    static const std::string PARAMS;
+
+    static const std::string FAULTCODE;
+    static const std::string FAULTSTRING;
+
+
     //! Accept a client connection request
     virtual void acceptConnection();
 
     //! Create a new connection object for processing requests from a specific client.
-    virtual XmlRpcServerConnection* createConnection(int socket);
+    //! If the client is not authorized to connect, close the socket and return 0.
+    virtual XmlRpcServerConnection* createConnection(XmlRpcSocket::Socket socket);
+
+    //! Hand off a new connection object to a dispatcher.
+    virtual void dispatchConnection(XmlRpcServerConnection* sc);
 
-    // Whether the introspection API is supported by this server
+
+    //! Parse the methodName and parameters from the request.
+    //! @returns the methodName
+    std::string parseRequest(std::string const& request, XmlRpcValue& params);
+
+    //! Execute a named method with the specified params.
+    bool executeMethod(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
+
+    //! Execute multiple calls and return the results in an array.
+    //! System.multicall implementation
+    bool executeMulticall(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
+
+    //! Construct a response from the result XML.
+    std::string generateResponse(std::string const& resultXml);
+
+    //! Construct a fault response.
+    std::string generateFaultResponse(std::string const& msg, int errorCode = -1);
+
+    //! Return the appropriate headers for the response.
+    std::string generateHeader(std::string const& body);
+
+
+    
+    //! Whether the introspection API is supported by this server
     bool _introspectionEnabled;
 
-    // Event dispatcher
+    //! Event dispatcher
     XmlRpcDispatch _disp;
 
-    // Collection of methods. This could be a set keyed on method name if we wanted...
+    //! Collection of methods. This could be a set keyed on method name if we wanted...
     typedef std::map< std::string, XmlRpcServerMethod* > MethodMap;
+
+    //! Registered RPC methods.
     MethodMap _methods;
 
-    // system methods
+    //! List all registered RPC methods (only available if introspection is enabled)
     XmlRpcServerMethod* _listMethods;
+
+    //! Return help string for a specified method (only available if introspection is enabled)
     XmlRpcServerMethod* _methodHelp;
 
   };
diff --git a/src/XmlRpcServerConnection.cpp b/src/XmlRpcServerConnection.cpp
index b9d6def..a37ff72 100644
--- a/src/XmlRpcServerConnection.cpp
+++ b/src/XmlRpcServerConnection.cpp
@@ -1,33 +1,25 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcServerConnection.h"
 
+#include "XmlRpcDispatch.h"
+#include "XmlRpcServer.h"
 #include "XmlRpcSocket.h"
-#include "XmlRpc.h"
-#ifndef MAKEDEPEND
-# include <stdio.h>
-# include <stdlib.h>
-#endif
+#include "XmlRpcUtil.h"
 
-using namespace XmlRpc;
-
-// Static data
-const char XmlRpcServerConnection::METHODNAME_TAG[] = "<methodName>";
-const char XmlRpcServerConnection::PARAMS_TAG[] = "<params>";
-const char XmlRpcServerConnection::PARAMS_ETAG[] = "</params>";
-const char XmlRpcServerConnection::PARAM_TAG[] = "<param>";
-const char XmlRpcServerConnection::PARAM_ETAG[] = "</param>";
+#include <stdio.h>
+#include <stdlib.h>
 
-const std::string XmlRpcServerConnection::SYSTEM_MULTICALL = "system.multicall";
-const std::string XmlRpcServerConnection::METHODNAME = "methodName";
-const std::string XmlRpcServerConnection::PARAMS = "params";
-
-const std::string XmlRpcServerConnection::FAULTCODE = "faultCode";
-const std::string XmlRpcServerConnection::FAULTSTRING = "faultString";
+using namespace XmlRpc;
 
 
 
 // The server delegates handling client requests to a serverConnection object.
-XmlRpcServerConnection::XmlRpcServerConnection(int fd, XmlRpcServer* server, bool deleteOnClose /*= false*/) :
+XmlRpcServerConnection::XmlRpcServerConnection(XmlRpcSocket::Socket fd,
+                                               XmlRpcServer* server,
+                                               bool deleteOnClose /*= false*/) :
   XmlRpcSource(fd, deleteOnClose)
 {
   XmlRpcUtil::log(2,"XmlRpcServerConnection: new socket %d.", fd);
@@ -69,7 +61,8 @@ XmlRpcServerConnection::readHeader()
 {
   // Read available data
   bool eof;
-  if ( ! XmlRpcSocket::nbRead(this->getfd(), _header, &eof)) {
+  if ( ! nbRead(_header, &eof))
+  {
     // Its only an error if we already have read some data
     if (_header.length() > 0)
       XmlRpcUtil::error("XmlRpcServerConnection::readHeader: error while reading header (%s).",XmlRpcSocket::getErrorMsg().c_str());
@@ -141,20 +134,26 @@ XmlRpcServerConnection::readHeader()
   return true;    // Continue monitoring this source
 }
 
+
+
 bool
 XmlRpcServerConnection::readRequest()
 {
   // If we dont have the entire request yet, read available data
-  if (int(_request.length()) < _contentLength) {
+  if (int(_request.length()) < _contentLength)
+  {
     bool eof;
-    if ( ! XmlRpcSocket::nbRead(this->getfd(), _request, &eof)) {
+    if ( ! nbRead(_request, &eof))
+    {
       XmlRpcUtil::error("XmlRpcServerConnection::readRequest: read error (%s).",XmlRpcSocket::getErrorMsg().c_str());
       return false;
     }
 
     // If we haven't gotten the entire request yet, return (keep reading)
-    if (int(_request.length()) < _contentLength) {
-      if (eof) {
+    if (int(_request.length()) < _contentLength)
+    {
+      if (eof)
+      {
         XmlRpcUtil::error("XmlRpcServerConnection::readRequest: EOF while reading request");
         return false;   // Either way we close the connection
       }
@@ -172,27 +171,32 @@ XmlRpcServerConnection::readRequest()
 }
 
 
+
 bool
 XmlRpcServerConnection::writeResponse()
 {
-  if (_response.length() == 0) {
+  if (_response.length() == 0)
+  {
     executeRequest();
     _bytesWritten = 0;
-    if (_response.length() == 0) {
+    if (_response.length() == 0)
+    {
       XmlRpcUtil::error("XmlRpcServerConnection::writeResponse: empty response.");
       return false;
     }
   }
 
   // Try to write the response
-  if ( ! XmlRpcSocket::nbWrite(this->getfd(), _response, &_bytesWritten)) {
+  if ( ! nbWrite(_response, &_bytesWritten))
+  {
     XmlRpcUtil::error("XmlRpcServerConnection::writeResponse: write error (%s).",XmlRpcSocket::getErrorMsg().c_str());
     return false;
   }
   XmlRpcUtil::log(3, "XmlRpcServerConnection::writeResponse: wrote %d of %d bytes.", _bytesWritten, _response.length());
 
   // Prepare to read the next request
-  if (_bytesWritten == int(_response.length())) {
+  if (_bytesWritten == int(_response.length()))
+  {
     _header = "";
     _request = "";
     _response = "";
@@ -202,170 +206,10 @@ XmlRpcServerConnection::writeResponse()
   return _keepAlive;    // Continue monitoring this source if true
 }
 
-// Run the method, generate _response string
-void
-XmlRpcServerConnection::executeRequest()
-{
-  XmlRpcValue params, resultValue;
-  std::string methodName = parseRequest(params);
-  XmlRpcUtil::log(2, "XmlRpcServerConnection::executeRequest: server calling method '%s'", 
-                    methodName.c_str());
-
-  try {
-
-    if ( ! executeMethod(methodName, params, resultValue) &&
-         ! executeMulticall(methodName, params, resultValue))
-      generateFaultResponse(methodName + ": unknown method name");
-    else
-      generateResponse(resultValue.toXml());
-
-  } catch (const XmlRpcException& fault) {
-    XmlRpcUtil::log(2, "XmlRpcServerConnection::executeRequest: fault %s.",
-                    fault.getMessage().c_str()); 
-    generateFaultResponse(fault.getMessage(), fault.getCode());
-  }
-}
-
-// Parse the method name and the argument values from the request.
-std::string
-XmlRpcServerConnection::parseRequest(XmlRpcValue& params)
-{
-  int offset = 0;   // Number of chars parsed from the request
-
-  std::string methodName = XmlRpcUtil::parseTag(METHODNAME_TAG, _request, &offset);
-
-  if (methodName.size() > 0 && XmlRpcUtil::findTag(PARAMS_TAG, _request, &offset))
-  {
-    int nArgs = 0;
-    while (XmlRpcUtil::nextTagIs(PARAM_TAG, _request, &offset)) {
-      params[nArgs++] = XmlRpcValue(_request, &offset);
-      (void) XmlRpcUtil::nextTagIs(PARAM_ETAG, _request, &offset);
-    }
-
-    (void) XmlRpcUtil::nextTagIs(PARAMS_ETAG, _request, &offset);
-  }
-
-  return methodName;
-}
-
-// Execute a named method with the specified params.
-bool
-XmlRpcServerConnection::executeMethod(const std::string& methodName, 
-                                      XmlRpcValue& params, XmlRpcValue& result)
-{
-  XmlRpcServerMethod* method = _server->findMethod(methodName);
-
-  if ( ! method) return false;
-
-  method->execute(params, result);
-
-  // Ensure a valid result value
-  if ( ! result.valid())
-      result = std::string();
-
-  return true;
-}
-
-// Execute multiple calls and return the results in an array.
-bool
-XmlRpcServerConnection::executeMulticall(const std::string& methodName, 
-                                         XmlRpcValue& params, XmlRpcValue& result)
-{
-  if (methodName != SYSTEM_MULTICALL) return false;
-
-  // There ought to be 1 parameter, an array of structs
-  if (params.size() != 1 || params[0].getType() != XmlRpcValue::TypeArray)
-    throw XmlRpcException(SYSTEM_MULTICALL + ": Invalid argument (expected an array)");
-
-  int nc = params[0].size();
-  result.setSize(nc);
-
-  for (int i=0; i<nc; ++i) {
-
-    if ( ! params[0][i].hasMember(METHODNAME) ||
-         ! params[0][i].hasMember(PARAMS)) {
-      result[i][FAULTCODE] = -1;
-      result[i][FAULTSTRING] = SYSTEM_MULTICALL +
-              ": Invalid argument (expected a struct with members methodName and params)";
-      continue;
-    }
-
-    const std::string& methodName = params[0][i][METHODNAME];
-    XmlRpcValue& methodParams = params[0][i][PARAMS];
-
-    XmlRpcValue resultValue;
-    resultValue.setSize(1);
-    try {
-      if ( ! executeMethod(methodName, methodParams, resultValue[0]) &&
-           ! executeMulticall(methodName, params, resultValue[0]))
-      {
-        result[i][FAULTCODE] = -1;
-        result[i][FAULTSTRING] = methodName + ": unknown method name";
-      }
-      else
-        result[i] = resultValue;
-
-    } catch (const XmlRpcException& fault) {
-        result[i][FAULTCODE] = fault.getCode();
-        result[i][FAULTSTRING] = fault.getMessage();
-    }
-  }
-
-  return true;
-}
-
-
-// Create a response from results xml
-void
-XmlRpcServerConnection::generateResponse(std::string const& resultXml)
-{
-  const char RESPONSE_1[] = 
-    "<?xml version=\"1.0\"?>\r\n"
-    "<methodResponse><params><param>\r\n\t";
-  const char RESPONSE_2[] =
-    "\r\n</param></params></methodResponse>\r\n";
-
-  std::string body = RESPONSE_1 + resultXml + RESPONSE_2;
-  std::string header = generateHeader(body);
-
-  _response = header + body;
-  XmlRpcUtil::log(5, "XmlRpcServerConnection::generateResponse:\n%s\n", _response.c_str()); 
-}
-
-// Prepend http headers
-std::string
-XmlRpcServerConnection::generateHeader(std::string const& body)
-{
-  std::string header = 
-    "HTTP/1.1 200 OK\r\n"
-    "Server: ";
-  header += XMLRPC_VERSION;
-  header += "\r\n"
-    "Content-Type: text/xml\r\n"
-    "Content-length: ";
-
-  char buffLen[40];
-  sprintf(buffLen,"%d\r\n\r\n", body.size());
-
-  return header + buffLen;
-}
-
 
-void
-XmlRpcServerConnection::generateFaultResponse(std::string const& errorMsg, int errorCode)
+//! Helper method to execute the client request
+void XmlRpcServerConnection::executeRequest()
 {
-  const char RESPONSE_1[] = 
-    "<?xml version=\"1.0\"?>\r\n"
-    "<methodResponse><fault>\r\n\t";
-  const char RESPONSE_2[] =
-    "\r\n</fault></methodResponse>\r\n";
-
-  XmlRpcValue faultStruct;
-  faultStruct[FAULTCODE] = errorCode;
-  faultStruct[FAULTSTRING] = errorMsg;
-  std::string body = RESPONSE_1 + faultStruct.toXml() + RESPONSE_2;
-  std::string header = generateHeader(body);
-
-  _response = header + body;
+  _response = _server->executeRequest(_request);
 }
 
diff --git a/src/XmlRpcServerConnection.h b/src/XmlRpcServerConnection.h
index 9efbbaf..cefe56b 100644
--- a/src/XmlRpcServerConnection.h
+++ b/src/XmlRpcServerConnection.h
@@ -1,15 +1,13 @@
 #ifndef _XMLRPCSERVERCONNECTION_H_
 #define _XMLRPCSERVERCONNECTION_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+#include <string>
 
 #include "XmlRpcValue.h"
 #include "XmlRpcSource.h"
@@ -17,29 +15,16 @@
 namespace XmlRpc {
 
 
-  // The server waits for client connections and provides methods
+  // The server waits for client connections and provides support for executing methods
   class XmlRpcServer;
   class XmlRpcServerMethod;
 
   //! A class to handle XML RPC requests from a particular client
   class XmlRpcServerConnection : public XmlRpcSource {
   public:
-    // Static data
-    static const char METHODNAME_TAG[];
-    static const char PARAMS_TAG[];
-    static const char PARAMS_ETAG[];
-    static const char PARAM_TAG[];
-    static const char PARAM_ETAG[];
-
-    static const std::string SYSTEM_MULTICALL;
-    static const std::string METHODNAME;
-    static const std::string PARAMS;
-
-    static const std::string FAULTCODE;
-    static const std::string FAULTSTRING;
 
     //! Constructor
-    XmlRpcServerConnection(int fd, XmlRpcServer* server, bool deleteOnClose = false);
+    XmlRpcServerConnection(XmlRpcSocket::Socket fd, XmlRpcServer* server, bool deleteOnClose = false);
     //! Destructor
     virtual ~XmlRpcServerConnection();
 
@@ -50,51 +35,44 @@ namespace XmlRpc {
 
   protected:
 
+    //! Reads the http header
     bool readHeader();
-    bool readRequest();
-    bool writeResponse();
 
-    // Parses the request, runs the method, generates the response xml.
-    virtual void executeRequest();
-
-    // Parse the methodName and parameters from the request.
-    std::string parseRequest(XmlRpcValue& params);
+    //! Reads the request (based on the content-length header value)
+    bool readRequest();
 
-    // Execute a named method with the specified params.
-    bool executeMethod(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
+    //! Executes the request and writes the resulting response
+    bool writeResponse();
 
-    // Execute multiple calls and return the results in an array.
-    bool executeMulticall(const std::string& methodName, XmlRpcValue& params, XmlRpcValue& result);
 
-    // Construct a response from the result XML.
-    void generateResponse(std::string const& resultXml);
-    void generateFaultResponse(std::string const& msg, int errorCode = -1);
-    std::string generateHeader(std::string const& body);
+    //! Helper method to execute the client request
+    virtual void executeRequest();
 
 
-    // The XmlRpc server that accepted this connection
+    //! The XmlRpc server that accepted this connection
     XmlRpcServer* _server;
 
-    // Possible IO states for the connection
+    //! Possible IO states for the connection
     enum ServerConnectionState { READ_HEADER, READ_REQUEST, WRITE_RESPONSE };
+    //! Current IO state for the connection
     ServerConnectionState _connectionState;
 
-    // Request headers
+    //! Request headers
     std::string _header;
 
-    // Number of bytes expected in the request body (parsed from header)
+    //! Number of bytes expected in the request body (parsed from header)
     int _contentLength;
 
-    // Request body
+    //! Request body
     std::string _request;
 
-    // Response
+    //! Response
     std::string _response;
 
-    // Number of bytes of the response written so far
+    //! Number of bytes of the response written so far
     int _bytesWritten;
 
-    // Whether to keep the current client connection open for further requests
+    //! Whether to keep the current client connection open for further requests
     bool _keepAlive;
   };
 } // namespace XmlRpc
diff --git a/src/XmlRpcServerMethod.cpp b/src/XmlRpcServerMethod.cpp
index 1616ff4..b35db4c 100644
--- a/src/XmlRpcServerMethod.cpp
+++ b/src/XmlRpcServerMethod.cpp
@@ -1,3 +1,6 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcServerMethod.h"
 #include "XmlRpcServer.h"
diff --git a/src/XmlRpcServerMethod.h b/src/XmlRpcServerMethod.h
index 738a9c8..ab481c8 100644
--- a/src/XmlRpcServerMethod.h
+++ b/src/XmlRpcServerMethod.h
@@ -2,15 +2,13 @@
 #ifndef _XMLRPCSERVERMETHOD_H_
 #define _XMLRPCSERVERMETHOD_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+#include <string>
 
 namespace XmlRpc {
 
diff --git a/src/XmlRpcSocket.cpp b/src/XmlRpcSocket.cpp
index b71ef94..fb7a622 100644
--- a/src/XmlRpcSocket.cpp
+++ b/src/XmlRpcSocket.cpp
@@ -1,17 +1,22 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcSocket.h"
 #include "XmlRpcUtil.h"
 
-#ifndef MAKEDEPEND
 
 #if defined(_WINDOWS)
-# include <stdio.h>
+# include <stdio.h>
 # include <winsock2.h>
 //# pragma lib(WS2_32.lib)
 
 # define EINPROGRESS	WSAEINPROGRESS
 # define EWOULDBLOCK	WSAEWOULDBLOCK
 # define ETIMEDOUT	    WSAETIMEDOUT
+
+typedef int socklen_t;
+
 #else
 extern "C" {
 # include <unistd.h>
@@ -25,54 +30,60 @@ extern "C" {
 }
 #endif  // _WINDOWS
 
-#endif // MAKEDEPEND
-
 
 using namespace XmlRpc;
 
 
-
-#if defined(_WINDOWS)
+// One-time initializations
+static bool initialized = false;
   
-static void initWinSock()
+
+static void initialize()
 {
-  static bool wsInit = false;
-  if (! wsInit)
-  {
-    WORD wVersionRequested = MAKEWORD( 2, 0 );
-    WSADATA wsaData;
-    WSAStartup(wVersionRequested, &wsaData);
-    wsInit = true;
-  }
-}
+    initialized = true;
 
+#if defined(_WINDOWS)
+    {
+        WORD wVersionRequested = MAKEWORD( 2, 0 );
+        WSADATA wsaData;
+        WSAStartup(wVersionRequested, &wsaData);
+    }
 #else
+    {
+        // Ignore SIGPIPE
+        (void) signal(SIGPIPE, SIG_IGN);
+    }
+#endif // _WINDOWS
+}
 
-#define initWinSock()
 
-#endif // _WINDOWS
 
+// These errors are not considered fatal for an IO operation; the operation will be re-tried.
+bool
+XmlRpcSocket::nonFatalError()
+{
+  int err = XmlRpcSocket::getError();
+  return (err == EINPROGRESS ||
+#if defined(EAGAIN)
+          err == EAGAIN ||
+#endif
+#if defined(EINTR)
+          err == EINTR ||
+#endif
+          err == EWOULDBLOCK);
+}
 
-// These errors are not considered fatal for an IO operation; the operation will be re-tried.
-static inline bool
-nonFatalError()
-{
-  int err = XmlRpcSocket::getError();
-  return (err == EINPROGRESS || err == EAGAIN || err == EWOULDBLOCK || err == EINTR);
-}
-
-
 
-int
+XmlRpcSocket::Socket
 XmlRpcSocket::socket()
 {
-  initWinSock();
-  return (int) ::socket(AF_INET, SOCK_STREAM, 0);
+  if ( ! initialized) initialize();
+  return ::socket(AF_INET, SOCK_STREAM, 0);
 }
 
 
 void
-XmlRpcSocket::close(int fd)
+XmlRpcSocket::close(XmlRpcSocket::Socket fd)
 {
   XmlRpcUtil::log(4, "XmlRpcSocket::close: fd %d.", fd);
 #if defined(_WINDOWS)
@@ -86,11 +97,11 @@ XmlRpcSocket::close(int fd)
 
 
 bool
-XmlRpcSocket::setNonBlocking(int fd)
+XmlRpcSocket::setNonBlocking(XmlRpcSocket::Socket fd)
 {
 #if defined(_WINDOWS)
   unsigned long flag = 1;
-  return (ioctlsocket((SOCKET)fd, FIONBIO, &flag) == 0);
+  return (ioctlsocket(fd, FIONBIO, &flag) == 0);
 #else
   return (fcntl(fd, F_SETFL, O_NONBLOCK) == 0);
 #endif // _WINDOWS
@@ -98,7 +109,7 @@ XmlRpcSocket::setNonBlocking(int fd)
 
 
 bool
-XmlRpcSocket::setReuseAddr(int fd)
+XmlRpcSocket::setReuseAddr(XmlRpcSocket::Socket fd)
 {
   // Allow this port to be re-bound immediately so server re-starts are not delayed
   int sflag = 1;
@@ -108,7 +119,7 @@ XmlRpcSocket::setReuseAddr(int fd)
 
 // Bind to a specified port
 bool 
-XmlRpcSocket::bind(int fd, int port)
+XmlRpcSocket::bind(XmlRpcSocket::Socket fd, int port)
 {
   struct sockaddr_in saddr;
   memset(&saddr, 0, sizeof(saddr));
@@ -121,31 +132,26 @@ XmlRpcSocket::bind(int fd, int port)
 
 // Set socket in listen mode
 bool 
-XmlRpcSocket::listen(int fd, int backlog)
+XmlRpcSocket::listen(XmlRpcSocket::Socket fd, int backlog)
 {
   return (::listen(fd, backlog) == 0);
 }
 
 
-int
-XmlRpcSocket::accept(int fd)
+XmlRpcSocket::Socket
+XmlRpcSocket::accept(XmlRpcSocket::Socket fd)
 {
   struct sockaddr_in addr;
-#if defined(_WINDOWS)
-  int
-#else
-  socklen_t
-#endif
-    addrlen = sizeof(addr);
+  socklen_t addrlen = sizeof(addr);
 
-  return (int) ::accept(fd, (struct sockaddr*)&addr, &addrlen);
+  return ::accept(fd, (struct sockaddr*)&addr, &addrlen);
 }
 
 
     
 // Connect a socket to a server (from a client)
 bool
-XmlRpcSocket::connect(int fd, std::string& host, int port)
+XmlRpcSocket::connect(XmlRpcSocket::Socket fd, std::string& host, int port)
 {
   struct sockaddr_in saddr;
   memset(&saddr, 0, sizeof(saddr));
@@ -166,66 +172,22 @@ XmlRpcSocket::connect(int fd, std::string& host, int port)
 
 
 
-// Read available text from the specified socket. Returns false on error.
-bool 
-XmlRpcSocket::nbRead(int fd, std::string& s, bool *eof)
+// Get the port of a bound socket
+int
+XmlRpcSocket::getPort(XmlRpcSocket::Socket socket)
 {
-  const int READ_SIZE = 4096;   // Number of bytes to attempt to read at a time
-  char readBuf[READ_SIZE];
-
-  bool wouldBlock = false;
-  *eof = false;
-
-  while ( ! wouldBlock && ! *eof) {
-#if defined(_WINDOWS)
-    int n = recv(fd, readBuf, READ_SIZE-1, 0);
-#else
-    int n = read(fd, readBuf, READ_SIZE-1);
-#endif
-    XmlRpcUtil::log(5, "XmlRpcSocket::nbRead: read/recv returned %d.", n);
-
-    if (n > 0) {
-      readBuf[n] = 0;
-      s.append(readBuf, n);
-    } else if (n == 0) {
-      *eof = true;
-    } else if (nonFatalError()) {
-      wouldBlock = true;
-    } else {
-      return false;   // Error
-    }
-  }
-  return true;
-}
-
+  struct sockaddr_in saddr;
+  socklen_t saddr_len = sizeof(saddr);
+  int port;
 
-// Write text to the specified socket. Returns false on error.
-bool 
-XmlRpcSocket::nbWrite(int fd, std::string& s, int *bytesSoFar)
-{
-  int nToWrite = int(s.length()) - *bytesSoFar;
-  char *sp = const_cast<char*>(s.c_str()) + *bytesSoFar;
-  bool wouldBlock = false;
+  int result = ::getsockname(socket, (sockaddr*) &saddr, &saddr_len);
 
-  while ( nToWrite > 0 && ! wouldBlock ) {
-#if defined(_WINDOWS)
-    int n = send(fd, sp, nToWrite, 0);
-#else
-    int n = write(fd, sp, nToWrite);
-#endif
-    XmlRpcUtil::log(5, "XmlRpcSocket::nbWrite: send/write returned %d.", n);
-
-    if (n > 0) {
-      sp += n;
-      *bytesSoFar += n;
-      nToWrite -= n;
-    } else if (nonFatalError()) {
-      wouldBlock = true;
-    } else {
-      return false;   // Error
-    }
+  if (result != 0) {
+    port = -1;
+  } else {
+    port = ntohs(saddr.sin_port);
   }
-  return true;
+  return port;
 }
 
 
diff --git a/src/XmlRpcSocket.h b/src/XmlRpcSocket.h
index fa7f950..b5d451a 100644
--- a/src/XmlRpcSocket.h
+++ b/src/XmlRpcSocket.h
@@ -1,15 +1,14 @@
 #ifndef _XMLRPCSOCKET_H_
 #define _XMLRPCSOCKET_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+#include <string>
+
 
 namespace XmlRpc {
 
@@ -17,42 +16,55 @@ namespace XmlRpc {
   class XmlRpcSocket {
   public:
 
-    //! Creates a stream (TCP) socket. Returns -1 on failure.
-    static int socket();
+    // On windows, a socket is an unsigned int large enough to hold a ptr
+    // This should match the definition of SOCKET in winsock2.h
+#if defined(_WINDOWS)
+# if defined(_WIN64)
+    typedef unsigned __int64 Socket;
+# else
+    typedef unsigned int Socket;
+# endif
+#else
+    typedef int Socket;
+#endif
 
-    //! Closes a socket.
-    static void close(int socket);
+    //! An invalid socket constant.
+    static const Socket Invalid = (Socket) -1;
 
+    //! Creates a stream (TCP) socket. Returns XmlRpcSocket::Invalid on failure.
+    static Socket socket();
 
-    //! Sets a stream (TCP) socket to perform non-blocking IO. Returns false on failure.
-    static bool setNonBlocking(int socket);
+    //! Closes a socket.
+    static void close(Socket socket);
 
-    //! Read text from the specified socket. Returns false on error.
-    static bool nbRead(int socket, std::string& s, bool *eof);
 
-    //! Write text to the specified socket. Returns false on error.
-    static bool nbWrite(int socket, std::string& s, int *bytesSoFar);
+    //! Sets a stream (TCP) socket to perform non-blocking IO. Returns false on failure.
+    static bool setNonBlocking(Socket socket);
 
 
     // The next four methods are appropriate for servers.
 
     //! Allow the port the specified socket is bound to to be re-bound immediately so 
     //! server re-starts are not delayed. Returns false on failure.
-    static bool setReuseAddr(int socket);
+    static bool setReuseAddr(Socket socket);
 
     //! Bind to a specified port
-    static bool bind(int socket, int port);
+    static bool bind(Socket socket, int port);
 
     //! Set socket in listen mode
-    static bool listen(int socket, int backlog);
+    static bool listen(Socket socket, int backlog);
 
     //! Accept a client connection request
-    static int accept(int socket);
-
+    static Socket accept(Socket socket);
 
     //! Connect a socket to a server (from a client)
-    static bool connect(int socket, std::string& host, int port);
+    static bool connect(Socket socket, std::string& host, int port);
+
+    //! Get the port of a bound socket
+    static int getPort(Socket socket);
 
+    //! Returns true if the last error was not a fatal one (eg, EWOULDBLOCK)
+    static bool nonFatalError();
 
     //! Returns last errno
     static int getError();
diff --git a/src/XmlRpcSource.cpp b/src/XmlRpcSource.cpp
index 99203b0..7f5bc0a 100644
--- a/src/XmlRpcSource.cpp
+++ b/src/XmlRpcSource.cpp
@@ -1,31 +1,200 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcSource.h"
-#include "XmlRpcSocket.h"
 #include "XmlRpcUtil.h"
 
+#if defined(_WINDOWS)
+# include <stdio.h>
+# include <winsock2.h>
+#else
+extern "C" {
+# include <unistd.h>
+# include <stdio.h>
+}
+#endif
+
+#if USE_OPENSSL
+# include <openssl/crypto.h>
+# include <openssl/x509.h>
+# include <openssl/pem.h>
+# include <openssl/ssl.h>
+# include <openssl/err.h>
+#endif
+
 namespace XmlRpc {
 
+  struct SslProxy
+  {
+#if USE_OPENSSL
+    SSL_CTX* _ssl_ctx;
+    SSL_METHOD* _ssl_meth;
+    SSL* _ssl_ssl;
+#endif
+  };
 
-  XmlRpcSource::XmlRpcSource(int fd /*= -1*/, bool deleteOnClose /*= false*/) 
-    : _fd(fd), _deleteOnClose(deleteOnClose), _keepOpen(false)
+
+  XmlRpcSource::XmlRpcSource(XmlRpcSocket::Socket fd /*= -1*/, bool deleteOnClose /*= false*/) 
+    : _fd(fd)
+    , _deleteOnClose(deleteOnClose)
+    , _keepOpen(false)
+    , _sslEnabled(false)
+    , _ssl(0)
   {
   }
 
   XmlRpcSource::~XmlRpcSource()
   {
+    delete _ssl;
   }
 
 
   void
+  XmlRpcSource::setSslEnabled(bool b /*=true*/)
+  {
+#if USE_OPENSSL
+    _sslEnabled = b;
+#endif
+  }
+
+
+  bool
+  XmlRpcSource::doConnect()
+  {
+#if USE_OPENSSL
+    // Perform SSL if needed
+    if (_sslEnabled)
+    {
+      _ssl = new SslProxy;
+
+      SSLeay_add_ssl_algorithms();
+      _ssl->_ssl_meth = SSLv23_client_method();
+      SSL_load_error_strings();
+      _ssl->_ssl_ctx = SSL_CTX_new(_ssl->_ssl_meth);
+      _ssl->_ssl_ssl = SSL_new(_ssl->_ssl_ctx);
+      SSL_set_fd(_ssl->_ssl_ssl, _fd);
+
+      return SSL_connect(_ssl->_ssl_ssl) == 1;
+    }
+#endif
+    return true;
+  }
+
+  // Read available text from the specified socket. Returns false on error.
+  bool 
+  XmlRpcSource::nbRead(std::string& s, bool *eof)
+  {
+    const int READ_SIZE = 4096;   // Number of bytes to attempt to read at a time
+    char readBuf[READ_SIZE];
+
+    bool wouldBlock = false;
+    *eof = false;
+
+    while ( ! wouldBlock && ! *eof)
+    {
+      int n;
+
+#if USE_OPENSSL
+      // Perform SSL if needed
+      if (_ssl && _ssl->_ssl_ssl)
+      {
+        n = SSL_read(_ssl->_ssl_ssl, readBuf, READ_SIZE-1);
+      }
+      else
+#endif
+#if defined(_WINDOWS)
+      n = recv(_fd, readBuf, READ_SIZE-1, 0);
+#else
+      n = read(_fd, readBuf, READ_SIZE-1);
+#endif
+      XmlRpcUtil::log(5, "XmlRpcSocket::nbRead: read/recv returned %d.", n);
+
+      if (n > 0) {
+        readBuf[n] = 0;
+        s.append(readBuf, n);
+      } else if (n == 0) {
+        *eof = true;
+      } else if (XmlRpcSocket::nonFatalError()) {
+        wouldBlock = true;
+      } else {
+        return false;   // Error
+      }
+    }
+    return true;
+  }
+
+
+  // Write text to the socket. Returns false on error.
+  bool 
+  XmlRpcSource::nbWrite(std::string const& s, int *bytesSoFar)
+  {
+    int nToWrite = int(s.length()) - *bytesSoFar;
+    const char *sp = s.c_str() + *bytesSoFar;
+    bool wouldBlock = false;
+
+    while ( nToWrite > 0 && ! wouldBlock )
+    {
+      int n;
+#if USE_OPENSSL
+      // Perform SSL if needed
+      if (_ssl && _ssl->_ssl_ssl)
+      {
+        n = SSL_write(_ssl->_ssl_ssl, sp, nToWrite);
+      }
+      else
+#endif
+#if defined(_WINDOWS)
+      n = send(_fd, sp, nToWrite, 0);
+#else
+      n = write(_fd, sp, nToWrite);
+#endif
+
+      XmlRpcUtil::log(5, "XmlRpcSocket::nbWrite: send/write returned %d.", n);
+
+      if (n > 0)
+      {
+        sp += n;
+        *bytesSoFar += n;
+        nToWrite -= n;
+      }
+      else if (XmlRpcSocket::nonFatalError())
+      {
+        wouldBlock = true;
+      }
+      else
+      {
+        return false;   // Error
+      }
+    }
+    return true;
+  }
+
+  void
   XmlRpcSource::close()
   {
-    if (_fd != -1) {
+#if USE_OPENSSL
+    if (_ssl && _ssl->_ssl_ssl)
+    {
+      SSL_shutdown(_ssl->_ssl_ssl);
+
+      // Should close be called here ? ...
+
+      SSL_free(_ssl->_ssl_ssl);
+      SSL_CTX_free(_ssl->_ssl_ctx);
+
+      delete _ssl;
+      _ssl = 0;
+    }
+#endif
+    if (_fd != -1)
+    {
       XmlRpcUtil::log(2,"XmlRpcSource::close: closing socket %d.", _fd);
       XmlRpcSocket::close(_fd);
-      XmlRpcUtil::log(2,"XmlRpcSource::close: done closing socket %d.", _fd);
       _fd = -1;
     }
-    if (_deleteOnClose) {
+    if (_deleteOnClose)
+    {
       XmlRpcUtil::log(2,"XmlRpcSource::close: deleting this");
       _deleteOnClose = false;
       delete this;
diff --git a/src/XmlRpcSource.h b/src/XmlRpcSource.h
index 135dce4..a124062 100644
--- a/src/XmlRpcSource.h
+++ b/src/XmlRpcSource.h
@@ -2,45 +2,68 @@
 #ifndef _XMLRPCSOURCE_H_
 #define _XMLRPCSOURCE_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
+#include "XmlRpcSocket.h"
+
+
 namespace XmlRpc {
 
+  //! Proxy for Ssl data to avoid including headers here.
+  struct SslProxy;
+
   //! An RPC source represents a file descriptor to monitor
   class XmlRpcSource {
   public:
     //! Constructor
     //!  @param fd The socket file descriptor to monitor.
     //!  @param deleteOnClose If true, the object deletes itself when close is called.
-    XmlRpcSource(int fd = -1, bool deleteOnClose = false);
+    XmlRpcSource(XmlRpcSocket::Socket fd = XmlRpcSocket::Invalid, bool deleteOnClose = false);
 
     //! Destructor
     virtual ~XmlRpcSource();
 
     //! Return the file descriptor being monitored.
-    int getfd() const { return _fd; }
+    XmlRpcSocket::Socket getfd() const { return _fd; }
     //! Specify the file descriptor to monitor.
-    void setfd(int fd) { _fd = fd; }
+    void setfd(XmlRpcSocket::Socket fd) { _fd = fd; }
 
     //! Return whether the file descriptor should be kept open if it is no longer monitored.
     bool getKeepOpen() const { return _keepOpen; }
     //! Specify whether the file descriptor should be kept open if it is no longer monitored.
     void setKeepOpen(bool b=true) { _keepOpen = b; }
 
+    //! Return whether ssl is enabled.
+    bool getSslEnabled() const { return _sslEnabled; }
+    //! Specify whether to enable ssl. Use getSslEnabled() to verify that Ssl is available.
+    void setSslEnabled(bool b=true);
+
     //! Close the owned fd. If deleteOnClose was specified at construction, the object is deleted.
     virtual void close();
 
     //! Return true to continue monitoring this source
     virtual unsigned handleEvent(unsigned eventType) = 0;
 
+  protected:
+
+    // Execution processing helpers
+    virtual bool doConnect();
+
+    //! Read text from the source. Returns false on error.
+    bool nbRead(std::string& s, bool *eof);
+
+    //! Write text to the source. Returns false on error.
+    bool nbWrite(std::string const& s, int *bytesSoFar);
+
   private:
 
-    // Socket. This should really be a SOCKET (an alias for unsigned int*) on windows...
-    int _fd;
+    // Socket. This is an int for linux/unix, and unsigned on win32, and unsigned __int64 on win64.
+    // Casting to int/long/unsigned on win64 is a bad idea.
+    XmlRpcSocket::Socket _fd;
 
     // In the server, a new source (XmlRpcServerConnection) is created
     // for each connected client. When each connection is closed, the
@@ -49,6 +72,12 @@ namespace XmlRpc {
 
     // In the client, keep connections open if you intend to make multiple calls.
     bool _keepOpen;
+
+    // Enable use of SSL
+    bool _sslEnabled;
+
+    // SSL data
+    SslProxy *_ssl;
   };
 } // namespace XmlRpc
 
diff --git a/src/XmlRpcThread.cpp b/src/XmlRpcThread.cpp
new file mode 100644
index 0000000..8a91d87
--- /dev/null
+++ b/src/XmlRpcThread.cpp
@@ -0,0 +1,74 @@
+#if defined(XMLRPC_THREADS)
+
+#include "XmlRpcThread.h"
+
+#if defined(_WINDOWS)
+# define WIN32_LEAN_AND_MEAN
+# include <windows.h>
+# include <process.h>
+#else
+# include <pthread.h>
+#endif
+
+
+using namespace XmlRpc;
+
+
+//! Destructor. Does not perform a join() (ie, the thread may continue to run).
+XmlRpcThread::~XmlRpcThread()
+{
+  if (_pThread)
+  {
+#if defined(_WINDOWS)
+    ::CloseHandle((HANDLE)_pThread);
+#else
+    ::pthread_detach((pthread_t)_pThread);
+#endif
+    _pThread = 0;
+  }
+}
+
+//! Execute the run method of the runnable object in a separate thread.
+//! Returns immediately in the calling thread.
+void
+XmlRpcThread::start()
+{
+  if ( ! _pThread)
+  {
+#if defined(_WINDOWS)
+    unsigned threadID;
+    _pThread = (HANDLE)_beginthreadex(NULL, 0, &runInThread, this, 0, &threadID);
+#else
+    ::pthread_create((pthread_t*) &_pThread, NULL, &runInThread, this);
+#endif
+  }
+}
+
+//! Waits until the thread exits.
+void
+XmlRpcThread::join()
+{
+  if (_pThread)
+  {
+#if defined(_WINDOWS)
+    ::WaitForSingleObject(_pThread, INFINITE);
+    ::CloseHandle(_pThread);
+#else
+    ::pthread_join((pthread_t)_pThread, 0);
+#endif
+    _pThread = 0;
+  }
+}
+
+//! Start the runnable going in a thread
+unsigned int
+XmlRpcThread::runInThread(void* pThread)
+{
+  XmlRpcThread* t = (XmlRpcThread*)pThread;
+  t->getRunnable()->run();
+  return 0;
+}
+
+#endif // XMLRPC_THREADS
+
+
diff --git a/src/XmlRpcThread.h b/src/XmlRpcThread.h
new file mode 100644
index 0000000..6f4ec78
--- /dev/null
+++ b/src/XmlRpcThread.h
@@ -0,0 +1,60 @@
+#ifndef _XMLRPCTHREAD_H_
+#define _XMLRPCTHREAD_H_
+//
+// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+//
+#if defined(_MSC_VER)
+# pragma warning(disable:4786)    // identifier was truncated in debug info
+#endif
+
+namespace XmlRpc {
+
+  //! An abstract class providing an interface for objects that can run in a separate thread.
+  class XmlRpcRunnable {
+  public:
+      //! Code to be executed.
+      virtual void run() = 0;
+  };  // class XmlRpcRunnable
+
+
+  //! A simple platform-independent thread API implemented for posix and windows.
+  class XmlRpcThread {
+  public:
+    //! Construct a thread object. Not usable until setRunnable() has been called.
+    XmlRpcThread() : _runner(0), _pThread(0) {}
+
+    //! Construct a thread object.
+    XmlRpcThread(XmlRpcRunnable* runnable) : _runner(runnable), _pThread(0) {}
+
+    //! Destructor. Does not perform a join() (ie, the thread may continue to run).
+    ~XmlRpcThread();
+
+    //! Execute the run method of the runnable object in a separate thread.
+    //! Returns immediately in the calling thread.
+    void start();
+
+    //! Waits until the thread exits.
+    void join();
+
+    //! Access the runnable
+    XmlRpcRunnable* getRunnable() const { return _runner; }
+
+    //! Set the runnable
+    void setRunnable(XmlRpcRunnable* r) { _runner = r; }
+
+  private:
+
+    //! Start the runnable going in a thread
+    static unsigned int __stdcall runInThread(void* pThread);
+
+    //! Code to be executed
+    XmlRpcRunnable* _runner;
+
+    //! Native thread object
+    void* _pThread;
+
+  };  // class XmlRpcThread
+
+}  // namespace XmlRpc
+
+#endif	//  _XMLRPCTHREAD_H_
diff --git a/src/XmlRpcThreadedServer.cpp b/src/XmlRpcThreadedServer.cpp
new file mode 100644
index 0000000..3f40e49
--- /dev/null
+++ b/src/XmlRpcThreadedServer.cpp
@@ -0,0 +1,27 @@
+#if defined(XMLRPC_THREADS)
+
+#include "XmlRpcThreadedServer.h"
+//#include "XmlRpcServerConnection.h"
+
+
+using namespace XmlRpc;
+
+// executeRequestThreaded:
+//  remove the serverConnection from the dispatcher (but don't close the socket)
+//  push the request onto the request queue 
+//   (acquire the mutex, push_back request, release mutex, incr semaphore)
+//  
+
+// worker::run
+//  while ! stopped
+//    pop a request off the request queue (block on semaphore/decr, acquire mutex, get request, rel)
+//    executeRequest (parse, run, generate response)
+//    notify the serverConnection that the response is available
+//    (the serverConnection needs to add itself back to the dispatcher safely - mutex)
+
+// How do I interrupt the dispatcher if it is waiting in a select call? 
+//  i) Replace select with WaitForMultipleObjects, using WSAEventSelect to associate
+//     each socket with an event object, and adding an additional "signal" event.
+//
+
+#endif // XMLRPC_THREADS
diff --git a/src/XmlRpcThreadedServer.h b/src/XmlRpcThreadedServer.h
new file mode 100644
index 0000000..bedbeec
--- /dev/null
+++ b/src/XmlRpcThreadedServer.h
@@ -0,0 +1,67 @@
+
+#ifndef _XMLRPCTHREADEDSERVER_H_
+#define _XMLRPCTHREADEDSERVER_H_
+//
+// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+//
+#if defined(_MSC_VER)
+# pragma warning(disable:4786)    // identifier was truncated in debug info
+#endif
+
+#ifndef MAKEDEPEND
+# include <map>
+# include <vector>
+#endif
+
+
+#include "XmlRpcMutex.h"
+#include "XmlRpcServer.h"
+#include "XmlRpcThread.h"
+
+
+namespace XmlRpc {
+
+  //! A class to handle multiple simultaneous XML RPC requests
+  class XmlRpcThreadedServer : public XmlRpcServer {
+  public:
+
+    //! Create a server object with a specified number of worker threads.
+    XmlRpcThreadedServer(int nWorkers = 6) : _workers(nWorkers) {}
+
+
+    //! Execute a request
+
+  protected:
+
+    //! Each client request is assigned to one worker to handle.
+    //! Workers are executed on separate threads, and one worker may be
+    //! responsible for dispatching events to multiple client connections.
+    class Worker : XmlRpcRunnable {
+    public:
+      //! Constructor. Executes the run method in a separate thread.
+      Worker() { _thread.setRunnable(this); _thread.start(); }
+
+      //! Implement the Runnable interface
+      void run();
+
+    protected:
+
+      //! The thread this worker is running in.
+      XmlRpcThread _thread;
+
+    };
+
+
+    //! The worker pool
+    std::vector<Worker> _workers;
+
+
+    //! Serialize dispatcher access
+    XmlRpcMutex _mutex;
+
+
+  };  // class XmlRpcThreadedServer
+
+}
+
+#endif  // _XMLRPCTHREADEDSERVER_H_
diff --git a/src/XmlRpcUtil.cpp b/src/XmlRpcUtil.cpp
index 1bd583a..3ff36da 100644
--- a/src/XmlRpcUtil.cpp
+++ b/src/XmlRpcUtil.cpp
@@ -1,13 +1,14 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcUtil.h"
 
-#ifndef MAKEDEPEND
-# include <ctype.h>
-# include <iostream>
-# include <stdarg.h>
-# include <stdio.h>
-# include <string.h>
-#endif
+#include <ctype.h>
+#include <iostream>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
 
 #include "XmlRpc.h"
 
@@ -21,7 +22,7 @@ using namespace XmlRpc;
 #endif
 
 // Version id
-const char XmlRpc::XMLRPC_VERSION[] = "XMLRPC++ 0.7";
+const char XmlRpc::XMLRPC_VERSION[] = "XMLRPC++ 0.8";
 
 // Default log verbosity: 0 for no messages through 5 (writes everything)
 int XmlRpcLogHandler::_verbosity = 0;
@@ -92,88 +93,154 @@ void XmlRpcUtil::error(const char* fmt, ...)
   XmlRpcErrorHandler::getErrorHandler()->error(buf);
 }
 
-
-// Returns contents between <tag> and </tag>, updates offset to char after </tag>
-std::string 
-XmlRpcUtil::parseTag(const char* tag, std::string const& xml, int* offset)
+// Returns true if the tag is parsed. No attributes are parsed.
+// Sets val to the contents between <tag> and </tag>, or an empty string if <tag/> is found.
+// Updates offset to char after </tag>
+bool 
+XmlRpcUtil::parseTag(const char* tag, std::string const& xml, int* offset, std::string &val)
 {
-  if (*offset >= int(xml.length())) return std::string();
-  size_t istart = xml.find(tag, *offset);
-  if (istart == std::string::npos) return std::string();
-  istart += strlen(tag);
-  std::string etag = "</";
-  etag += tag + 1;
-  size_t iend = xml.find(etag, istart);
-  if (iend == std::string::npos) return std::string();
-
-  *offset = int(iend + etag.length());
-  return xml.substr(istart, iend-istart);
+  size_t nxml = xml.length();
+  if (*offset >= int(nxml)) return false;
+
+  // Find <tag (skips over anything preceeding...)
+  std::string stag = "<";
+  stag += tag;
+  size_t istart = xml.find(stag, *offset);
+  if (istart == std::string::npos) return false;
+
+  istart += stag.length();
+
+  // Advance istart past > or />
+  bool lastSlash = false;
+  while (istart < nxml && xml[istart] != '>')
+  {
+    lastSlash = (xml[istart] == '/');
+    ++ istart;
+  }
+
+  if (istart == nxml) return false;
+
+  val.clear();
+  if (lastSlash)  // <tag/>
+  {
+    *offset = int(istart+1);  // 1 after >
+  }
+  else            // Find </tag>
+  {
+    std::string etag = "</";
+    etag += tag;
+    etag += ">";
+    size_t iend = xml.find(etag, istart);
+
+    if (iend == std::string::npos) return false;
+
+    *offset = int(iend + etag.length());
+    ++ istart;
+    val = xml.substr(istart, iend-istart);
+  }
+
+  return true;
 }
 
 
 // Returns true if the tag is found and updates offset to the char after the tag
 bool 
-XmlRpcUtil::findTag(const char* tag, std::string const& xml, int* offset)
+XmlRpcUtil::findTag(const char* tag, std::string const& xml, int* offset, bool* emptyTag)
 {
-  if (*offset >= int(xml.length())) return false;
-  size_t istart = xml.find(tag, *offset);
+  size_t nxml = xml.length();
+  if (*offset >= int(nxml)) return false;
+  std::string stag = "<";
+  stag += tag;
+  size_t istart = xml.find(stag, *offset);
   if (istart == std::string::npos)
     return false;
 
-  *offset = int(istart + strlen(tag));
+  istart += stag.length();
+
+  // Advance istart past > or />, skips attribs
+  bool lastSlash = false;
+  while (istart < nxml && xml[istart] != '>')
+  {
+    lastSlash = (xml[istart] == '/');
+    ++ istart;
+  }
+
+  if (istart == nxml)
+    return false;
+
+  *emptyTag = lastSlash;
+  *offset = int(istart+1);  // char after >
   return true;
 }
 
 
-// Returns true if the tag is found at the specified offset (modulo any whitespace)
-// and updates offset to the char after the tag
+// Returns true if the <tag> or <tag/> is found at the specified offset (modulo any whitespace)
+// and updates offset to the char after the tag. *emptyTag is set to true if <tag/> is found, false otherwise
 bool 
-XmlRpcUtil::nextTagIs(const char* tag, std::string const& xml, int* offset)
+XmlRpcUtil::nextTagIs(const char* tag, std::string const& xml, int* offset, bool *emptyTag)
 {
-  if (*offset >= int(xml.length())) return false;
+  if (*offset >= int(xml.length()))
+    return false;
+
   const char* cp = xml.c_str() + *offset;
   int nc = 0;
-  while (*cp && isspace(*cp)) {
+  while (*cp && isspace(*cp))
+  {
     ++cp;
     ++nc;
   }
 
   int len = int(strlen(tag));
-  if  (*cp && (strncmp(cp, tag, len) == 0)) {
-    *offset += nc + len;
-    return true;
+  if  (*cp == '<' && (strncmp(cp+1, tag, len) == 0))
+  {
+    cp += len + 1;
+    if (*cp == '>') // <tag>
+    {
+      *offset += nc + len + 2;
+      *emptyTag = false;
+      return true;
+    }
+
+    while (*cp && isspace(*cp)) { ++cp; ++nc; }
+
+    if (*cp == '/' && *(cp + 1) == '>') // <tag />
+    {
+      *offset += nc + len + 3;
+      *emptyTag = true;
+      return true;
+    }
   }
   return false;
 }
 
-// Returns the next tag and updates offset to the char after the tag, or empty string
-// if the next non-whitespace character is not '<'
-std::string 
-XmlRpcUtil::getNextTag(std::string const& xml, int* offset)
+
+// Returns true if the next tag found at the specified offset is </tag>
+// and updates offset to the char after the tag.
+bool 
+XmlRpcUtil::nextTagIsEnd(const char* tag, std::string const& xml, int* offset)
 {
-  if (*offset >= int(xml.length())) return std::string();
+  if (*offset >= int(xml.length()))
+    return false;
 
-  size_t pos = *offset;
-  const char* cp = xml.c_str() + pos;
-  while (*cp && isspace(*cp)) {
+  const char* cp = xml.c_str() + *offset;
+  int nc = 0;
+  while (*cp && *cp != '<')
+  {
     ++cp;
-    ++pos;
+    ++nc;
   }
 
-  if (*cp != '<') return std::string();
-
-  std::string s;
-  do {
-    s += *cp;
-    ++pos;
-  } while (*cp++ != '>' && *cp != 0);
+  int len = int(strlen(tag));
+  if  (*cp == '<' && *(cp+1) == '/' && (strncmp(cp+2, tag, len) == 0) && *(cp + len + 2) == '>')
+  {
+    *offset += nc + len + 3;
+    return true;
+  }
 
-  *offset = int(pos);
-  return s;
+  return false;
 }
 
 
-
 // xml encodings (xml-encoded entities are preceded with '&')
 static const char  AMP = '&';
 static const char  rawEntity[] = { '<',   '>',   '&',    '\'',    '\"',    0 };
diff --git a/src/XmlRpcUtil.h b/src/XmlRpcUtil.h
index 8128f72..96b110c 100644
--- a/src/XmlRpcUtil.h
+++ b/src/XmlRpcUtil.h
@@ -1,15 +1,13 @@
 #ifndef _XMLRPCUTIL_H_
 #define _XMLRPCUTIL_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <string>
-#endif
+#include <string>
 
 #if defined(_MSC_VER)
 # define snprintf	    _snprintf
@@ -26,20 +24,26 @@ namespace XmlRpc {
   //! Utilities for XML parsing, encoding, and decoding and message handlers.
   class XmlRpcUtil {
   public:
-    // hokey xml parsing
-    //! Returns contents between <tag> and </tag>, updates offset to char after </tag>
-    static std::string parseTag(const char* tag, std::string const& xml, int* offset);
 
-    //! Returns true if the tag is found and updates offset to the char after the tag
-    static bool findTag(const char* tag, std::string const& xml, int* offset);
+    //! Parses the specified tag. No attributes are parsed, no validation is done.
+    //! Sets val to the contents between <tag> and </tag>, or an empty string if <tag/> is found.
+    //! Returns true if the tag is parsed. Updates offset to char after </tag>
+    static bool parseTag(const char* tag, std::string const& xml, int* offset, std::string &val);
 
-    //! Returns the next tag and updates offset to the char after the tag, or empty string
-    //! if the next non-whitespace character is not '<'
-    static std::string getNextTag(std::string const& xml, int* offset);
+    //! Returns true if the tag is found and updates offset to the char after the tag.
+    //! If the tag is of the form <tag/>, emptyTag is set to true.
+    static bool findTag(const char* tag, std::string const& xml, int* offset, bool* emptyTag);
 
     //! Returns true if the tag is found at the specified offset (modulo any whitespace)
-    //! and updates offset to the char after the tag
-    static bool nextTagIs(const char* tag, std::string const& xml, int* offset);
+    //! and updates offset to the char after the tag. If an empty tag is found (eg,
+    //! <tag/>), true is returned, offset is updated to be after the close of the tag, and
+    //! emptyTag is set to true.
+    static bool nextTagIs(const char* tag, std::string const& xml, int* offset, bool* emptyTag);
+
+    //! Passes over the next tag found at the specified offset is </tag>, 
+    //! offset is updated to be after the close of the tag.
+    //! Will skip over all characters until < is seen.
+    static bool nextTagIsEnd(const char* tag, std::string const& xml, int* offset);
 
 
     //! Convert raw text to encoded xml.
diff --git a/src/XmlRpcValue.cpp b/src/XmlRpcValue.cpp
index 607b7a1..7d23216 100644
--- a/src/XmlRpcValue.cpp
+++ b/src/XmlRpcValue.cpp
@@ -1,47 +1,36 @@
+//
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
+//
 
 #include "XmlRpcValue.h"
 #include "XmlRpcException.h"
 #include "XmlRpcUtil.h"
 #include "base64.h"
 
-#ifndef MAKEDEPEND
-# include <iostream>
-# include <ostream>
-# include <stdlib.h>
-# include <stdio.h>
-#endif
-
-namespace XmlRpc {
+#include <iostream>
+#include <ostream>
+#include <stdlib.h>
+#include <stdio.h>
 
 
-  static const char VALUE_TAG[]     = "<value>";
-  static const char VALUE_ETAG[]    = "</value>";
+namespace XmlRpc {
 
-  static const char BOOLEAN_TAG[]   = "<boolean>";
-  static const char BOOLEAN_ETAG[]  = "</boolean>";
-  static const char DOUBLE_TAG[]    = "<double>";
-  static const char DOUBLE_ETAG[]   = "</double>";
-  static const char INT_TAG[]       = "<int>";
-  static const char I4_TAG[]        = "<i4>";
-  static const char I4_ETAG[]       = "</i4>";
-  static const char STRING_TAG[]    = "<string>";
-  static const char DATETIME_TAG[]  = "<dateTime.iso8601>";
-  static const char DATETIME_ETAG[] = "</dateTime.iso8601>";
-  static const char BASE64_TAG[]    = "<base64>";
-  static const char BASE64_ETAG[]   = "</base64>";
 
-  static const char ARRAY_TAG[]     = "<array>";
-  static const char DATA_TAG[]      = "<data>";
-  static const char DATA_ETAG[]     = "</data>";
-  static const char ARRAY_ETAG[]    = "</array>";
+  static const char VALUE_TAG[]     = "value";
+  static const char BOOLEAN_TAG[]   = "boolean";
+  static const char DOUBLE_TAG[]    = "double";
+  static const char INT_TAG[]       = "int";
+  static const char I4_TAG[]        = "i4";
+  static const char STRING_TAG[]    = "string";
+  static const char DATETIME_TAG[]  = "dateTime.iso8601";
+  static const char BASE64_TAG[]    = "base64";
 
-  static const char STRUCT_TAG[]    = "<struct>";
-  static const char MEMBER_TAG[]    = "<member>";
-  static const char NAME_TAG[]      = "<name>";
-  static const char NAME_ETAG[]     = "</name>";
-  static const char MEMBER_ETAG[]   = "</member>";
-  static const char STRUCT_ETAG[]   = "</struct>";
+  static const char ARRAY_TAG[]     = "array";
+  static const char DATA_TAG[]      = "data";
 
+  static const char STRUCT_TAG[]    = "struct";
+  static const char MEMBER_TAG[]    = "member";
+  static const char NAME_TAG[]      = "name";
 
       
   // Format strings
@@ -66,7 +55,15 @@ namespace XmlRpc {
 
   
   // Type checking
-  void XmlRpcValue::assertTypeOrInvalid(Type t)
+  void XmlRpcValue::assertType(Type t) const
+  {
+    if (_type != t)
+    {
+      throw XmlRpcException("type error");
+    }
+  }
+
+  void XmlRpcValue::assertType(Type t)
   {
     if (_type == TypeInvalid)
     {
@@ -81,7 +78,9 @@ namespace XmlRpc {
       }
     }
     else if (_type != t)
+    {
       throw XmlRpcException("type error");
+    }
   }
 
   void XmlRpcValue::assertArray(int size) const
@@ -209,6 +208,7 @@ namespace XmlRpc {
     return _type == TypeStruct && _value.asStruct->find(name) != _value.asStruct->end();
   }
 
+
   // Set the value from xml. The chars at *offset into valueXml 
   // should be the start of a <value> tag. Destroys any existing value.
   bool XmlRpcValue::fromXml(std::string const& valueXml, int* offset)
@@ -216,41 +216,105 @@ namespace XmlRpc {
     int savedOffset = *offset;
 
     invalidate();
-    if ( ! XmlRpcUtil::nextTagIs(VALUE_TAG, valueXml, offset))
+    bool emptyTag;
+    if ( ! XmlRpcUtil::nextTagIs(VALUE_TAG, valueXml, offset, &emptyTag))
       return false;       // Not a value, offset not updated
 
-	int afterValueOffset = *offset;
-    std::string typeTag = XmlRpcUtil::getNextTag(valueXml, offset);
-    bool result = false;
-    if (typeTag == BOOLEAN_TAG)
-      result = boolFromXml(valueXml, offset);
-    else if (typeTag == I4_TAG || typeTag == INT_TAG)
-      result = intFromXml(valueXml, offset);
-    else if (typeTag == DOUBLE_TAG)
-      result = doubleFromXml(valueXml, offset);
-    else if (typeTag.empty() || typeTag == STRING_TAG)
-      result = stringFromXml(valueXml, offset);
-    else if (typeTag == DATETIME_TAG)
-      result = timeFromXml(valueXml, offset);
-    else if (typeTag == BASE64_TAG)
-      result = binaryFromXml(valueXml, offset);
-    else if (typeTag == ARRAY_TAG)
-      result = arrayFromXml(valueXml, offset);
-    else if (typeTag == STRUCT_TAG)
-      result = structFromXml(valueXml, offset);
-    // Watch for empty/blank strings with no <string>tag
-    else if (typeTag == VALUE_ETAG)
+    // No value? Pretend its an empty string...
+    if (emptyTag)
+    {
+      *this = "";
+      return true;
+    }
+
+    // No type tag? Assume string
+    bool result = true;
+    int valueOffset = *offset;
+    if (XmlRpcUtil::nextTagIsEnd(VALUE_TAG, valueXml, offset))
+    {
+      return stringFromXml(valueXml, &valueOffset);
+    }
+    else if (XmlRpcUtil::nextTagIs(BOOLEAN_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        *this = false;
+      else
+        result = boolFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(BOOLEAN_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(I4_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        *this = 0;
+      else
+        result = intFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(I4_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(INT_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        *this = 0;
+      else
+        result = intFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(INT_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(DOUBLE_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        *this = 0.0;
+      else
+        result = doubleFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(DOUBLE_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(STRING_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        *this = "";
+      else
+        result = stringFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(STRING_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(DATETIME_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        result = false;
+      else
+        result = timeFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(DATETIME_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(BASE64_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        result = binaryFromXml("", 0);
+      else
+        result = binaryFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(BASE64_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(ARRAY_TAG, valueXml, offset, &emptyTag))
     {
-      *offset = afterValueOffset;   // back up & try again
-      result = stringFromXml(valueXml, offset);
+      if (emptyTag)
+        result = false;
+      else
+        result = arrayFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(ARRAY_TAG, valueXml, offset);
+    }
+    else if (XmlRpcUtil::nextTagIs(STRUCT_TAG, valueXml, offset, &emptyTag))
+    {
+      if (emptyTag)
+        result = false;
+      else
+        result = structFromXml(valueXml, offset) && 
+                 XmlRpcUtil::nextTagIsEnd(STRUCT_TAG, valueXml, offset);
     }
 
-    if (result)  // Skip over the </value> tag
-      XmlRpcUtil::findTag(VALUE_ETAG, valueXml, offset);
-    else        // Unrecognized tag after <value>
+    // Unrecognized tag after <value> or no </value>
+    if ( ! result || ! XmlRpcUtil::nextTagIsEnd(VALUE_TAG, valueXml, offset))
+    {
       *offset = savedOffset;
+      return false;
+    }
 
-    return result;
+    return true;
   }
 
   // Encode the Value in xml
@@ -288,12 +352,9 @@ namespace XmlRpc {
 
   std::string XmlRpcValue::boolToXml() const
   {
-    std::string xml = VALUE_TAG;
-    xml += BOOLEAN_TAG;
-    xml += (_value.asBool ? "1" : "0");
-    xml += BOOLEAN_ETAG;
-    xml += VALUE_ETAG;
-    return xml;
+    static std::string booleanTrueXml("<value><boolean>1</boolean></value>");
+    static std::string booleanFalseXml("<value><boolean>0</boolean></value>");
+    return _value.asBool ? booleanTrueXml : booleanFalseXml;
   }
 
   // Int
@@ -314,14 +375,10 @@ namespace XmlRpc {
   std::string XmlRpcValue::intToXml() const
   {
     char buf[256];
-    snprintf(buf, sizeof(buf)-1, "%d", _value.asInt);
+    snprintf(buf, sizeof(buf)-1, "<value><i4>%d</i4></value>", _value.asInt);
     buf[sizeof(buf)-1] = 0;
-    std::string xml = VALUE_TAG;
-    xml += I4_TAG;
-    xml += buf;
-    xml += I4_ETAG;
-    xml += VALUE_ETAG;
-    return xml;
+
+    return std::string(buf);
   }
 
   // Double
@@ -341,16 +398,13 @@ namespace XmlRpc {
 
   std::string XmlRpcValue::doubleToXml() const
   {
-    char buf[256];
-    snprintf(buf, sizeof(buf)-1, getDoubleFormat().c_str(), _value.asDouble);
+    char fmtbuf[256], buf[256];
+    snprintf(fmtbuf, sizeof(fmtbuf)-1, "<value><double>%s</double></value>", getDoubleFormat().c_str());
+    fmtbuf[sizeof(fmtbuf)-1] = 0;
+    snprintf(buf, sizeof(buf)-1, fmtbuf, _value.asDouble);
     buf[sizeof(buf)-1] = 0;
 
-    std::string xml = VALUE_TAG;
-    xml += DOUBLE_TAG;
-    xml += buf;
-    xml += DOUBLE_ETAG;
-    xml += VALUE_ETAG;
-    return xml;
+    return std::string(buf);
   }
 
   // String
@@ -368,12 +422,7 @@ namespace XmlRpc {
 
   std::string XmlRpcValue::stringToXml() const
   {
-    std::string xml = VALUE_TAG;
-    //xml += STRING_TAG; optional
-    xml += XmlRpcUtil::xmlEncode(*_value.asString);
-    //xml += STRING_ETAG;
-    xml += VALUE_ETAG;
-    return xml;
+    return std::string("<value>") + XmlRpcUtil::xmlEncode(*_value.asString) + std::string("</value>");
   }
 
   // DateTime (stored as a struct tm)
@@ -389,6 +438,8 @@ namespace XmlRpc {
     if (sscanf(stime.c_str(),"%4d%2d%2dT%2d:%2d:%2d",&t.tm_year,&t.tm_mon,&t.tm_mday,&t.tm_hour,&t.tm_min,&t.tm_sec) != 6)
       return false;
 
+    t.tm_year -= 1900;    // 	years since 1900
+    t.tm_mon -= 1;        // 	months 0..11
     t.tm_isdst = -1;
     _type = TypeDateTime;
     _value.asTime = new struct tm(t);
@@ -400,16 +451,11 @@ namespace XmlRpc {
   {
     struct tm* t = _value.asTime;
     char buf[20];
-    snprintf(buf, sizeof(buf)-1, "%4d%02d%02dT%02d:%02d:%02d", 
-      t->tm_year,t->tm_mon,t->tm_mday,t->tm_hour,t->tm_min,t->tm_sec);
+    snprintf(buf, sizeof(buf)-1, "%04d%02d%02dT%02d:%02d:%02d", 
+      1900+t->tm_year,1+t->tm_mon,t->tm_mday,t->tm_hour,t->tm_min,t->tm_sec);
     buf[sizeof(buf)-1] = 0;
 
-    std::string xml = VALUE_TAG;
-    xml += DATETIME_TAG;
-    xml += buf;
-    xml += DATETIME_ETAG;
-    xml += VALUE_ETAG;
-    return xml;
+    return std::string("<value><dateTime.iso8601>") + buf + std::string("</dateTime.iso8601></value>");
   }
 
 
@@ -441,16 +487,14 @@ namespace XmlRpc {
     // convert to base64
     std::vector<char> base64data;
     int iostatus = 0;
-	  base64<char> encoder;
+    base64<char> encoder;
     std::back_insert_iterator<std::vector<char> > ins = std::back_inserter(base64data);
-		encoder.put(_value.asBinary->begin(), _value.asBinary->end(), ins, iostatus, base64<>::crlf());
+    encoder.put(_value.asBinary->begin(), _value.asBinary->end(), ins, iostatus, base64<>::crlf());
 
     // Wrap with xml
-    std::string xml = VALUE_TAG;
-    xml += BASE64_TAG;
+    std::string xml = "<value><base64>";
     xml.append(base64data.begin(), base64data.end());
-    xml += BASE64_ETAG;
-    xml += VALUE_ETAG;
+    xml += "</base64></value>";
     return xml;
   }
 
@@ -458,17 +502,22 @@ namespace XmlRpc {
   // Array
   bool XmlRpcValue::arrayFromXml(std::string const& valueXml, int* offset)
   {
-    if ( ! XmlRpcUtil::nextTagIs(DATA_TAG, valueXml, offset))
+    bool emptyTag;
+    if ( ! XmlRpcUtil::nextTagIs(DATA_TAG, valueXml, offset, &emptyTag))
       return false;
 
     _type = TypeArray;
     _value.asArray = new ValueArray;
-    XmlRpcValue v;
-    while (v.fromXml(valueXml, offset))
-      _value.asArray->push_back(v);       // copy...
 
-    // Skip the trailing </data>
-    (void) XmlRpcUtil::nextTagIs(DATA_ETAG, valueXml, offset);
+    if ( ! emptyTag)
+    {
+      XmlRpcValue v;
+      while (v.fromXml(valueXml, offset))
+        _value.asArray->push_back(v);       // copy...
+
+      // Skip the trailing </data>
+      (void) XmlRpcUtil::nextTagIsEnd(DATA_TAG, valueXml, offset);
+    }
     return true;
   }
 
@@ -477,17 +526,13 @@ namespace XmlRpc {
   // array as it is needed rather than glomming up one big string.
   std::string XmlRpcValue::arrayToXml() const
   {
-    std::string xml = VALUE_TAG;
-    xml += ARRAY_TAG;
-    xml += DATA_TAG;
+    std::string xml = "<value><array><data>";
 
     int s = int(_value.asArray->size());
     for (int i=0; i<s; ++i)
        xml += _value.asArray->at(i).toXml();
 
-    xml += DATA_ETAG;
-    xml += ARRAY_ETAG;
-    xml += VALUE_ETAG;
+    xml += "</data></array></value>";
     return xml;
   }
 
@@ -498,20 +543,28 @@ namespace XmlRpc {
     _type = TypeStruct;
     _value.asStruct = new ValueStruct;
 
-    while (XmlRpcUtil::nextTagIs(MEMBER_TAG, valueXml, offset)) {
-      // name
-      const std::string name = XmlRpcUtil::parseTag(NAME_TAG, valueXml, offset);
-      // value
-      XmlRpcValue val(valueXml, offset);
-      if ( ! val.valid()) {
-        invalidate();
-        return false;
-      }
-      const std::pair<const std::string, XmlRpcValue> p(name, val);
-      _value.asStruct->insert(p);
+    std::string name;
+    bool emptyTag;
+    while (XmlRpcUtil::nextTagIs(MEMBER_TAG, valueXml, offset, &emptyTag))
+    {
+      if ( ! emptyTag)
+      {
+        if (XmlRpcUtil::parseTag(NAME_TAG, valueXml, offset, name))
+        {
+          // value
+          XmlRpcValue val(valueXml, offset);
+          if ( ! val.valid()) {
+            invalidate();
+            return false;
+          }
+          const std::pair<const std::string, XmlRpcValue> p(name, val);
+          _value.asStruct->insert(p);
 
-      (void) XmlRpcUtil::nextTagIs(MEMBER_ETAG, valueXml, offset);
+          (void) XmlRpcUtil::nextTagIsEnd(MEMBER_TAG, valueXml, offset);
+        }
+      }
     }
+
     return true;
   }
 
@@ -520,21 +573,19 @@ namespace XmlRpc {
   // as it is needed rather than glomming up one big string.
   std::string XmlRpcValue::structToXml() const
   {
-    std::string xml = VALUE_TAG;
-    xml += STRUCT_TAG;
+    std::string xml = "<value><struct>";
 
     ValueStruct::const_iterator it;
-    for (it=_value.asStruct->begin(); it!=_value.asStruct->end(); ++it) {
-      xml += MEMBER_TAG;
-      xml += NAME_TAG;
+    for (it=_value.asStruct->begin(); it!=_value.asStruct->end(); ++it)
+    {
+      xml += "<member><name>";
       xml += XmlRpcUtil::xmlEncode(it->first);
-      xml += NAME_ETAG;
+      xml += "</name>";
       xml += it->second.toXml();
-      xml += MEMBER_ETAG;
+      xml += "</member>";
     }
 
-    xml += STRUCT_ETAG;
-    xml += VALUE_ETAG;
+    xml += "</struct></value>";
     return xml;
   }
 
diff --git a/src/XmlRpcValue.h b/src/XmlRpcValue.h
index 7535d4a..b3529ad 100644
--- a/src/XmlRpcValue.h
+++ b/src/XmlRpcValue.h
@@ -2,27 +2,29 @@
 #ifndef _XMLRPCVALUE_H_
 #define _XMLRPCVALUE_H_
 //
-// XmlRpc++ Copyright (c) 2002-2003 by Chris Morley
+// XmlRpc++ Copyright (c) 2002-2008 by Chris Morley
 //
+
 #if defined(_MSC_VER)
 # pragma warning(disable:4786)    // identifier was truncated in debug info
 #endif
 
-#ifndef MAKEDEPEND
-# include <map>
-# include <string>
-# include <vector>
-# include <time.h>
-#endif
+#include <map>
+#include <string>
+#include <vector>
+#include <time.h>
 
 namespace XmlRpc {
 
-  //! RPC method arguments and results are represented by Values
+  //! A class to represent RPC arguments and results.
+  //! Each XmlRpcValue object contains a typed value,
+  //! where the type is determined by the initial value
+  //! assigned to the object.
   //   should probably refcount them...
   class XmlRpcValue {
   public:
 
-
+    //! XmlRpcValue types
     enum Type {
       TypeInvalid,
       TypeBoolean,
@@ -41,22 +43,36 @@ namespace XmlRpc {
     typedef std::map<std::string, XmlRpcValue> ValueStruct;
 
 
-    //! Constructors
+    // Constructors
+    //! Construct an empty XmlRpcValue
     XmlRpcValue() : _type(TypeInvalid) { _value.asBinary = 0; }
+
+    //! Construct an XmlRpcValue with a bool value
     XmlRpcValue(bool value) : _type(TypeBoolean) { _value.asBool = value; }
+
+    //! Construct an XmlRpcValue with an int value
     XmlRpcValue(int value)  : _type(TypeInt) { _value.asInt = value; }
+
+    //! Construct an XmlRpcValue with a double value
     XmlRpcValue(double value)  : _type(TypeDouble) { _value.asDouble = value; }
 
+    //! Construct an XmlRpcValue with a string value
     XmlRpcValue(std::string const& value) : _type(TypeString) 
     { _value.asString = new std::string(value); }
 
+    //! Construct an XmlRpcValue with a string value.
+    //! @param value A null-terminated (C) string.
     XmlRpcValue(const char* value)  : _type(TypeString)
     { _value.asString = new std::string(value); }
 
+    //! Construct an XmlRpcValue with a date/time value.
+    //! @param value A pointer to a struct tm (see localtime)
     XmlRpcValue(struct tm* value)  : _type(TypeDateTime) 
     { _value.asTime = new struct tm(*value); }
 
-
+    //! Construct an XmlRpcValue with a binary data value
+    //! @param value A pointer to data
+    //! @param nBytes The length of the data pointed to, in bytes
     XmlRpcValue(void* value, int nBytes)  : _type(TypeBase64)
     {
       _value.asBinary = new BinaryData((char*)value, ((char*)value)+nBytes);
@@ -66,7 +82,7 @@ namespace XmlRpc {
     XmlRpcValue(std::string const& xml, int* offset) : _type(TypeInvalid)
     { if ( ! fromXml(xml,offset)) _type = TypeInvalid; }
 
-    //! Copy
+    //! Copy constructor
     XmlRpcValue(XmlRpcValue const& rhs) : _type(TypeInvalid) { *this = rhs; }
 
     //! Destructor (make virtual if you want to subclass)
@@ -76,27 +92,88 @@ namespace XmlRpc {
     void clear() { invalidate(); }
 
     // Operators
+    //! Assignment from one XmlRpcValue to this one.
+    //! @param rhs The value in rhs is copied to this value.
     XmlRpcValue& operator=(XmlRpcValue const& rhs);
+
+    //! Assign a bool to this XmlRpcValue.
+    XmlRpcValue& operator=(bool const& rhs) { return operator=(XmlRpcValue(rhs)); }
+
+    //! Assign an int to this XmlRpcValue.
     XmlRpcValue& operator=(int const& rhs) { return operator=(XmlRpcValue(rhs)); }
+
+    //! Assign a double to this XmlRpcValue.
     XmlRpcValue& operator=(double const& rhs) { return operator=(XmlRpcValue(rhs)); }
+
+    //! Assign a string to this XmlRpcValue.
     XmlRpcValue& operator=(const char* rhs) { return operator=(XmlRpcValue(std::string(rhs))); }
 
+    //! Tests two XmlRpcValues for equality
     bool operator==(XmlRpcValue const& other) const;
-    bool operator!=(XmlRpcValue const& other) const;
 
-    operator bool&()          { assertTypeOrInvalid(TypeBoolean); return _value.asBool; }
-    operator int&()           { assertTypeOrInvalid(TypeInt); return _value.asInt; }
-    operator double&()        { assertTypeOrInvalid(TypeDouble); return _value.asDouble; }
-    operator std::string&()   { assertTypeOrInvalid(TypeString); return *_value.asString; }
-    operator BinaryData&()    { assertTypeOrInvalid(TypeBase64); return *_value.asBinary; }
-    operator struct tm&()     { assertTypeOrInvalid(TypeDateTime); return *_value.asTime; }
+    //! Tests two XmlRpcValues for inequality
+    bool operator!=(XmlRpcValue const& other) const;
 
+    //! Treat an XmlRpcValue as a bool.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeBoolean.
+    operator bool&()          { assertType(TypeBoolean); return _value.asBool; }
+    operator bool() const     { assertType(TypeBoolean); return _value.asBool; }
+
+    //! Treat an XmlRpcValue as an int.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeInt.
+    operator int&()           { assertType(TypeInt); return _value.asInt; }
+    operator int() const      { assertType(TypeInt); return _value.asInt; }
+
+    //! Treat an XmlRpcValue as a double.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeDouble.
+    operator double&()        { assertType(TypeDouble); return _value.asDouble; }
+    operator double() const   { assertType(TypeDouble); return _value.asDouble; }
+
+    //! Treat an XmlRpcValue as a string.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeString.
+    operator std::string&()             { assertType(TypeString); return *_value.asString; }
+    operator std::string const&() const { assertType(TypeString); return *_value.asString; }
+
+    //! Access the BinaryData value.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeBase64.
+    operator BinaryData&()              { assertType(TypeBase64); return *_value.asBinary; }
+    operator BinaryData const&() const  { assertType(TypeBase64); return *_value.asBinary; }
+
+    //! Access the DateTime value.
+    //! Throws XmlRpcException if the value is initialized to 
+    //! a type that is not TypeDateTime.
+    operator struct tm&()               { assertType(TypeDateTime); return *_value.asTime; }
+    operator struct tm const&() const   { assertType(TypeDateTime); return *_value.asTime; }
+
+
+    //! Const array value accessor.
+    //! Access the ith value of the array.
+    //! Throws XmlRpcException if the value is not an array or if the index i is
+    //! not a valid index for the array.
     XmlRpcValue const& operator[](int i) const { assertArray(i+1); return _value.asArray->at(i); }
+
+    //! Array value accessor.
+    //! Access the ith value of the array, growing the array if necessary.
+    //! Throws XmlRpcException if the value is not an array.
     XmlRpcValue& operator[](int i)             { assertArray(i+1); return _value.asArray->at(i); }
 
+    //! Struct entry accessor.
+    //! Returns the value associated with the given entry, creating one if necessary.
     XmlRpcValue& operator[](std::string const& k) { assertStruct(); return (*_value.asStruct)[k]; }
+
+    //! Struct entry accessor.
+    //! Returns the value associated with the given entry, creating one if necessary.
     XmlRpcValue& operator[](const char* k) { assertStruct(); std::string s(k); return (*_value.asStruct)[s]; }
 
+    //! Access the struct value map.
+    //! Can be used to iterate over the entries in the map to find all defined entries.
+    operator ValueStruct const&() { assertStruct(); return *_value.asStruct; } 
+
     // Accessors
     //! Return true if the value has been set to something.
     bool valid() const { return _type != TypeInvalid; }
@@ -134,8 +211,9 @@ namespace XmlRpc {
     // Clean up
     void invalidate();
 
-    // Type checking
-    void assertTypeOrInvalid(Type t);
+    // Type checking. Non-const versions coerce to the desired type if currently un-typed.
+    void assertType(Type t) const;
+    void assertType(Type t);
     void assertArray(int size) const;
     void assertArray(int size);
     void assertStruct();
diff --git a/src/base64.h b/src/base64.h
index 519ee0f..f13c6cd 100644
--- a/src/base64.h
+++ b/src/base64.h
@@ -9,9 +9,7 @@
 #if !defined(__BASE64_H_INCLUDED__)
 #define __BASE64_H_INCLUDED__ 1
 
-#ifndef MAKEDEPEND
-# include <iterator>
-#endif
+#include <iterator>
 
 static
 int _base64Chars[]= {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
diff --git a/test/.cvsignore b/test/.cvsignore
index e284118..e351d51 100644
--- a/test/.cvsignore
+++ b/test/.cvsignore
@@ -1,7 +1,10 @@
 Debug
 Release
 doc
+x64
 *.ncb
 *.opt
 *.plg
 *.suo
+*.vcproj.*
+
diff --git a/test/FileClient.cpp b/test/FileClient.cpp
index 81d9f3e..d97bc6a 100644
--- a/test/FileClient.cpp
+++ b/test/FileClient.cpp
@@ -12,10 +12,64 @@ using namespace XmlRpc;
 
 std::string parseRequest(std::string const& xml, XmlRpcValue& params);
 
+//#define TEST_RESPONSE_PARSING 1 // To test parsing of server response xml from a file
+
+class TestParseResponseClient : public XmlRpcClient
+{
+public:
+  TestParseResponseClient(std::string const& file)
+    : XmlRpcClient("", 0)
+    , _file(file)
+  {}
+
+  // Make parseResponse public
+  virtual bool parseResponse(XmlRpcValue& result)
+  {
+    std::ifstream infile(_file.c_str());
+    if (infile.fail())
+    {
+      std::cerr << "Could not open file '" << _file << "'.\n";
+      return false;
+    }
+
+    infile.seekg(0L, std::ios::end);
+    std::streampos nb = infile.tellg();
+    infile.clear();
+    infile.seekg(0L);
+    char* b = new char[size_t(nb)+1];
+    infile.read(b, nb);
+    b[nb] = 0;
+    _header = b;
+    delete [] b;
+
+    return XmlRpcClient::parseHeader() && XmlRpcClient::parseResponse(result);
+  }
+
+private:
+  std::string _file;
+};
+
 
 int main(int argc, char* argv[])
 {
-  if (argc != 4) {
+#if TEST_RESPONSE_PARSING
+  if (argc != 2)
+  {
+    std::cerr << "Usage: FileClient responseXmlFile\n";
+    return -1;
+  }
+  TestParseResponseClient c(argv[1]);
+  XmlRpcValue result;
+  std::cout << "Reading response xml from " << argv[1] << std::endl;
+  if (c.parseResponse(result))
+    std::cout << result << "\n\n";
+  else
+    std::cout << "Error parsing response.\n\n";
+
+#else
+
+  if (argc != 4)
+  {
     std::cerr << "Usage: FileClient serverHost serverPort requestXmlFile\n";
     return -1;
   }
@@ -33,10 +87,10 @@ int main(int argc, char* argv[])
 
   // Suck in the file. This is a one-liner in good compilers (which vc++ 6 is not)...
   infile.seekg(0L, std::ios::end);
-  long nb = infile.tellg();
+  std::streampos nb = infile.tellg();
   infile.clear();
   infile.seekg(0L);
-  char* b = new char[nb+1];
+  char* b = new char[size_t(nb)+1];
   infile.read(b, nb);
   b[nb] = 0;
 
@@ -44,6 +98,7 @@ int main(int argc, char* argv[])
 
   // Find the methodName and parse the params
   std::string s(b);
+  delete [] b;
   XmlRpcValue params;
   std::string name = parseRequest(s, params);
 
@@ -52,7 +107,8 @@ int main(int argc, char* argv[])
     return -1;
   }
 
-  for (;;) {
+  for (;;)
+  {
     XmlRpcValue result;
     std::cout << "Calling " << name << std::endl;
     if (c.execute(name.c_str(), params, result))
@@ -64,6 +120,7 @@ int main(int argc, char* argv[])
     std::cin >> ans;
     if (ans != "" && ans != "y") break;
   }
+#endif
 
   return 0;
 }
@@ -73,35 +130,44 @@ int main(int argc, char* argv[])
 std::string
 parseRequest(std::string const& xml, XmlRpcValue& params)
 {
-  const char METHODNAME_TAG[] = "<methodName>";
-  const char PARAMS_TAG[] = "<params>";
-  const char PARAMS_ETAG[] = "</params>";
-  const char PARAM_TAG[] = "<param>";
-  const char PARAM_ETAG[] = "</param>";
+  const char METHODNAME_TAG[] = "methodName";
+  const char PARAMS_TAG[] = "params";
+  const char PARAM_TAG[] = "param";
 
   int offset = 0;   // Number of chars parsed from the request
-
-  std::string methodName = XmlRpcUtil::parseTag(METHODNAME_TAG, xml, &offset);
+  bool emptyTag;    // True if the <tag/> format was found
+  std::string methodName;
+  (void) XmlRpcUtil::parseTag(METHODNAME_TAG, xml, &offset, methodName);
   XmlRpcUtil::log(3, "XmlRpcServerConnection::parseRequest: parsed methodName %s.", methodName.c_str()); 
 
-  if (! methodName.empty() && XmlRpcUtil::findTag(PARAMS_TAG, xml, &offset))
+  if ( ! methodName.empty() && XmlRpcUtil::findTag(PARAMS_TAG, xml, &offset, &emptyTag))
   {
     int nArgs = 0;
-    while (XmlRpcUtil::nextTagIs(PARAM_TAG, xml, &offset)) {
-      std::cout << "Parsing arg " << nArgs+1 << std::endl;
-      XmlRpcValue arg(xml, &offset);
-      if ( ! arg.valid()) {
-        std::cerr << "Invalid argument\n";
-        return std::string();
+    while (XmlRpcUtil::nextTagIs(PARAM_TAG, xml, &offset, &emptyTag))
+    {
+      if ( ! emptyTag)
+      {
+        std::cout << "Parsing arg " << nArgs+1 << std::endl;
+        XmlRpcValue arg(xml, &offset);
+        if ( ! arg.valid()) {
+          std::cerr << "Invalid argument\n";
+          return std::string();
+        }
+        (void) XmlRpcUtil::nextTagIsEnd(PARAM_TAG, xml, &offset);
+
+        std::cout << "Adding arg " << nArgs+1 << " to params array." << std::endl;
+        params[nArgs++] = arg;
+      }
+      else
+      {
+        std::cout << "Arg " << nArgs+1 << " is empty." << std::endl;
+        params[nArgs++] = "";
       }
-      std::cout << "Adding arg " << nArgs+1 << " to params array." << std::endl;
-      params[nArgs++] = arg;
-      (void) XmlRpcUtil::nextTagIs(PARAM_ETAG, xml, &offset);
     }
 
     XmlRpcUtil::log(3, "XmlRpcServerConnection::parseRequest: parsed %d params.", nArgs); 
 
-    (void) XmlRpcUtil::nextTagIs(PARAMS_ETAG, xml, &offset);
+    (void) XmlRpcUtil::nextTagIsEnd(PARAMS_TAG, xml, &offset);
   }
 
   return methodName;
diff --git a/test/FileClient.vcproj b/test/FileClient.vcproj
index 440d47e..cacab6f 100644
--- a/test/FileClient.vcproj
+++ b/test/FileClient.vcproj
@@ -1,158 +1,443 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="FileClient"
-	ProjectGUID="{C3B49855-CD45-448E-991E-3E4C9B02F465}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE,_WINDOWS"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/FileClient.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/FileClient.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/FileClient.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/FileClient.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/FileClient.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/FileClient.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/FileClient.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE,_WINDOWS"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/FileClient.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/FileClient.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/FileClient.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/FileClient.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/FileClient.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/FileClient.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/FileClient.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\FileClient.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="FileClient"
+	ProjectGUID="{23BC9C08-2008-4636-B6D0-8C30F97FD5C5}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\FileClient"
+			ConfigurationType="1"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(IntDir)/FileClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/FileClient.pch"
+				AssemblerListingLocation="$(IntDir)\"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="$(IntDir)\"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/FileClient.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/FileClient.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(IntDir)/FileClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\FileClient"
+			ConfigurationType="1"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(IntDir)/FileClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/FileClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)\"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/FileClient.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/FileClient.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(IntDir)/FileClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\FileClient"
+			ConfigurationType="1"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(IntDir)/FileClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/FileClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)\"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/FileClient.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/FileClient.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(IntDir)/FileClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\FileClient"
+			ConfigurationType="1"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(IntDir)/FileClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/FileClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/FileClient.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/FileClient.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(IntDir)/FileClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="FileClient.cpp"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/HelloClient.cpp b/test/HelloClient.cpp
index f11c094..91c5724 100644
--- a/test/HelloClient.cpp
+++ b/test/HelloClient.cpp
@@ -58,7 +58,7 @@ int main(int argc, char* argv[])
   if (c.execute("NoSuchMethod", numbers, result))
     std::cout << "NoSuchMethod call: fault: " << c.isFault() << ", result = " << result << std::endl;
   else
-    std::cout << "Error calling 'Sum'\n";
+    std::cout << "Error calling 'NoSuchMethod'\n";
 
   // Test the multicall method. It accepts one arg, an array of structs
   XmlRpcValue multicall;
diff --git a/test/HelloClient.vcproj b/test/HelloClient.vcproj
index dfd12da..14bc2e7 100644
--- a/test/HelloClient.vcproj
+++ b/test/HelloClient.vcproj
@@ -1,158 +1,439 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="HelloClient"
-	ProjectGUID="{F6860B2F-0F3B-445E-92F2-6DF3D36C90F0}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/HelloClient.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/HelloClient.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/HelloClient.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/HelloClient.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/HelloClient.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/HelloClient.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/HelloClient.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/HelloClient.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/HelloClient.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386 &quot;c:\home\cmm\dev\sourceforge\xmlrpc++\Debug\xmlrpc.lib&quot;"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/HelloClient.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/HelloClient.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/HelloClient.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/HelloClient.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/HelloClient.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\HelloClient.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="HelloClient"
+	ProjectGUID="{4C54D408-AA45-4674-B207-06B0847C7C6B}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\HelloClient"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(IntDir)/HelloClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/HelloClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloClient.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/HelloClient.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\HelloClient"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/HelloClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/HelloClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloClient.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/HelloClient.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\HelloClient"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(IntDir)/HelloClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/HelloClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloClient.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/HelloClient.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\HelloClient"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/HelloClient.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/HelloClient.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloClient.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/HelloClient.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloClient.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="HelloClient.cpp"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/HelloServer.vcproj b/test/HelloServer.vcproj
index 2ff2cf8..c3b4a08 100644
--- a/test/HelloServer.vcproj
+++ b/test/HelloServer.vcproj
@@ -1,158 +1,439 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="HelloServer"
-	ProjectGUID="{08C4FFA8-A9E5-4EEA-9703-53C293C2F724}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/HelloServer.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/HelloServer.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/HelloServer.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/HelloServer.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/HelloServer.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/HelloServer.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/HelloServer.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/HelloServer.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/HelloServer.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/HelloServer.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/HelloServer.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/HelloServer.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/HelloServer.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/HelloServer.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\HelloServer.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="HelloServer"
+	ProjectGUID="{A85172E1-A2FA-4A45-8242-15CD57FFAC39}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\HelloServer"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/HelloServer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/HelloServer.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloServer.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/HelloServer.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloServer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\HelloServer"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/HelloServer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/HelloServer.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloServer.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/HelloServer.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloServer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\HelloServer"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/HelloServer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/HelloServer.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloServer.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/HelloServer.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloServer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\HelloServer"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/HelloServer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/HelloServer.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/HelloServer.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/HelloServer.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/HelloServer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="HelloServer.cpp"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/Makefile b/test/Makefile
index a539d74..8067ee3 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -7,7 +7,7 @@ DEBUG		= -g
 GCCWARN		= -Wall -Wstrict-prototypes
 CXXFLAGS	= $(DEBUG) $(GCCWARN) $(OPTIMIZE) $(INCLUDES)
 
-LIB		= ../libXmlRpc.a
+LIB		= ../libXmlRpc.a -lssl
 
 # Add your system-dependent network libs here
 # Solaris: -lsocket -lnsl
@@ -15,7 +15,7 @@ SYSTEMLIBS	=
 
 LDLIBS		= $(SYSTEMLIBS) $(LIB)
 
-TESTS		= HelloClient HelloServer TestBase64Client TestBase64Server TestValues TestXml Validator
+TESTS		= HelloClient HelloServer TestBase64Client TestBase64Server TestValues TestXml Validator TestEGroupwareSSLClient
 
 all:		$(TESTS)
 
diff --git a/test/TestBase64Client.cpp b/test/TestBase64Client.cpp
index de95438..64bb3e8 100644
--- a/test/TestBase64Client.cpp
+++ b/test/TestBase64Client.cpp
@@ -14,7 +14,8 @@ using namespace XmlRpc;
 
 int main(int argc, char* argv[])
 {
-  if (argc != 4) {
+  if (argc != 4)
+  {
     std::cerr << "Usage: TestBase64Client serverHost serverPort outputFile\n";
     return -1;
   }
@@ -26,15 +27,22 @@ int main(int argc, char* argv[])
   XmlRpcValue noArgs, result;
   if (c.execute("TestBase64", noArgs, result))
   {
-    const XmlRpcValue::BinaryData& data = result;
-    std::ofstream outfile(argv[3], std::ios::binary | std::ios::trunc);
-    if (outfile.fail())
-      std::cerr << "Error opening " << argv[3] << " for output.\n";
+    if (c.isFault())
+    {
+      std::cout << "The server returned a fault: " << result << std::endl;
+    }
     else
     {
-      int n = int(data.size());
-      for (int i=0; i<n; ++i)
-        outfile << data[i];
+      const XmlRpcValue::BinaryData& data = result;
+      std::ofstream outfile(argv[3], std::ios::binary | std::ios::trunc);
+      if (outfile.fail())
+        std::cerr << "Error opening " << argv[3] << " for output.\n";
+      else
+      {
+        int n = int(data.size());
+        for (int i=0; i<n; ++i)
+          outfile << data[i];
+      }
     }
   }
   else
diff --git a/test/TestBase64Client.vcproj b/test/TestBase64Client.vcproj
index 1f6b47e..843a20c 100644
--- a/test/TestBase64Client.vcproj
+++ b/test/TestBase64Client.vcproj
@@ -1,158 +1,439 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="TestBase64Client"
-	ProjectGUID="{1E8B725B-E898-494C-84C6-DB77EF38E6CB}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE,_WINDOWS"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/TestBase64Client.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/TestBase64Client.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/TestBase64Client.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/TestBase64Client.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/TestBase64Client.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/TestBase64Client.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/TestBase64Client.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE,_WINDOWS"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/TestBase64Client.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/TestBase64Client.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/TestBase64Client.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/TestBase64Client.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/TestBase64Client.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/TestBase64Client.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/TestBase64Client.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\TestBase64Client.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="TestBase64Client"
+	ProjectGUID="{52DAEC4B-1515-4FD0-9BEB-3AA60714AE16}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\Base64Client"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestBase64Client.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Client.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Client.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Client.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Client.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\Base64Client"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(IntDir)/TestBase64Client.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Client.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Client.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Client.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Client.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Base64Client"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestBase64Client.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Client.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Client.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Client.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Client.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Base64Client"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestBase64Client.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Client.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Client.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Client.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Client.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="TestBase64Client.cpp"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/TestBase64Server.cpp b/test/TestBase64Server.cpp
index 7cb4a63..d15888e 100644
--- a/test/TestBase64Server.cpp
+++ b/test/TestBase64Server.cpp
@@ -9,7 +9,11 @@
 #include <fstream>
 #include <algorithm>
 #include <stdlib.h>
+#include <direct.h> // getcwd
 
+#if defined(_MSC_VER)
+# define getcwd _getcwd
+#endif
 
 #include "XmlRpc.h"
 using namespace XmlRpc;
@@ -26,21 +30,38 @@ public:
 
   void execute(XmlRpcValue& params, XmlRpcValue& result)
   {
+    //std::cout << "Attempting to open pngnow.png" << std::endl;
     std::ifstream infile("pngnow.png", std::ios::binary);
     if (infile.fail())
+    {
+      //std::cout << "Attempting to open ../pngnow.png" << std::endl;
+      infile.clear();
       infile.open("../pngnow.png", std::ios::binary);
+    }
     if (infile.fail())
-      result = "Could not open file pngnow.png";
-    else {
-
-      XmlRpcValue::BinaryData& data = result;
-      int n = 0;
-      for (;; ++n) {
-        char c = infile.get();
-        if (infile.eof()) break;
-        data.push_back(c);
+    {
+      //std::cout << "Attempting to open test/pngnow.png" << std::endl;
+      infile.clear();
+      infile.open("test/pngnow.png", std::ios::binary);
+    }
+    if (infile.fail())
+    {
+      char pwd[2000];
+      getcwd(pwd, sizeof(pwd));
+      throw XmlRpcException(std::string("Could not open file pngnow.png, pwd is ") + pwd);
+    }
+
+    // Coerce result type to be binary data
+    XmlRpcValue::BinaryData& data = result;
+    for (int n = 0; ; ++n)
+    {
+      char c = infile.get();
+      if (infile.eof())
+      {
+        std::cerr << "Read " << n << " bytes from pngnow.png\n";
+        break;
       }
-      std::cerr << "Read " << n << " bytes from pngnow.png\n";
+      data.push_back(c);
     }
   }
 } TestBase64(&s);    // This constructor registers the method with the server
diff --git a/test/TestBase64Server.vcproj b/test/TestBase64Server.vcproj
index 4226656..95a9e58 100644
--- a/test/TestBase64Server.vcproj
+++ b/test/TestBase64Server.vcproj
@@ -1,158 +1,439 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="TestBase64Server"
-	ProjectGUID="{D3107CC6-6300-47DE-B183-255B75CFE85A}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE,_WINDOWS"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/TestBase64Server.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/TestBase64Server.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/TestBase64Server.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/TestBase64Server.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/TestBase64Server.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/TestBase64Server.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/TestBase64Server.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE,_WINDOWS"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/TestBase64Server.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/TestBase64Server.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/TestBase64Server.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/TestBase64Server.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/TestBase64Server.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/TestBase64Server.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/TestBase64Server.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\TestBase64Server.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="TestBase64Server"
+	ProjectGUID="{6D30BA7A-634B-4A2E-8076-015B1EE325A3}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\Base64Server"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestBase64Server.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Server.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Server.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Server.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Server.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\Base64Server"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestBase64Server.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Server.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Server.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Server.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Server.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Base64Server"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestBase64Server.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Server.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Server.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Server.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Server.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Base64Server"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestBase64Server.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestBase64Server.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib Ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestBase64Server.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestBase64Server.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestBase64Server.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="TestBase64Server.cpp"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/TestEGroupwareSSLClient.cpp b/test/TestEGroupwareSSLClient.cpp
new file mode 100644
index 0000000..b80beba
--- /dev/null
+++ b/test/TestEGroupwareSSLClient.cpp
@@ -0,0 +1,65 @@
+#include "XmlRpc.h"
+#include <iostream>
+
+using namespace XmlRpc;
+using namespace std;
+
+int main ( int argc, char *argv[]) {
+	XmlRpc::setVerbosity(3);
+
+	if (argc != 5) {
+		cout << "eGroupware SSL Client Test\n\n";
+		cout << "usage: " << argv[0] << " host url user password\n";
+		cout << "example: " << argv[0] << " www.egroupware.org \"/egroupware/xmlrpc.php\" demo guest\n";
+		exit (0);
+	}
+	XmlRpcClient client (argv[1], 443, argv[2], true);
+
+	XmlRpcValue result;
+	XmlRpcValue params;
+	params["username"] = argv[3];
+	params["password"] = argv[4];
+	if (!client.execute ("system.login", params, result)) {
+		cout << "Failed.\n";
+		return 0;
+	} else {
+		cout << result << "\n";
+	}
+	string sessionid = string(result["sessionid"]);
+	string kp3 = string(result["kp3"]);
+/*
+	XmlRpcClient authClient (argv[1], 443, sessionid.c_str(), kp3.c_str(), argv[2], true);
+	XmlRpcValue calParam;
+	XmlRpcValue calResult;
+
+	calParam["syear"] = "2001";
+	calParam["smonth"] = "03";
+	calParam["sday"] = "01";
+	calParam["eyear"] = "2005";
+	calParam["emonth"] = "04";
+	calParam["eday"] = "25";
+
+	if (!authClient.execute("calendar.bocalendar.search", calParam, calResult)) {
+		cout << "No calendar events\n";
+	} else {
+		cout << calResult << "\n";
+	}
+*/
+
+	XmlRpcValue logoutParam;
+	XmlRpcValue logoutResult;
+	XmlRpcClient client_logout (argv[1], 443, argv[2], true);
+
+	logoutParam["sessionid"] = sessionid;
+	logoutParam["kp3"] = kp3;
+
+	if (!client_logout.execute("system.logout", logoutParam, logoutResult)) {
+		cout << "failed to logout\n";
+	} else {
+		// params['GOODBYE'] == 'XOXO'
+		cout << logoutResult << "\n";
+	}
+
+	return 1;
+}
+
diff --git a/test/TestValues.vcproj b/test/TestValues.vcproj
index 1083faf..4d1a3af 100644
--- a/test/TestValues.vcproj
+++ b/test/TestValues.vcproj
@@ -1,156 +1,435 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="TestValues"
-	ProjectGUID="{6181BBE3-DA50-4EEE-8D52-1F4245A1D603}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				UsePrecompiledHeader="2"
-				PrecompiledHeaderFile=".\Release/TestValues.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /YX&quot;StdAfx.h&quot; /Fp&quot;.\Release/TestValues.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd /TP"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/TestValues.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				ProgramDatabaseFile=".\Release/TestValues.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/TestValues.exe&quot; /INCREMENTAL:NO odbc32.lib odbccp32.lib /PDB:&quot;.\Release/TestValues.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/TestValues.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE,_WINDOWS"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/TestValues.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/TestValues.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/TestValues.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/TestValues.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/TestValues.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/TestValues.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/TestValues.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\TestValues.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="TestValues"
+	ProjectGUID="{BD4A7058-C9E4-4965-93C5-DED4E4737631}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\TestValues"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestValues.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestValues.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestValues.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Release"
+				ProgramDatabaseFile="$(OutDir)/TestValues.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestValues.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\TestValues"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestValues.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestValues.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestValues.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Release"
+				ProgramDatabaseFile="$(OutDir)/TestValues.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestValues.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\TestValues"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestValues.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestValues.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestValues.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestValues.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestValues.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\TestValues"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestValues.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestValues.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				BrowseInformation="1"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestValues.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestValues.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestValues.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="TestValuesWin32.cpp"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/TestValuesWin32.cpp b/test/TestValuesWin32.cpp
index f4cdafd..79f48f2 100644
--- a/test/TestValuesWin32.cpp
+++ b/test/TestValuesWin32.cpp
@@ -32,6 +32,13 @@ void testBoolean()
     assert( ! false);
   else
     assert(false);
+
+  XmlRpcValue foo;
+  foo = true;
+  assert(foo.getType() == XmlRpcValue::TypeBoolean);
+
+  const XmlRpcValue cfoo = true;
+  assert(cfoo);
 }
 
 // Int
@@ -81,7 +88,17 @@ void testString()
   offset = 0;
   XmlRpcValue emptyStringVal1(emptyStringXml, &offset);
   XmlRpcValue emptyStringVal2("");
-  assert(emptyStringVal1 == emptyStringVal2);
+  assert(emptyStringVal1 == emptyStringVal2 && offset == emptyStringXml.size());
+
+  emptyStringXml = "<value/>";
+  offset = 0;
+  XmlRpcValue emptyStringVal3(emptyStringXml, &offset);
+  assert(emptyStringVal3 == emptyStringVal2 && offset == emptyStringXml.size());
+
+  emptyStringXml = "<value><string/></value>";
+  offset = 0;
+  XmlRpcValue emptyStringVal4(emptyStringXml, &offset);
+  assert(emptyStringVal4 == emptyStringVal2 && offset == emptyStringXml.size());
 
   emptyStringXml = "<value>  </value>";
   offset = 0;
@@ -96,7 +113,7 @@ void testDateTime()
   int offset = 0;
   XmlRpcValue dateTime("<value><dateTime.iso8601>19040101T03:12:35</dateTime.iso8601></value>", &offset);
   struct tm &t = dateTime;
-  assert(t.tm_year == 1904 && t.tm_min == 12);
+  assert(t.tm_year == 4 && t.tm_min == 12); // Note that tm_year is defined as years since 1900
 }
 
 
diff --git a/test/TestXml.cpp b/test/TestXml.cpp
index 4fa707d..73c15de 100644
--- a/test/TestXml.cpp
+++ b/test/TestXml.cpp
@@ -25,9 +25,20 @@ int main(int argc, char* argv[])
   assert(empty == XmlRpcUtil::xmlEncode(""));
   assert(empty == XmlRpcUtil::xmlDecode(""));
 
+  int offset = 0;
+  std::string val;
+  assert(XmlRpcUtil::parseTag("param", "<param/>", &offset, val));
+  assert(empty == val);
+
   std::string raw("<>&'\"");
   assert(XmlRpcUtil::xmlDecode(XmlRpcUtil::xmlEncode(raw)) == raw);
   
+  std::string methodNameXml("<methodName>foo</methodName>");
+  offset = 0;
+  assert(XmlRpcUtil::parseTag("methodName", methodNameXml, &offset, val));
+  std::string methodName("foo");
+  assert(methodName == val);
+
   std::cout << "Basic tests passed.\n";
 
   // Interactive tests
diff --git a/test/TestXml.vcproj b/test/TestXml.vcproj
index 040000a..61f25c2 100644
--- a/test/TestXml.vcproj
+++ b/test/TestXml.vcproj
@@ -1,158 +1,439 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="TestXml"
-	ProjectGUID="{6F0C2ADA-0341-4183-8FAA-576668F1788A}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				PrecompiledHeaderFile=".\Release/TestXml.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /I &quot;..\src&quot; /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Fp&quot;.\Release/TestXml.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/TestXml.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\release"
-				ProgramDatabaseFile=".\Release/TestXml.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/TestXml.exe&quot; /INCREMENTAL:NO /LIBPATH:&quot;..\release&quot; xmlrpc.lib odbc32.lib odbccp32.lib /PDB:&quot;.\Release/TestXml.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/TestXml.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/TestXml.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/TestXml.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/TestXml.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\Debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/TestXml.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/TestXml.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\Debug&quot; xmlrpc.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/TestXml.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/TestXml.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\TestXml.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="TestXml"
+	ProjectGUID="{08AE820C-2405-438A-B401-553F08D0C393}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\TestXml"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestXml.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestXml.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestXml.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories=".$(OutDir)"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestXml.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestXml.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\TestXml"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/TestXml.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestXml.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestXml.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestXml.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestXml.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\TestXml"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestXml.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/TestXml.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestXml.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\Debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/TestXml.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestXml.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\TestXml"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/TestXml.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/TestXml.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/TestXml.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/TestXml.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/TestXml.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="TestXml.cpp"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/Validator.cpp b/test/Validator.cpp
index 16d2e79..64a264c 100644
--- a/test/Validator.cpp
+++ b/test/Validator.cpp
@@ -137,7 +137,8 @@ public:
   {
     std::cerr << "ModerateSizeArrayCheck\n";
     std::string s = params[0][0];
-    s += params[0][params[0].size()-1];
+    int n = params[0].size()-1;
+    s += std::string(params[0][n]);
     result = s;
   }
 } moderateSizeArrayCheck(&s);
diff --git a/test/Validator.vcproj b/test/Validator.vcproj
index 5af8229..05798a0 100644
--- a/test/Validator.vcproj
+++ b/test/Validator.vcproj
@@ -1,157 +1,441 @@
-<?xml version="1.0" encoding = "Windows-1252"?>
-<VisualStudioProject
-	ProjectType="Visual C++"
-	Version="7.00"
-	Name="Validator"
-	ProjectGUID="{E68AB694-4805-43EA-A96E-21B8FE285DE4}"
-	SccProjectName=""
-	SccLocalPath="">
-	<Platforms>
-		<Platform
-			Name="Win32"/>
-	</Platforms>
-	<Configurations>
-		<Configuration
-			Name="Release|Win32"
-			OutputDirectory=".\Release"
-			IntermediateDirectory=".\Release"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				InlineFunctionExpansion="1"
-				PreprocessorDefinitions="WIN32,NDEBUG,_CONSOLE,_WINDOWS"
-				StringPooling="TRUE"
-				RuntimeLibrary="2"
-				EnableFunctionLevelLinking="TRUE"
-				UsePrecompiledHeader="3"
-				PrecompiledHeaderThrough="stdafx.h"
-				PrecompiledHeaderFile=".\Release/Validator.pch"
-				AssemblerListingLocation=".\Release/"
-				ObjectFile=".\Release/"
-				ProgramDataBaseFileName=".\Release/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE">
-				<IntelOptions
-					Optimization="2"
-					InlineFuncExpansion="1"
-					OmitFramePtrs="1"
-					StringPooling="1"
-					RuntimeLibrary="2"
-					BufferSecurityCheck="1"
-					FunctionLevelLinking="1"
-					AllOptions="/c  /nologo /W3 /O2 /Ob1 /Oy /D &quot;WIN32&quot; /D &quot;NDEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /GF /FD /EHsc /MD /GS /Gy /Yu&quot;stdafx.h&quot; /Fp&quot;.\Release/Validator.pch&quot; /Fo&quot;.\Release/&quot; /Fd&quot;.\Release/&quot; /Gd /TP"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="odbc32.lib odbccp32.lib"
-				OutputFile=".\Release/Validator.exe"
-				LinkIncremental="1"
-				SuppressStartupBanner="TRUE"
-				ProgramDatabaseFile=".\Release/Validator.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Release/Validator.exe&quot; /INCREMENTAL:NO odbc32.lib odbccp32.lib /PDB:&quot;.\Release/Validator.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Release/Validator.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="NDEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-		<Configuration
-			Name="Debug|Win32"
-			OutputDirectory=".\Debug"
-			IntermediateDirectory=".\Debug"
-			ConfigurationType="1"
-			UseOfMFC="0"
-			ATLMinimizesCRunTimeLibraryUsage="FALSE"
-			CharacterSet="2">
-			<Tool
-				Name="VCCLCompilerTool"
-				Optimization="0"
-				AdditionalIncludeDirectories="..\src"
-				PreprocessorDefinitions="WIN32,_DEBUG,_CONSOLE,_WINDOWS"
-				BasicRuntimeChecks="3"
-				RuntimeLibrary="3"
-				PrecompiledHeaderFile=".\Debug/Validator.pch"
-				AssemblerListingLocation=".\Debug/"
-				ObjectFile=".\Debug/"
-				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
-				SuppressStartupBanner="TRUE"
-				DebugInformationFormat="4"
-				CompileAs="0">
-				<IntelOptions
-					Optimization="0"
-					MinimalRebuild="1"
-					BasicRuntimeChecks="3"
-					RuntimeLibrary="3"
-					AllOptions="/c  /I &quot;..\src&quot; /ZI /nologo /W3 /Od /D &quot;WIN32&quot; /D &quot;_DEBUG&quot; /D &quot;_CONSOLE&quot; /D &quot;_WINDOWS&quot; /D &quot;_MBCS&quot; /Gm /EHsc /RTC1 /MDd /Fp&quot;.\Debug/Validator.pch&quot; /Fo&quot;.\Debug/&quot; /Fd&quot;.\Debug/&quot; /Gd"/>
-			</Tool>
-			<Tool
-				Name="VCCustomBuildTool"/>
-			<Tool
-				Name="VCLinkerTool"
-				AdditionalOptions="/MACHINE:I386"
-				AdditionalDependencies="xmlrpc.lib WS2_32.lib odbc32.lib odbccp32.lib"
-				OutputFile=".\Debug/Validator.exe"
-				LinkIncremental="2"
-				SuppressStartupBanner="TRUE"
-				AdditionalLibraryDirectories="..\debug"
-				GenerateDebugInformation="TRUE"
-				ProgramDatabaseFile=".\Debug/Validator.pdb"
-				SubSystem="1">
-				<IntelOptions
-					AllOptions="/NOLOGO /OUT:&quot;.\Debug/Validator.exe&quot; /INCREMENTAL /LIBPATH:&quot;..\debug&quot; xmlrpc.lib WS2_32.lib odbc32.lib odbccp32.lib /DEBUG /PDB:&quot;.\Debug/Validator.pdb&quot; /SUBSYSTEM:CONSOLE /TLBID:1 /MACHINE:I386 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"/>
-			</Tool>
-			<Tool
-				Name="VCMIDLTool"
-				TypeLibraryName=".\Debug/Validator.tlb"/>
-			<Tool
-				Name="VCPostBuildEventTool"/>
-			<Tool
-				Name="VCPreBuildEventTool"/>
-			<Tool
-				Name="VCPreLinkEventTool"/>
-			<Tool
-				Name="VCResourceCompilerTool"
-				PreprocessorDefinitions="_DEBUG"
-				Culture="1033"/>
-			<Tool
-				Name="VCWebServiceProxyGeneratorTool"/>
-			<Tool
-				Name="VCWebDeploymentTool"/>
-			<IntelOptions
-				CompilerName="1"/>
-		</Configuration>
-	</Configurations>
-	<Files>
-		<Filter
-			Name="Source Files"
-			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat">
-			<File
-				RelativePath=".\Validator.cpp"/>
-		</Filter>
-	</Files>
-	<Globals/>
-</VisualStudioProject>
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="Validator"
+	ProjectGUID="{E7732039-D1FA-40C7-84FF-6D1ED2E410E9}"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory=".\Release"
+			IntermediateDirectory=".\Release\Validator"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/Validator.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/Validator.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="1"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/Validator.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/Validator.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/Validator.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory=".\Debug"
+			IntermediateDirectory=".\Debug\Validator"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TypeLibraryName="$(OutDir)/Validator.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/Validator.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib WS2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/Validator.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/Validator.pdb"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/Validator.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Validator"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/Validator.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				PrecompiledHeaderFile="$(IntDir)/Validator.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="1"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib ws2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/Validator.exe"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\release"
+				ProgramDatabaseFile="$(OutDir)/Validator.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/Validator.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)\Validator"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+				TypeLibraryName="$(OutDir)/Validator.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE;_WINDOWS;_CRT_SECURE_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				PrecompiledHeaderFile="$(IntDir)/Validator.pch"
+				AssemblerListingLocation="$(IntDir)/"
+				ObjectFile="$(IntDir)/"
+				ProgramDataBaseFileName="$(IntDir)/"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="xmlrpc.lib WS2_32.lib odbc32.lib odbccp32.lib"
+				OutputFile="$(OutDir)/Validator.exe"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				AdditionalLibraryDirectories="..\debug"
+				GenerateDebugInformation="true"
+				ProgramDatabaseFile="$(OutDir)/Validator.pdb"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile="$(OutDir)/Validator.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCWebDeploymentTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="Validator.cpp"
+				>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Debug|x64"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff --git a/test/response.xml b/test/response.xml
new file mode 100755
index 0000000..f2fb2a2
--- /dev/null
+++ b/test/response.xml
@@ -0,0 +1,17 @@
+HTTP/1.1 100 Continue
+
+HTTP/1.1 200 OK
+Content-Type: text/xml; charset="utf-8"
+Server: MS .NET Remoting, MS .NET CLR 2.0.50727.42
+Content-Length: 161
+
+<?xml version="1.0"?>
+<methodResponse>
+<params>
+<param>
+<value>
+<string />
+</value>
+</param>
+</params>
+</methodResponse>
-- 
1.7.0.4

