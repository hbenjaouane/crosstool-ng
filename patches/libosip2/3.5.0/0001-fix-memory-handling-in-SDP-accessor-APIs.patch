From 97225afffda400c72c06f5f76575c7bd5a371c5d Mon Sep 17 00:00:00 2001
From: michaedw in build chroot <build@ctbu-bld5.cisco.com>
Date: Wed, 30 Mar 2011 18:46:58 +0000
Subject: [PATCH] fix memory handling in SDP accessor APIs

---
 include/osipparser2/sdp_message.h |   48 +++++-----
 src/osipparser2/sdp_accessor.c    |  206 +++++++++++++++++++-----------------
 2 files changed, 133 insertions(+), 121 deletions(-)

diff --git a/include/osipparser2/sdp_message.h b/include/osipparser2/sdp_message.h
index 7bc4127..b1bee5a 100644
--- a/include/osipparser2/sdp_message.h
+++ b/include/osipparser2/sdp_message.h
@@ -291,7 +291,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_v_version_set(sdp_message_t * sdp, char *value);
+	int sdp_message_v_version_set(sdp_message_t * sdp, const char *value);
 /**
  * Get the version ('v' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -307,9 +307,9 @@ extern "C" {
  * @param addrtype The token value.
  * @param addr The token value.
  */
-	int sdp_message_o_origin_set(sdp_message_t * sdp, char *username,
-								 char *sess_id, char *sess_version,
-								 char *nettype, char *addrtype, char *addr);
+	int sdp_message_o_origin_set(sdp_message_t * sdp, const char *username,
+								 const char *sess_id, const char *sess_version,
+								 const char *nettype, const char *addrtype, const char *addr);
 /**
  * Get the username ('o' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -345,7 +345,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_s_name_set(sdp_message_t * sdp, char *value);
+	int sdp_message_s_name_set(sdp_message_t * sdp, const char *value);
 /**
  * Get the session name ('s' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -357,7 +357,7 @@ extern "C" {
  * @param pos_media The media line number.
  * @param value The token value.
  */
-	int sdp_message_i_info_set(sdp_message_t * sdp, int pos_media, char *value);
+	int sdp_message_i_info_set(sdp_message_t * sdp, int pos_media, const char *value);
 /**
  * Get the session info ('i' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -369,7 +369,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_u_uri_set(sdp_message_t * sdp, char *value);
+	int sdp_message_u_uri_set(sdp_message_t * sdp, const char *value);
 /**
  * Get the uri ('u' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -380,7 +380,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_e_email_add(sdp_message_t * sdp, char *value);
+	int sdp_message_e_email_add(sdp_message_t * sdp, const char *value);
 /**
  * OBSOLETE: see sdp_message_e_email_get
  * @def sdp_e_email_get
@@ -397,7 +397,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_p_phone_add(sdp_message_t * sdp, char *value);
+	int sdp_message_p_phone_add(sdp_message_t * sdp, const char *value);
 /**
  * Get one of the phone ('p' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -415,9 +415,9 @@ extern "C" {
  * @param addr_multicast_int The token value.
  */
 	int sdp_message_c_connection_add(sdp_message_t * sdp, int pos_media,
-									 char *nettype, char *addrtype,
-									 char *addr, char *addr_multicast_ttl,
-									 char *addr_multicast_int);
+									 const char *nettype, const char *addrtype,
+									 const char *addr, const char *addr_multicast_ttl,
+									 const char *addr_multicast_int);
 #ifndef DOXYGEN
 /* this method should be internal only... */
 	sdp_connection_t *sdp_message_connection_get(sdp_message_t * sdp,
@@ -468,7 +468,7 @@ extern "C" {
  * @param bandwidth The token value.
  */
 	int sdp_message_b_bandwidth_add(sdp_message_t * sdp, int pos_media,
-									char *bwtype, char *bandwidth);
+									const char *bwtype, const char *bandwidth);
 /**
  * Get the bandwidth ('b' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -497,7 +497,7 @@ extern "C" {
  * @param start The token value.
  * @param stop The token value.
  */
-	int sdp_message_t_time_descr_add(sdp_message_t * sdp, char *start, char *stop);
+	int sdp_message_t_time_descr_add(sdp_message_t * sdp, const char *start, const char *stop);
 /**
  * Get the start time value ('t' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -517,7 +517,7 @@ extern "C" {
  * @param value The token value.
  */
 	int sdp_message_r_repeat_add(sdp_message_t * sdp, int pos_time_descr,
-								 char *value);
+								 const char *value);
 /**
  * Get the repeat information ('r' field) in a SDP packet.
  * @param sdp The element to work on.
@@ -531,7 +531,7 @@ extern "C" {
  * @param sdp The element to work on.
  * @param value The token value.
  */
-	int sdp_message_z_adjustments_set(sdp_message_t * sdp, char *value);
+	int sdp_message_z_adjustments_set(sdp_message_t * sdp, const char *value);
 /**
  * Get the adjustments ('z' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -545,7 +545,7 @@ extern "C" {
  * @param keydata The token value.
  */
 	int sdp_message_k_key_set(sdp_message_t * sdp, int pos_media,
-							  char *keytype, char *keydata);
+							  const char *keytype, const char *keydata);
 /**
  * Get the key type ('k' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -566,7 +566,7 @@ extern "C" {
  * @param att_value The token value.
  */
 	int sdp_message_a_attribute_add(sdp_message_t * sdp, int pos_media,
-									char *att_field, char *att_value);
+									const char *att_field, const char *att_value);
 /**
  * delete all attribute fields specified by att_field.
  * @param sdp The element to work on.
@@ -574,7 +574,7 @@ extern "C" {
  * @param att_field The value to remove.
  */
 	int sdp_message_a_attribute_del(sdp_message_t * sdp, int pos_media,
-									char *att_field);
+									const char *att_field);
 /**
  * delete one specific attribute fields specified by att_field.
  * @param sdp The element to work on.
@@ -583,7 +583,7 @@ extern "C" {
  * @param pos_attr The index of attribute to remove.
  */
 	int sdp_message_a_attribute_del_at_index(sdp_message_t * sdp,
-											 int pos_media, char *att_field,
+											 int pos_media, const char *att_field,
 											 int pos_attr);
  /**
  * Get one of the attribute ('a' field) of a SDP packet.
@@ -621,8 +621,8 @@ extern "C" {
  * @param number_of_port The token value.
  * @param proto The token value.
  */
-	int sdp_message_m_media_add(sdp_message_t * sdp, char *media,
-								char *port, char *number_of_port, char *proto);
+	int sdp_message_m_media_add(sdp_message_t * sdp, const char *media,
+								const char *port, const char *number_of_port, const char *proto);
 /**
  * Get the media type ('m' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -641,7 +641,7 @@ extern "C" {
  * @param pos_media The line number.
  * @param port The new port to set (must be allocated with osip_malloc)
  */
-	int sdp_message_m_port_set(sdp_message_t * sdp, int pos_media, char *port);
+	int sdp_message_m_port_set(sdp_message_t * sdp, int pos_media, const char *port);
  /**
  * Get the number of port ('m' field) of a SDP packet.
  * @param sdp The element to work on.
@@ -661,7 +661,7 @@ extern "C" {
  * @param payload The token value.
  */
 	int sdp_message_m_payload_add(sdp_message_t * sdp, int pos_media,
-								  char *payload);
+								  const char *payload);
 /**
  * Get one of the payload number ('m' field) of a SDP packet.
  * @param sdp The element to work on.
diff --git a/src/osipparser2/sdp_accessor.c b/src/osipparser2/sdp_accessor.c
index 2a0f86d..70223fb 100644
--- a/src/osipparser2/sdp_accessor.c
+++ b/src/osipparser2/sdp_accessor.c
@@ -25,11 +25,21 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-int sdp_message_v_version_set(sdp_message_t * sdp, char *v_version)
+#define SDP_REPLACE(field, param) do { \
+		osip_free(sdp->field); \
+		sdp->field = osip_strdup(param); \
+	} while (0)
+
+#define MED_REPLACE(field, param) do { \
+		osip_free(med->field); \
+		med->field = osip_strdup(param); \
+	} while (0)
+
+int sdp_message_v_version_set(sdp_message_t * sdp, const char *v_version)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	sdp->v_version = v_version;
+	SDP_REPLACE(v_version, v_version);
 	return OSIP_SUCCESS;
 }
 
@@ -37,22 +47,22 @@ char *sdp_message_v_version_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->v_version;
+	return osip_strdup(sdp->v_version);
 }
 
 int
-sdp_message_o_origin_set(sdp_message_t * sdp, char *username, char *sess_id,
-						 char *sess_version, char *nettype, char *addrtype,
-						 char *addr)
+sdp_message_o_origin_set(sdp_message_t * sdp, const char *username, const char *sess_id,
+						 const char *sess_version, const char *nettype, const char *addrtype,
+						 const char *addr)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	sdp->o_username = username;
-	sdp->o_sess_id = sess_id;
-	sdp->o_sess_version = sess_version;
-	sdp->o_nettype = nettype;
-	sdp->o_addrtype = addrtype;
-	sdp->o_addr = addr;
+	SDP_REPLACE(o_username, username);
+	SDP_REPLACE(o_sess_id, sess_id);
+	SDP_REPLACE(o_sess_version, sess_version);
+	SDP_REPLACE(o_nettype, nettype);
+	SDP_REPLACE(o_addrtype, addrtype);
+	SDP_REPLACE(o_addr, addr);
 	return OSIP_SUCCESS;
 }
 
@@ -60,49 +70,49 @@ char *sdp_message_o_username_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_username;
+	return osip_strdup(sdp->o_username);
 }
 
 char *sdp_message_o_sess_id_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_sess_id;
+	return osip_strdup(sdp->o_sess_id);
 }
 
 char *sdp_message_o_sess_version_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_sess_version;
+	return osip_strdup(sdp->o_sess_version);
 }
 
 char *sdp_message_o_nettype_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_nettype;
+	return osip_strdup(sdp->o_nettype);
 }
 
 char *sdp_message_o_addrtype_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_addrtype;
+	return osip_strdup(sdp->o_addrtype);
 }
 
 char *sdp_message_o_addr_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->o_addr;
+	return osip_strdup(sdp->o_addr);
 }
 
-int sdp_message_s_name_set(sdp_message_t * sdp, char *name)
+int sdp_message_s_name_set(sdp_message_t * sdp, const char *name)
 {
 	if (sdp == NULL)
-		return -1;
-	sdp->s_name = name;
+		return OSIP_BADPARAMETER;
+	SDP_REPLACE(s_name, name);
 	return OSIP_SUCCESS;
 }
 
@@ -110,23 +120,23 @@ char *sdp_message_s_name_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->s_name;
+	return osip_strdup(sdp->s_name);
 }
 
-int sdp_message_i_info_set(sdp_message_t * sdp, int pos_media, char *info)
+int sdp_message_i_info_set(sdp_message_t * sdp, int pos_media, const char *info)
 {
 	sdp_media_t *med;
 
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
 	if (pos_media == -1) {
-		sdp->i_info = info;
+		SDP_REPLACE(i_info, info);
 		return OSIP_SUCCESS;
 	}
 	med = osip_list_get(&sdp->m_medias, pos_media);
 	if (med == NULL)
 		return OSIP_UNDEFINED_ERROR;
-	med->i_info = info;
+	MED_REPLACE(i_info, info);
 	return OSIP_SUCCESS;
 }
 
@@ -137,19 +147,19 @@ char *sdp_message_i_info_get(sdp_message_t * sdp, int pos_media)
 	if (sdp == NULL)
 		return NULL;
 	if (pos_media == -1) {
-		return sdp->i_info;
+		return osip_strdup(sdp->i_info);
 	}
 	med = osip_list_get(&sdp->m_medias, pos_media);
 	if (med == NULL)
 		return NULL;
-	return med->i_info;
+	return osip_strdup(med->i_info);
 }
 
-int sdp_message_u_uri_set(sdp_message_t * sdp, char *uri)
+int sdp_message_u_uri_set(sdp_message_t * sdp, const char *uri)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	sdp->u_uri = uri;
+	SDP_REPLACE(u_uri, uri);
 	return OSIP_SUCCESS;
 }
 
@@ -157,14 +167,14 @@ char *sdp_message_u_uri_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->u_uri;
+	return osip_strdup(sdp->u_uri);
 }
 
-int sdp_message_e_email_add(sdp_message_t * sdp, char *email)
+int sdp_message_e_email_add(sdp_message_t * sdp, const char *email)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	osip_list_add(&sdp->e_emails, email, -1);
+	osip_list_add(&sdp->e_emails, osip_strdup(email), -1);
 	return OSIP_SUCCESS;
 }
 
@@ -173,15 +183,15 @@ char *sdp_message_e_email_get(sdp_message_t * sdp, int pos)
 	if (sdp == NULL)
 		return NULL;
 	if (osip_list_size(&sdp->e_emails) > pos)
-		return (char *) osip_list_get(&sdp->e_emails, pos);
+		return osip_strdup((char *) osip_list_get(&sdp->e_emails, pos));
 	return NULL;
 }
 
-int sdp_message_p_phone_add(sdp_message_t * sdp, char *phone)
+int sdp_message_p_phone_add(sdp_message_t * sdp, const char *phone)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	osip_list_add(&sdp->p_phones, phone, -1);
+	osip_list_add(&sdp->p_phones, osip_strdup(phone), -1);
 	return OSIP_SUCCESS;
 }
 
@@ -190,15 +200,15 @@ char *sdp_message_p_phone_get(sdp_message_t * sdp, int pos)
 	if (sdp == NULL)
 		return NULL;
 	if (osip_list_size(&sdp->p_phones) > pos)
-		return (char *) osip_list_get(&sdp->p_phones, pos);
+		return osip_strdup((char *) osip_list_get(&sdp->p_phones, pos));
 	return NULL;
 }
 
 int
 sdp_message_c_connection_add(sdp_message_t * sdp, int pos_media,
-							 char *nettype, char *addrtype,
-							 char *addr, char *addr_multicast_ttl,
-							 char *addr_multicast_int)
+							 const char *nettype, const char *addrtype,
+							 const char *addr, const char *addr_multicast_ttl,
+							 const char *addr_multicast_int)
 {
 	int i;
 	sdp_media_t *med;
@@ -207,15 +217,15 @@ sdp_message_c_connection_add(sdp_message_t * sdp, int pos_media,
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
 	if ((pos_media != -1) && (osip_list_size(&sdp->m_medias) < pos_media + 1))
-		return -1;
+		return OSIP_UNDEFINED_ERROR;
 	i = sdp_connection_init(&conn);
 	if (i != 0)
 		return i;
-	conn->c_nettype = nettype;
-	conn->c_addrtype = addrtype;
-	conn->c_addr = addr;
-	conn->c_addr_multicast_ttl = addr_multicast_ttl;
-	conn->c_addr_multicast_int = addr_multicast_int;
+	conn->c_nettype = osip_strdup(nettype);
+	conn->c_addrtype = osip_strdup(addrtype);
+	conn->c_addr = osip_strdup(addr);
+	conn->c_addr_multicast_ttl = osip_strdup(addr_multicast_ttl);
+	conn->c_addr_multicast_int = osip_strdup(addr_multicast_int);
 	if (pos_media == -1) {
 		sdp->c_connection = conn;
 		return OSIP_SUCCESS;
@@ -247,7 +257,7 @@ char *sdp_message_c_nettype_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (conn == NULL)
 		return NULL;
-	return conn->c_nettype;
+	return osip_strdup(conn->c_nettype);
 }
 
 char *sdp_message_c_addrtype_get(sdp_message_t * sdp, int pos_media, int pos)
@@ -256,7 +266,7 @@ char *sdp_message_c_addrtype_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (conn == NULL)
 		return NULL;
-	return conn->c_addrtype;
+	return osip_strdup(conn->c_addrtype);
 }
 
 char *sdp_message_c_addr_get(sdp_message_t * sdp, int pos_media, int pos)
@@ -265,7 +275,7 @@ char *sdp_message_c_addr_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (conn == NULL)
 		return NULL;
-	return conn->c_addr;
+	return osip_strdup(conn->c_addr);
 }
 
 char *sdp_message_c_addr_multicast_ttl_get(sdp_message_t * sdp, int pos_media,
@@ -275,7 +285,7 @@ char *sdp_message_c_addr_multicast_ttl_get(sdp_message_t * sdp, int pos_media,
 
 	if (conn == NULL)
 		return NULL;
-	return conn->c_addr_multicast_ttl;
+	return osip_strdup(conn->c_addr_multicast_ttl);
 }
 
 char *sdp_message_c_addr_multicast_int_get(sdp_message_t * sdp, int pos_media,
@@ -285,12 +295,12 @@ char *sdp_message_c_addr_multicast_int_get(sdp_message_t * sdp, int pos_media,
 
 	if (conn == NULL)
 		return NULL;
-	return conn->c_addr_multicast_int;
+	return osip_strdup(conn->c_addr_multicast_int);
 }
 
 int
-sdp_message_b_bandwidth_add(sdp_message_t * sdp, int pos_media, char *bwtype,
-							char *bandwidth)
+sdp_message_b_bandwidth_add(sdp_message_t * sdp, int pos_media, const char *bwtype,
+							const char *bandwidth)
 {
 	int i;
 	sdp_media_t *med;
@@ -303,8 +313,8 @@ sdp_message_b_bandwidth_add(sdp_message_t * sdp, int pos_media, char *bwtype,
 	i = sdp_bandwidth_init(&band);
 	if (i != 0)
 		return i;
-	band->b_bwtype = bwtype;
-	band->b_bandwidth = bandwidth;
+	band->b_bwtype = osip_strdup(bwtype);
+	band->b_bandwidth = osip_strdup(bandwidth);
 	if (pos_media == -1) {
 		osip_list_add(&sdp->b_bandwidths, band, -1);
 		return OSIP_SUCCESS;
@@ -335,7 +345,7 @@ char *sdp_message_b_bwtype_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (band == NULL)
 		return NULL;
-	return band->b_bwtype;
+	return osip_strdup(band->b_bwtype);
 }
 
 char *sdp_message_b_bandwidth_get(sdp_message_t * sdp, int pos_media, int pos)
@@ -344,10 +354,10 @@ char *sdp_message_b_bandwidth_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (band == NULL)
 		return NULL;
-	return band->b_bandwidth;
+	return osip_strdup(band->b_bandwidth);
 }
 
-int sdp_message_t_time_descr_add(sdp_message_t * sdp, char *start, char *stop)
+int sdp_message_t_time_descr_add(sdp_message_t * sdp, const char *start, const char *stop)
 {
 	int i;
 	sdp_time_descr_t *td;
@@ -357,8 +367,8 @@ int sdp_message_t_time_descr_add(sdp_message_t * sdp, char *start, char *stop)
 	i = sdp_time_descr_init(&td);
 	if (i != 0)
 		return i;
-	td->t_start_time = start;
-	td->t_stop_time = stop;
+	td->t_start_time = osip_strdup(start);
+	td->t_stop_time = osip_strdup(stop);
 	osip_list_add(&sdp->t_descrs, td, -1);
 	return OSIP_SUCCESS;
 }
@@ -372,7 +382,7 @@ char *sdp_message_t_start_time_get(sdp_message_t * sdp, int pos_td)
 	td = (sdp_time_descr_t *) osip_list_get(&sdp->t_descrs, pos_td);
 	if (td == NULL)
 		return NULL;
-	return td->t_start_time;
+	return osip_strdup(td->t_start_time);
 }
 
 char *sdp_message_t_stop_time_get(sdp_message_t * sdp, int pos_td)
@@ -384,10 +394,10 @@ char *sdp_message_t_stop_time_get(sdp_message_t * sdp, int pos_td)
 	td = (sdp_time_descr_t *) osip_list_get(&sdp->t_descrs, pos_td);
 	if (td == NULL)
 		return NULL;
-	return td->t_stop_time;
+	return osip_strdup(td->t_stop_time);
 }
 
-int sdp_message_r_repeat_add(sdp_message_t * sdp, int pos_time_descr, char *field)
+int sdp_message_r_repeat_add(sdp_message_t * sdp, int pos_time_descr, const char *field)
 {
 	sdp_time_descr_t *td;
 
@@ -396,7 +406,7 @@ int sdp_message_r_repeat_add(sdp_message_t * sdp, int pos_time_descr, char *fiel
 	td = (sdp_time_descr_t *) osip_list_get(&sdp->t_descrs, pos_time_descr);
 	if (td == NULL)
 		return OSIP_UNDEFINED_ERROR;
-	osip_list_add(&td->r_repeats, field, -1);
+	osip_list_add(&td->r_repeats, osip_strdup(field), -1);
 	return OSIP_SUCCESS;
 }
 
@@ -410,14 +420,14 @@ char *sdp_message_r_repeat_get(sdp_message_t * sdp, int pos_time_descr,
 	td = (sdp_time_descr_t *) osip_list_get(&sdp->t_descrs, pos_time_descr);
 	if (td == NULL)
 		return NULL;
-	return (char *) osip_list_get(&td->r_repeats, pos_repeat);
+	return osip_strdup((char *) osip_list_get(&td->r_repeats, pos_repeat));
 }
 
-int sdp_message_z_adjustments_set(sdp_message_t * sdp, char *field)
+int sdp_message_z_adjustments_set(sdp_message_t * sdp, const char *field)
 {
 	if (sdp == NULL)
 		return OSIP_BADPARAMETER;
-	sdp->z_adjustments = field;
+	SDP_REPLACE(z_adjustments, field);
 	return OSIP_SUCCESS;
 }
 
@@ -425,12 +435,12 @@ char *sdp_message_z_adjustments_get(sdp_message_t * sdp)
 {
 	if (sdp == NULL)
 		return NULL;
-	return sdp->z_adjustments;
+	return osip_strdup(sdp->z_adjustments);
 }
 
 int
-sdp_message_k_key_set(sdp_message_t * sdp, int pos_media, char *keytype,
-					  char *keydata)
+sdp_message_k_key_set(sdp_message_t * sdp, int pos_media, const char *keytype,
+					  const char *keydata)
 {
 	sdp_key_t *key;
 	sdp_media_t *med;
@@ -440,13 +450,15 @@ sdp_message_k_key_set(sdp_message_t * sdp, int pos_media, char *keytype,
 	if ((pos_media != -1) && (osip_list_size(&sdp->m_medias) < pos_media + 1))
 		return OSIP_UNDEFINED_ERROR;
 	sdp_key_init(&key);
-	key->k_keytype = keytype;
-	key->k_keydata = keydata;
+	key->k_keytype = osip_strdup(keytype);
+	key->k_keydata = osip_strdup(keydata);
 	if (pos_media == -1) {
+		sdp_key_free(sdp->k_key);
 		sdp->k_key = key;
 		return OSIP_SUCCESS;
 	}
 	med = (sdp_media_t *) osip_list_get(&sdp->m_medias, pos_media);
+	sdp_key_free(med->k_key);
 	med->k_key = key;
 	return OSIP_SUCCESS;
 }
@@ -460,14 +472,14 @@ char *sdp_message_k_keytype_get(sdp_message_t * sdp, int pos_media)
 	if (pos_media == -1) {
 		if (sdp->k_key == NULL)
 			return NULL;
-		return sdp->k_key->k_keytype;
+		return osip_strdup(sdp->k_key->k_keytype);
 	}
 	if ((pos_media != -1) && (osip_list_size(&sdp->m_medias) < pos_media + 1))
 		return NULL;
 	med = (sdp_media_t *) osip_list_get(&sdp->m_medias, pos_media);
 	if (med->k_key == NULL)
 		return NULL;
-	return med->k_key->k_keytype;
+	return osip_strdup(med->k_key->k_keytype);
 }
 
 char *sdp_message_k_keydata_get(sdp_message_t * sdp, int pos_media)
@@ -479,19 +491,19 @@ char *sdp_message_k_keydata_get(sdp_message_t * sdp, int pos_media)
 	if (pos_media == -1) {
 		if (sdp->k_key == NULL)
 			return NULL;
-		return sdp->k_key->k_keydata;
+		return osip_strdup(sdp->k_key->k_keydata);
 	}
 	if ((pos_media != -1) && (osip_list_size(&sdp->m_medias) < pos_media + 1))
 		return NULL;
 	med = (sdp_media_t *) osip_list_get(&sdp->m_medias, pos_media);
 	if (med->k_key == NULL)
 		return NULL;
-	return med->k_key->k_keydata;
+	return osip_strdup(med->k_key->k_keydata);
 }
 
 int
 sdp_message_a_attribute_add(sdp_message_t * sdp, int pos_media,
-							char *att_field, char *att_value)
+							const char *att_field, const char *att_value)
 {
 	int i;
 	sdp_media_t *med;
@@ -504,8 +516,8 @@ sdp_message_a_attribute_add(sdp_message_t * sdp, int pos_media,
 	i = sdp_attribute_init(&attr);
 	if (i != 0)
 		return i;
-	attr->a_att_field = att_field;
-	attr->a_att_value = att_value;
+	attr->a_att_field = osip_strdup(att_field);
+	attr->a_att_value = osip_strdup(att_value);
 	if (pos_media == -1) {
 		osip_list_add(&sdp->a_attributes, attr, -1);
 		return OSIP_SUCCESS;
@@ -516,7 +528,7 @@ sdp_message_a_attribute_add(sdp_message_t * sdp, int pos_media,
 }
 
 int
-sdp_message_a_attribute_del(sdp_message_t * sdp, int pos_media, char *att_field)
+sdp_message_a_attribute_del(sdp_message_t * sdp, int pos_media, const char *att_field)
 {
 	int i;
 	sdp_media_t *med;
@@ -553,7 +565,7 @@ sdp_message_a_attribute_del(sdp_message_t * sdp, int pos_media, char *att_field)
 
 int
 sdp_message_a_attribute_del_at_index(sdp_message_t * sdp, int pos_media,
-									 char *att_field, int pos_attr)
+									 const char *att_field, int pos_attr)
 {
 	int i;
 	sdp_media_t *med;
@@ -620,7 +632,7 @@ char *sdp_message_a_att_field_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (attr == NULL)
 		return NULL;
-	return attr->a_att_field;
+	return osip_strdup(attr->a_att_field);
 }
 
 char *sdp_message_a_att_value_get(sdp_message_t * sdp, int pos_media, int pos)
@@ -629,7 +641,7 @@ char *sdp_message_a_att_value_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (attr == NULL)
 		return NULL;
-	return attr->a_att_value;
+	return osip_strdup(attr->a_att_value);
 }
 
 int sdp_message_endof_media(sdp_message_t * sdp, int i)
@@ -644,8 +656,8 @@ int sdp_message_endof_media(sdp_message_t * sdp, int i)
 }
 
 int
-sdp_message_m_media_add(sdp_message_t * sdp, char *media,
-						char *port, char *number_of_port, char *proto)
+sdp_message_m_media_add(sdp_message_t * sdp, const char *media,
+						const char *port, const char *number_of_port, const char *proto)
 {
 	int i;
 	sdp_media_t *med;
@@ -653,10 +665,10 @@ sdp_message_m_media_add(sdp_message_t * sdp, char *media,
 	i = sdp_media_init(&med);
 	if (i != 0)
 		return i;
-	med->m_media = media;
-	med->m_port = port;
-	med->m_number_of_port = number_of_port;
-	med->m_proto = proto;
+	med->m_media = osip_strdup(media);
+	med->m_port = osip_strdup(port);
+	med->m_number_of_port = osip_strdup(number_of_port);
+	med->m_proto = osip_strdup(proto);
 	osip_list_add(&sdp->m_medias, med, -1);
 	return OSIP_SUCCESS;
 }
@@ -667,7 +679,7 @@ char *sdp_message_m_media_get(sdp_message_t * sdp, int pos_media)
 
 	if (med == NULL)
 		return NULL;
-	return med->m_media;
+	return osip_strdup(med->m_media);
 }
 
 char *sdp_message_m_port_get(sdp_message_t * sdp, int pos_media)
@@ -676,7 +688,7 @@ char *sdp_message_m_port_get(sdp_message_t * sdp, int pos_media)
 
 	if (med == NULL)
 		return NULL;
-	return med->m_port;
+	return osip_strdup(med->m_port);
 }
 
 char *sdp_message_m_number_of_port_get(sdp_message_t * sdp, int pos_media)
@@ -685,10 +697,10 @@ char *sdp_message_m_number_of_port_get(sdp_message_t * sdp, int pos_media)
 
 	if (med == NULL)
 		return NULL;
-	return med->m_number_of_port;
+	return osip_strdup(med->m_number_of_port);
 }
 
-int sdp_message_m_port_set(sdp_message_t * sdp, int pos_media, char *port)
+int sdp_message_m_port_set(sdp_message_t * sdp, int pos_media, const char *port)
 {
 	sdp_media_t *med = osip_list_get(&sdp->m_medias, pos_media);
 
@@ -696,7 +708,7 @@ int sdp_message_m_port_set(sdp_message_t * sdp, int pos_media, char *port)
 		return OSIP_BADPARAMETER;
 	if (med->m_port)
 		osip_free(med->m_port);
-	med->m_port = port;
+	med->m_port = osip_strdup(port);
 	return OSIP_SUCCESS;
 }
 
@@ -706,16 +718,16 @@ char *sdp_message_m_proto_get(sdp_message_t * sdp, int pos_media)
 
 	if (med == NULL)
 		return NULL;
-	return med->m_proto;
+	return osip_strdup(med->m_proto);
 }
 
-int sdp_message_m_payload_add(sdp_message_t * sdp, int pos_media, char *payload)
+int sdp_message_m_payload_add(sdp_message_t * sdp, int pos_media, const char *payload)
 {
 	sdp_media_t *med = osip_list_get(&sdp->m_medias, pos_media);
 
 	if (med == NULL)
 		return OSIP_BADPARAMETER;
-	osip_list_add(&med->m_payloads, payload, -1);
+	osip_list_add(&med->m_payloads, osip_strdup(payload), -1);
 	return OSIP_SUCCESS;
 }
 
@@ -725,7 +737,7 @@ char *sdp_message_m_payload_get(sdp_message_t * sdp, int pos_media, int pos)
 
 	if (med == NULL)
 		return NULL;
-	return (char *) osip_list_get(&med->m_payloads, pos);
+	return osip_strdup((char *) osip_list_get(&med->m_payloads, pos));
 }
 
 int sdp_message_m_payload_del(sdp_message_t * sdp, int pos_media, int pos)
-- 
1.7.0.4

