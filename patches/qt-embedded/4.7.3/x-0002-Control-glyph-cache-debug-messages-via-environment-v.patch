From 57205b290aa07f737136ad294e7ef4b809022998 Mon Sep 17 00:00:00 2001
From: michaedw in build chroot <build@ctbu-bld5.cisco.com>
Date: Sun, 13 Mar 2011 23:09:37 +0000
Subject: [PATCH] Control glyph cache debug messages via environment variable

Add a environment variable triggered control over Qt glyph cache
debugging messages rather than a compile-time control. Also add a debug
message for texture overflow condition.
---
 src/gui/painting/qtextureglyphcache.cpp |   63 ++++++++++++++++++------------
 src/gui/painting/qtextureglyphcache_p.h |   14 ++++++-
 2 files changed, 51 insertions(+), 26 deletions(-)

diff --git a/src/gui/painting/qtextureglyphcache.cpp b/src/gui/painting/qtextureglyphcache.cpp
index 8b70413..e1cb1a8 100644
--- a/src/gui/painting/qtextureglyphcache.cpp
+++ b/src/gui/painting/qtextureglyphcache.cpp
@@ -46,6 +46,9 @@
 #include "private/qnumeric_p.h"
 #include "private/qnativeimage_p.h"
 #include "private/qfontengine_ft_p.h"
+#ifdef Q_OS_LINUX
+#include <qthread.h>
+#endif
 
 QT_BEGIN_NAMESPACE
 
@@ -68,10 +71,15 @@ static inline int qt_next_power_of_two(int v)
 bool QTextureGlyphCache::populate(QFontEngine *fontEngine, int numGlyphs, const glyph_t *glyphs,
                                   const QFixedPoint *)
 {
-#ifdef CACHE_DEBUG
-    printf("Populating with %d glyphs\n", numGlyphs);
-    qDebug() << " -> current transformation: " << m_transform;
+    if (m_cacheDebug > 0) {
+         printf("Populating with %d glyphs\n", numGlyphs);
+#ifdef Q_OS_LINUX
+         if (m_cacheDebug > 1){
+              qDebug() << " -> current thread id: " << QThread::currentThread();
+         }
 #endif
+         qDebug() << " -> current transformation: " << m_transform;
+    }
 
     m_current_fontengine = fontEngine;
     const int margin = glyphMargin();
@@ -89,16 +97,16 @@ bool QTextureGlyphCache::populate(QFontEngine *fontEngine, int numGlyphs, const
             continue;
         glyph_metrics_t metrics = fontEngine->boundingBox(glyph, m_transform);
 
-#ifdef CACHE_DEBUG
-        printf("(%4x): w=%.2f, h=%.2f, xoff=%.2f, yoff=%.2f, x=%.2f, y=%.2f\n",
-               glyph,
-               metrics.width.toReal(),
-               metrics.height.toReal(),
-               metrics.xoff.toReal(),
-               metrics.yoff.toReal(),
-               metrics.x.toReal(),
-               metrics.y.toReal());
-#endif
+        if (m_cacheDebug > 0) {
+             printf("(%4x): w=%.2f, h=%.2f, xoff=%.2f, yoff=%.2f, x=%.2f, y=%.2f\n",
+                    glyph,
+                    metrics.width.toReal(),
+                    metrics.height.toReal(),
+                    metrics.xoff.toReal(),
+                    metrics.yoff.toReal(),
+                    metrics.x.toReal(),
+                    metrics.y.toReal());
+        }
         int glyph_width = metrics.width.ceil().toInt();
         int glyph_height = metrics.height.ceil().toInt();
         if (glyph_height == 0 || glyph_width == 0)
@@ -154,6 +162,9 @@ bool QTextureGlyphCache::populate(QFontEngine *fontEngine, int numGlyphs, const
             if (maxTextureHeight() > 0 && new_height > maxTextureHeight()) {
                 // We can't make a new texture of the required size, so
                 // bail out
+                if (m_cacheDebug > 0) {
+                    printf("Error: new glyph cache size %dx%d would exceed maximum texture size %dx%d. Cannot proceed.\n", m_w, new_height, maxTextureWidth(), maxTextureHeight());
+                }
                 return false;
             }
 
@@ -258,13 +269,13 @@ void QImageTextureGlyphCache::fillTexture(const Coord &c, glyph_t g)
 {
     QImage mask = textureMapForGlyph(g);
 
-#ifdef CACHE_DEBUG
-    printf("fillTexture of %dx%d at %d,%d in the cache of %dx%d\n", c.w, c.h, c.x, c.y, m_image.width(), m_image.height());
-    if (mask.width() > c.w || mask.height() > c.h) {
-        printf("   ERROR; mask is bigger than reserved space! %dx%d instead of %dx%d\n", mask.width(), mask.height(), c.w,c.h);
-        return;
+    if (m_cacheDebug > 0) {
+         printf("fillTexture of %dx%d at %d,%d in the cache of %dx%d\n", c.w, c.h, c.x, c.y, m_image.width(), m_image.height());
+         if (mask.width() > c.w || mask.height() > c.h) {
+             printf("   ERROR; mask is bigger than reserved space! %dx%d instead of %dx%d\n", mask.width(), mask.height(), c.w,c.h);
+             return;
+         }
     }
-#endif
 
     if (m_type == QFontEngineGlyphCache::Raster_RGBMask) {        
         QImage ref(m_image.bits() + (c.x * 4 + c.y * m_image.bytesPerLine()),
@@ -335,14 +346,16 @@ void QImageTextureGlyphCache::fillTexture(const Coord &c, glyph_t g)
         }
     }
 
-#ifdef CACHE_DEBUG
+    if (m_cacheDebug > 1){
 //     QPainter p(&m_image);
 //     p.drawLine(
-    QPoint base(c.x + glyphMargin(), c.y + glyphMargin() + c.baseLineY-1);
-    if (m_image.rect().contains(base))
-        m_image.setPixel(base, 255);
-    m_image.save(QString::fromLatin1("cache-%1.png").arg(int(this)));
-#endif
+         if (m_cacheDebug > 2){
+           QPoint base(c.x + glyphMargin(), c.y + glyphMargin() + c.baseLineY-1);
+           if (m_image.rect().contains(base))
+               m_image.setPixel(base, 255);
+         }
+         m_image.save(QString::fromLatin1("cache-%1.png").arg((unsigned long)(this)));
+    }
 }
 
 QT_END_NAMESPACE
diff --git a/src/gui/painting/qtextureglyphcache_p.h b/src/gui/painting/qtextureglyphcache_p.h
index 6475354..5e2ded2 100644
--- a/src/gui/painting/qtextureglyphcache_p.h
+++ b/src/gui/painting/qtextureglyphcache_p.h
@@ -57,6 +57,7 @@
 #include <qimage.h>
 #include <qobject.h>
 #include <qtransform.h>
+#include <stdlib.h>
 
 #include <private/qfontengineglyphcache_p.h>
 
@@ -82,7 +83,17 @@ public:
     QTextureGlyphCache(QFontEngineGlyphCache::Type type, const QTransform &matrix)
         : QFontEngineGlyphCache(matrix, type), m_current_fontengine(0),
                                                m_w(0), m_h(0), m_cx(0), m_cy(0), m_currentRowHeight(0)
-        { }
+     {
+        const char *cacheDebugLevel = getenv("QT_GLYPH_CACHE_DEBUG");
+        m_cacheDebug = 0;
+        if (cacheDebugLevel != NULL) {
+          m_cacheDebug = atoi(cacheDebugLevel);
+          // sanity check value - assume zero if overflow happened
+          if (m_cacheDebug < 0 || m_cacheDebug == INT_MAX) {
+            m_cacheDebug = 0;
+          }
+        }
+     }
 
     virtual ~QTextureGlyphCache() { }
 
@@ -128,6 +139,7 @@ protected:
     int m_cx; // current x
     int m_cy; // current y
     int m_currentRowHeight; // Height of last row
+    int m_cacheDebug; // run-time cache debug control
 };
 
 
-- 
1.7.0.4

