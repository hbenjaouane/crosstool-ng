From 126b81f5eaad9f9db975aab276bde6d125bf2dd4 Mon Sep 17 00:00:00 2001
From: michaedw in build chroot <build@ctbu-bld5.cisco.com>
Date: Tue, 5 Apr 2011 20:44:29 +0000
Subject: [PATCH] allow socket fd to be 0

---
 src/eXtl_dtls.c |   16 +++++++-------
 src/eXtl_tcp.c  |   58 ++++++++++++++++++++++++++++++++---------------------
 src/eXtl_tls.c  |   59 +++++++++++++++++++++++++++++++++---------------------
 src/eXtl_udp.c  |   17 +++++++++------
 4 files changed, 89 insertions(+), 61 deletions(-)

diff --git a/src/eXtl_dtls.c b/src/eXtl_dtls.c
index 7146dfa..efdb087 100644
--- a/src/eXtl_dtls.c
+++ b/src/eXtl_dtls.c
@@ -68,7 +68,7 @@ SSL_CTX *initialize_server_ctx(const char *keyfile, const char *certfile,
 
 extern eXosip_t eXosip;
 
-static int dtls_socket;
+static int dtls_socket = -1;
 static struct sockaddr_storage ai_addr;
 
 static char dtls_firewall_ip[64];
@@ -95,7 +95,7 @@ static struct socket_tab dtls_socket_tab[EXOSIP_MAX_SOCKETS];
 
 static int dtls_tl_init(void)
 {
-	dtls_socket = 0;
+	dtls_socket = -1;
 	server_ctx = NULL;
 	client_ctx = NULL;
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
@@ -274,9 +274,9 @@ static int dtls_tl_free(void)
 	memset(dtls_firewall_ip, 0, sizeof(dtls_firewall_ip));
 	memset(dtls_firewall_port, 0, sizeof(dtls_firewall_port));
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
-	if (dtls_socket > 0)
+	if (dtls_socket >= 0)
 		close(dtls_socket);
-	dtls_socket = 0;
+	dtls_socket = -1;
 	return OSIP_SUCCESS;
 }
 
@@ -404,7 +404,7 @@ static int dtls_tl_open(void)
 
 static int dtls_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 {
-	if (dtls_socket <= 0)
+	if (dtls_socket < 0)
 		return -1;
 
 	eXFD_SET(dtls_socket, osip_fdset);
@@ -422,7 +422,7 @@ static int dtls_tl_read_message(fd_set * osip_fdset)
 	int i;
 	int enc_buf_len;
 
-	if (dtls_socket <= 0)
+	if (dtls_socket < 0)
 		return -1;
 
 	if (FD_ISSET(dtls_socket, osip_fdset)) {
@@ -698,7 +698,7 @@ dtls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 	struct socket_tab *socket_tab_used = NULL;
 	BIO *sbio = NULL;
 
-	if (dtls_socket <= 0)
+	if (dtls_socket < 0)
 		return -1;
 
 	if (host == NULL) {
@@ -945,7 +945,7 @@ static int dtls_tl_keepalive(void)
 	char buf[4] = "jaK";
 	eXosip_reg_t *jr;
 
-	if (dtls_socket <= 0)
+	if (dtls_socket < 0)
 		return OSIP_UNDEFINED_ERROR;
 
 	for (jr = eXosip.j_reg; jr != NULL; jr = jr->next) {
diff --git a/src/eXtl_tcp.c b/src/eXtl_tcp.c
index b862b20..26553f6 100644
--- a/src/eXtl_tcp.c
+++ b/src/eXtl_tcp.c
@@ -61,7 +61,7 @@
 CFReadStreamRef tcp_readStream;
 CFWriteStreamRef tcp_writeStream;
 #endif
-static int tcp_socket;
+static int tcp_socket = -1;
 static struct sockaddr_storage ai_addr;
 
 static char tcp_firewall_ip[64];
@@ -90,9 +90,12 @@ static struct _tcp_sockets tcp_socket_tab[EXOSIP_MAX_SOCKETS];
 
 static int tcp_tl_init(void)
 {
-	tcp_socket = 0;
+	int i;
+	tcp_socket = -1;
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
 	memset(&tcp_socket_tab, 0, sizeof(struct _tcp_sockets) * EXOSIP_MAX_SOCKETS);
+	for (i = 0; i < EXOSIP_MAX_SOCKETS; ++i)
+		tcp_socket_tab[i].socket = -1;
 	memset(tcp_firewall_ip, 0, sizeof(tcp_firewall_ip));
 	memset(tcp_firewall_port, 0, sizeof(tcp_firewall_port));
 	return OSIP_SUCCESS;
@@ -100,15 +103,19 @@ static int tcp_tl_init(void)
 
 static int tcp_tl_free(void)
 {
+	int i;
 	int pos;
 	memset(tcp_firewall_ip, 0, sizeof(tcp_firewall_ip));
 	memset(tcp_firewall_port, 0, sizeof(tcp_firewall_port));
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
-	if (tcp_socket > 0)
+	if (tcp_socket >= 0)
+	{
 		close(tcp_socket);
+		tcp_socket = -1;
+	}
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket > 0) {
+		if (tcp_socket_tab[pos].socket >= 0) {
 			close(tcp_socket_tab[pos].socket);
 #ifdef MULTITASKING_ENABLED
 			if (tcp_socket_tab[pos].readStream!=NULL)
@@ -129,6 +136,8 @@ static int tcp_tl_free(void)
 		}
 	}
 	memset(&tcp_socket_tab, 0, sizeof(struct _tcp_sockets) * EXOSIP_MAX_SOCKETS);
+	for (i = 0; i < EXOSIP_MAX_SOCKETS; ++i)
+		tcp_socket_tab[i].socket = -1;
 	return OSIP_SUCCESS;
 }
 
@@ -262,7 +271,7 @@ static int tcp_tl_open(void)
 static int tcp_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 {
 	int pos;
-	if (tcp_socket <= 0)
+	if (tcp_socket < 0)
 		return -1;
 
 	eXFD_SET(tcp_socket, osip_fdset);
@@ -271,7 +280,7 @@ static int tcp_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 		*fd_max = tcp_socket;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket > 0) {
+		if (tcp_socket_tab[pos].socket >= 0) {
 			eXFD_SET(tcp_socket_tab[pos].socket, osip_fdset);
 			if (tcp_socket_tab[pos].socket > *fd_max)
 				*fd_max = tcp_socket_tab[pos].socket;
@@ -286,7 +295,7 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 	int pos = 0;
 	char *buf;
 
-	if (FD_ISSET(tcp_socket, osip_fdset)) {
+	if (tcp_socket >= 0 && FD_ISSET(tcp_socket, osip_fdset)) {
 		/* accept incoming connection */
 		char src6host[NI_MAXHOST];
 		int recvport = 0;
@@ -305,13 +314,13 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 			slen = sizeof(struct sockaddr_in6);
 
 		for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-			if (tcp_socket_tab[pos].socket == 0)
+			if (tcp_socket_tab[pos].socket < 0)
 				break;
 		}
 		if (pos == EXOSIP_MAX_SOCKETS) {
 			/* delete an old one! */
 			pos = 0;
-			if (tcp_socket_tab[pos].socket > 0) {
+			if (tcp_socket_tab[pos].socket >= 0) {
 				close(tcp_socket_tab[pos].socket);
 #ifdef MULTITASKING_ENABLED
 				if (tcp_socket_tab[pos].readStream!=NULL)
@@ -331,6 +340,7 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 				tcp_socket_tab[pos].previous_content = NULL;
 			}
 			memset(&tcp_socket_tab[pos], 0, sizeof(tcp_socket_tab[pos]));
+			tcp_socket_tab[pos].socket = -1;
 		}
 		
 		OSIP_TRACE(osip_trace(__FILE__, __LINE__, OSIP_INFO3, NULL,
@@ -399,7 +409,7 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 	buf = NULL;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket > 0
+		if (tcp_socket_tab[pos].socket >= 0
 			&& FD_ISSET(tcp_socket_tab[pos].socket, osip_fdset)) {
 			int i;
 
@@ -627,6 +637,7 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 						tcp_socket_tab[pos].previous_content = NULL;
 					}
 					memset(&(tcp_socket_tab[pos]), 0, sizeof(tcp_socket_tab[pos]));
+					tcp_socket_tab[pos].socket = -1;
 				}
 			} else if (i == 0) {
 				OSIP_TRACE(osip_trace
@@ -652,6 +663,7 @@ static int tcp_tl_read_message(fd_set * osip_fdset)
 					tcp_socket_tab[pos].previous_content = NULL;
 				}
 				memset(&(tcp_socket_tab[pos]), 0, sizeof(tcp_socket_tab[pos]));
+				tcp_socket_tab[pos].socket = -1;
 			}
 #ifndef MINISIZE
 			else {
@@ -675,7 +687,7 @@ static int _tcp_tl_find_socket(char *host, int port)
 	int pos;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket != 0) {
+		if (tcp_socket_tab[pos].socket >= 0) {
 			if (0 == osip_strcasecmp(tcp_socket_tab[pos].remote_ip, host)
 				&& port == tcp_socket_tab[pos].remote_port)
 				return pos;
@@ -745,7 +757,7 @@ static int _tcp_tl_connect_socket(char *host, int port)
 	memset(src6host, 0, sizeof(src6host));
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket == 0) {
+		if (tcp_socket_tab[pos].socket < 0) {
 			break;
 		}
 	}
@@ -757,7 +769,7 @@ static int _tcp_tl_connect_socket(char *host, int port)
 #ifdef DELETE_OLD_SOCKETS
 	  /* delete an old one! */
 	  pos = 0;
-	  if (tcp_socket_tab[pos].socket > 0) {
+	  if (tcp_socket_tab[pos].socket >= 0) {
 	    close(tcp_socket_tab[pos].socket);
 #ifdef MULTITASKING_ENABLED
 	    if (tcp_socket_tab[pos].readStream!=NULL)
@@ -780,6 +792,7 @@ static int _tcp_tl_connect_socket(char *host, int port)
 	      tcp_socket_tab[pos].previous_content = NULL;
 	    }
 	  memset(&tcp_socket_tab[pos], 0, sizeof(tcp_socket_tab[pos]));
+	  tcp_socket_tab[pos].socket = -1;
 #else
 	  return -1;
 #endif
@@ -978,7 +991,7 @@ static int _tcp_tl_connect_socket(char *host, int port)
 
 	eXosip_freeaddrinfo(addrinfo);
 
-	if (sock > 0) {
+	if (sock >= 0) {
 		tcp_socket_tab[pos].socket = sock;
 
 		if (src6host[0] == '\0')
@@ -1035,9 +1048,9 @@ tcp_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 		return -1;
 	}
 
-	if (out_socket > 0) {
+	if (out_socket >= 0) {
 		for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-			if (tcp_socket_tab[pos].socket != 0) {
+			if (tcp_socket_tab[pos].socket >= 0) {
 				if (tcp_socket_tab[pos].socket == out_socket) {
 					out_socket = tcp_socket_tab[pos].socket;
 					OSIP_TRACE(osip_trace(__FILE__, __LINE__, OSIP_INFO1, NULL,
@@ -1049,23 +1062,22 @@ tcp_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 			}
 		}
 		if (pos == EXOSIP_MAX_SOCKETS)
-			out_socket = 0;
+			out_socket = -1;
 	}
 	
 	/* Step 1: find existing socket to send message */
-	if (out_socket <= 0) {
+	if (out_socket < 0) {
 		pos = _tcp_tl_find_socket(host, port);
 		
 		/* Step 2: create new socket with host:port */
 		if (pos < 0) {
 			pos = _tcp_tl_connect_socket(host, port);
 		}
-		if (pos>=0)
+		if (pos >= 0)
 			out_socket = tcp_socket_tab[pos].socket;
 	}
-	
 
-	if (out_socket <= 0) {
+	if (out_socket < 0) {
 		osip_free(message);
 		return -1;
 	}
@@ -1179,11 +1191,11 @@ static int tcp_tl_keepalive(void)
 	int pos;
 	int i;
 
-	if (tcp_socket <= 0)
+	if (tcp_socket < 0)
 		return OSIP_UNDEFINED_ERROR;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tcp_socket_tab[pos].socket > 0) {
+		if (tcp_socket_tab[pos].socket >= 0) {
 			i = _tcp_tl_is_connected(tcp_socket_tab[pos].socket);
 			if (i > 0) {
 				OSIP_TRACE(osip_trace
diff --git a/src/eXtl_tls.c b/src/eXtl_tls.c
index 722b18e..4f3ce19 100644
--- a/src/eXtl_tls.c
+++ b/src/eXtl_tls.c
@@ -82,7 +82,7 @@ SSL_CTX *initialize_server_ctx(const char *keyfile, const char *certfile,
 
 int verify_cb(int preverify_ok, X509_STORE_CTX * store);
 
-static int tls_socket;
+static int tls_socket = -1;
 static struct sockaddr_storage ai_addr;
 
 static char tls_firewall_ip[64];
@@ -118,11 +118,14 @@ static struct socket_tab tls_socket_tab[EXOSIP_MAX_SOCKETS];
 
 static int tls_tl_init(void)
 {
-	tls_socket = 0;
+	int i;
+	tls_socket = -1;
 	server_ctx = NULL;
 	client_ctx = NULL;
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
 	memset(&tls_socket_tab, 0, sizeof(struct socket_tab) * EXOSIP_MAX_SOCKETS);
+	for (i = 0; i < EXOSIP_MAX_SOCKETS; ++i)
+		tls_socket_tab[i].socket = -1;
 	memset(tls_firewall_ip, 0, sizeof(tls_firewall_ip));
 	memset(tls_firewall_port, 0, sizeof(tls_firewall_port));
 	memset(&eXosip_tls_ctx_params, 0, sizeof(eXosip_tls_ctx_t));
@@ -133,6 +136,7 @@ static int tls_tl_init(void)
 
 static int tls_tl_free(void)
 {
+	int i;
 	int pos;
 	if (server_ctx != NULL)
 		SSL_CTX_free(server_ctx);
@@ -143,7 +147,7 @@ static int tls_tl_free(void)
 	client_ctx = NULL;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket > 0) {
+		if (tls_socket_tab[pos].socket >= 0) {
 			if (tls_socket_tab[pos].ssl_conn != NULL) {
 				SSL_shutdown(tls_socket_tab[pos].ssl_conn);
 				SSL_shutdown(tls_socket_tab[pos].ssl_conn);
@@ -175,13 +179,15 @@ static int tls_tl_free(void)
 
 
 	memset(&tls_socket_tab, 0, sizeof(struct socket_tab) * EXOSIP_MAX_SOCKETS);
+	for (i = 0; i < EXOSIP_MAX_SOCKETS; ++i)
+		tls_socket_tab[i].socket = -1;
 
 	memset(tls_firewall_ip, 0, sizeof(tls_firewall_ip));
 	memset(tls_firewall_port, 0, sizeof(tls_firewall_port));
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
-	if (tls_socket > 0)
+	if (tls_socket >= 0)
 		close(tls_socket);
-	tls_socket = 0;
+	tls_socket = -1;
 
 	memset(&eXosip_tls_ctx_params, 0, sizeof(eXosip_tls_ctx_t));
 	memset(&tls_local_cn_name, 0, sizeof(tls_local_cn_name));
@@ -1292,7 +1298,7 @@ static int tls_tl_open(void)
 static int tls_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 {
 	int pos;
-	if (tls_socket <= 0)
+	if (tls_socket < 0)
 		return -1;
 
 	eXFD_SET(tls_socket, osip_fdset);
@@ -1301,7 +1307,7 @@ static int tls_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 		*fd_max = tls_socket;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket > 0) {
+		if (tls_socket_tab[pos].socket >= 0) {
 			eXFD_SET(tls_socket_tab[pos].socket, osip_fdset);
 			if (tls_socket_tab[pos].socket > *fd_max)
 				*fd_max = tls_socket_tab[pos].socket;
@@ -1658,7 +1664,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 	int pos = 0;
 	char *buf;
 
-	if (FD_ISSET(tls_socket, osip_fdset)) {
+	if (tls_socket >= 0 && FD_ISSET(tls_socket, osip_fdset)) {
 		/* accept incoming connection */
 		char src6host[NI_MAXHOST];
 		int recvport = 0;
@@ -1682,13 +1688,13 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 			slen = sizeof(struct sockaddr_in6);
 
 		for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-			if (tls_socket_tab[pos].socket <= 0)
+			if (tls_socket_tab[pos].socket < 0)
 				break;
 		}
 		if (pos == EXOSIP_MAX_SOCKETS) {
 			/* delete an old one! */
 			pos = 0;
-			if (tls_socket_tab[pos].socket > 0) {
+			if (tls_socket_tab[pos].socket >= 0) {
 				if (tls_socket_tab[pos].ssl_conn != NULL) {
 					SSL_shutdown(tls_socket_tab[pos].ssl_conn);
 					SSL_shutdown(tls_socket_tab[pos].ssl_conn);
@@ -1710,6 +1716,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 #endif
 			}
 			memset(&tls_socket_tab[pos], 0, sizeof(struct socket_tab));
+			tls_socket_tab[pos].socket = -1;
 		}
 		OSIP_TRACE(osip_trace(__FILE__, __LINE__, OSIP_INFO3, NULL,
 							  "creating TLS socket at index: %i\n", pos));
@@ -1826,7 +1833,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 	buf = NULL;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket > 0
+		if (tls_socket_tab[pos].socket >= 0
 			&& FD_ISSET(tls_socket_tab[pos].socket, osip_fdset)) {
 			int i;
 			int rlen, err;
@@ -1877,6 +1884,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 					}
 #endif
 					memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+					tls_socket_tab[pos].socket = -1;
 					continue;
 				}
 			}
@@ -1904,6 +1912,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 					}
 #endif
 					memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+					tls_socket_tab[pos].socket = -1;
 					continue;
 				}
 			}
@@ -1932,6 +1941,7 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 					}
 #endif
 					memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+					tls_socket_tab[pos].socket = -1;
 					continue;
 				}
 				tls_socket_tab[pos].ssl_state = 3;
@@ -1981,8 +1991,8 @@ static int tls_tl_read_message(fd_set * osip_fdset)
 							CFRelease(tls_socket_tab[pos].writeStream);
 						}
 #endif
-						memset(&(tls_socket_tab[pos]), 0,
-							   sizeof(tls_socket_tab[pos]));
+						memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+						tls_socket_tab[pos].socket = -1;
 
 						rlen = 0;	/* discard any remaining data ? */
 						break;
@@ -2019,7 +2029,7 @@ static int _tls_tl_find_socket(char *host, int port)
 	int pos;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket != 0) {
+		if (tls_socket_tab[pos].socket >= 0) {
 			if (0 == osip_strcasecmp(tls_socket_tab[pos].remote_ip, host)
 				&& port == tls_socket_tab[pos].remote_port)
 				return pos;
@@ -2042,7 +2052,7 @@ static int _tls_tl_connect_socket(char *host, int port)
 	memset(src6host, 0, sizeof(src6host));
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket == 0) {
+		if (tls_socket_tab[pos].socket < 0) {
 			break;
 		}
 	}
@@ -2256,7 +2266,7 @@ static int _tls_tl_connect_socket(char *host, int port)
 
 	eXosip_freeaddrinfo(addrinfo);
 
-	if (sock > 0) {
+	if (sock >= 0) {
 		tls_socket_tab[pos].socket = sock;
 
 		if (src6host[0] == '\0')
@@ -2293,6 +2303,7 @@ static int _tls_tl_connect_socket(char *host, int port)
 #endif
 				
 				memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+				tls_socket_tab[pos].socket = -1;
 				return -1;
 			}
 		}
@@ -2346,9 +2357,9 @@ tls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 		return -1;
 	}
 
-	if (out_socket > 0) {
+	if (out_socket >= 0) {
 		for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-			if (tls_socket_tab[pos].socket != 0) {
+			if (tls_socket_tab[pos].socket >= 0) {
 				if (tls_socket_tab[pos].socket == out_socket) {
 					out_socket = tls_socket_tab[pos].socket;
 					ssl = tls_socket_tab[pos].ssl_conn;
@@ -2361,11 +2372,11 @@ tls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 			}
 		}
 		if (pos == EXOSIP_MAX_SOCKETS)
-			out_socket = 0;
+			out_socket = -1;
 	}
 
 	/* Step 1: find existing socket to send message */
-	if (out_socket <= 0) {
+	if (out_socket < 0) {
 		pos = _tls_tl_find_socket(host, port);
 
 		/* Step 2: create new socket with host:port */
@@ -2378,7 +2389,7 @@ tls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 		}
 	}
 
-	if (out_socket <= 0) {
+	if (out_socket < 0) {
 		osip_free(message);
 		return -1;
 	}
@@ -2416,6 +2427,7 @@ tls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 #endif
 				
 				memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+				tls_socket_tab[pos].socket = -1;
 				return -1;
 			}
 			return 1;
@@ -2457,6 +2469,7 @@ tls_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 #endif
 			
 			memset(&(tls_socket_tab[pos]), 0, sizeof(tls_socket_tab[pos]));
+			tls_socket_tab[pos].socket = -1;
 			osip_free(message);
 			return -1;
 		} else if (i > 0) {
@@ -2528,11 +2541,11 @@ static int tls_tl_keepalive(void)
 	int pos;
 	int i;
 
-	if (tls_socket <= 0)
+	if (tls_socket < 0)
 		return OSIP_UNDEFINED_ERROR;
 
 	for (pos = 0; pos < EXOSIP_MAX_SOCKETS; pos++) {
-		if (tls_socket_tab[pos].socket > 0 && tls_socket_tab[pos].ssl_state > 2) {
+		if (tls_socket_tab[pos].socket >= 0 && tls_socket_tab[pos].ssl_state > 2) {
 			SSL_set_mode(tls_socket_tab[pos].ssl_conn, SSL_MODE_AUTO_RETRY);
 
 			while (1) {
diff --git a/src/eXtl_udp.c b/src/eXtl_udp.c
index 2b297d8..a2d82c8 100644
--- a/src/eXtl_udp.c
+++ b/src/eXtl_udp.c
@@ -39,7 +39,7 @@ extern eXosip_t eXosip;
 
 void udp_tl_learn_port_from_via(osip_message_t * sip);
 
-static int udp_socket;
+static int udp_socket = -1;
 static struct sockaddr_storage ai_addr;
 
 static char udp_firewall_ip[64];
@@ -47,7 +47,7 @@ static char udp_firewall_port[10];
 
 static int udp_tl_init(void)
 {
-	udp_socket = 0;
+	udp_socket = -1;
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
 	memset(udp_firewall_ip, 0, sizeof(udp_firewall_ip));
 	memset(udp_firewall_port, 0, sizeof(udp_firewall_port));
@@ -59,8 +59,11 @@ static int udp_tl_free(void)
 	memset(udp_firewall_ip, 0, sizeof(udp_firewall_ip));
 	memset(udp_firewall_port, 0, sizeof(udp_firewall_port));
 	memset(&ai_addr, 0, sizeof(struct sockaddr_storage));
-	if (udp_socket > 0)
+	if (udp_socket >= 0)
+	{
 		close(udp_socket);
+		udp_socket = -1;
+	}
 
 	return OSIP_SUCCESS;
 }
@@ -182,7 +185,7 @@ static int udp_tl_open(void)
 
 static int udp_tl_set_fdset(fd_set * osip_fdset, int *fd_max)
 {
-	if (udp_socket <= 0)
+	if (udp_socket < 0)
 		return -1;
 
 	eXFD_SET(udp_socket, osip_fdset);
@@ -234,7 +237,7 @@ static int udp_tl_read_message(fd_set * osip_fdset)
 	char *buf;
 	int i;
 
-	if (udp_socket <= 0)
+	if (udp_socket < 0)
 		return -1;
 
 	if (FD_ISSET(udp_socket, osip_fdset)) {
@@ -431,7 +434,7 @@ udp_tl_send_message(osip_transaction_t * tr, osip_message_t * sip, char *host,
 	char ipbuf[INET6_ADDRSTRLEN];
 	int i;
 
-	if (udp_socket <= 0)
+	if (udp_socket < 0)
 		return -1;
 
 	if (host == NULL) {
@@ -574,7 +577,7 @@ static int udp_tl_keepalive(void)
 	char buf[4] = "jaK";
 	eXosip_reg_t *jr;
 
-	if (udp_socket <= 0)
+	if (udp_socket < 0)
 		return OSIP_UNDEFINED_ERROR;
 
 	for (jr = eXosip.j_reg; jr != NULL; jr = jr->next) {
-- 
1.7.0.4

